
MotorControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  00000e82  00000f16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800168  00800168  00000f7e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015b7  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cbb  00000000  00000000  000027c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e81  00000000  00000000  0000347e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000044c  00000000  00000000  00004300  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000079c  00000000  00000000  0000474c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d9  00000000  00000000  00004ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  000055c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 36       	cpi	r26, 0x68	; 104
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e6       	ldi	r26, 0x68	; 104
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 38       	cpi	r26, 0x88	; 136
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 26 01 	call	0x24c	; 0x24c <main>
  9e:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_21>:

*/



ISR(ADC_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
	switch(ADMUX){
  c8:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  cc:	81 34       	cpi	r24, 0x41	; 65
  ce:	81 f0       	breq	.+32     	; 0xf0 <__vector_21+0x4a>
  d0:	18 f4       	brcc	.+6      	; 0xd8 <__vector_21+0x32>
  d2:	80 34       	cpi	r24, 0x40	; 64
  d4:	31 f0       	breq	.+12     	; 0xe2 <__vector_21+0x3c>
  d6:	20 c0       	rjmp	.+64     	; 0x118 <__vector_21+0x72>
  d8:	82 34       	cpi	r24, 0x42	; 66
  da:	89 f0       	breq	.+34     	; 0xfe <__vector_21+0x58>
  dc:	83 34       	cpi	r24, 0x43	; 67
  de:	b1 f0       	breq	.+44     	; 0x10c <__vector_21+0x66>
  e0:	1b c0       	rjmp	.+54     	; 0x118 <__vector_21+0x72>
		case 0x40:
		//printf("ADC1 RESULT = %d\n",adc_result);
		//printf("ADC CHANNEL 0\n");
		Max_Curren = 31;
  e2:	8f e1       	ldi	r24, 0x1F	; 31
  e4:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <Max_Curren>
		ADC_Channel = 1;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <ADC_Channel>
		break;
  ee:	18 c0       	rjmp	.+48     	; 0x120 <__vector_21+0x7a>
		
		case 0x41:
		//printf("ADC2 RESULT = %d\n",adc_result);
		//printf("ADC CHANNEL 1\n");
		Max_Curren = 32;
  f0:	80 e2       	ldi	r24, 0x20	; 32
  f2:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <Max_Curren>
		ADC_Channel = 2;
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <ADC_Channel>
		break;
  fc:	11 c0       	rjmp	.+34     	; 0x120 <__vector_21+0x7a>
		
		case 0x42:
		//printf("ADC3 RESULT = %d\n",adc_result);
		//printf("ADC CHANNEL 2\n");
		Max_Curren = 33;
  fe:	81 e2       	ldi	r24, 0x21	; 33
 100:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <Max_Curren>
		ADC_Channel = 3;
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <ADC_Channel>
		break;
 10a:	0a c0       	rjmp	.+20     	; 0x120 <__vector_21+0x7a>
		
		case 0x43:
		//printf("ADC4 RESULT = %d\n",adc_result);
		//printf("ADC CHANNEL 3\n");
		Max_Curren = 34;
 10c:	82 e2       	ldi	r24, 0x22	; 34
 10e:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <Max_Curren>
		ADC_Channel = 0;
 112:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <ADC_Channel>
		break;
 116:	04 c0       	rjmp	.+8      	; 0x120 <__vector_21+0x7a>
		default:
		printf("Broken!\n");
 118:	8c e1       	ldi	r24, 0x1C	; 28
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	0e 94 47 04 	call	0x88e	; 0x88e <puts>
		break;
	}
}
 120:	ff 91       	pop	r31
 122:	ef 91       	pop	r30
 124:	bf 91       	pop	r27
 126:	af 91       	pop	r26
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	7f 91       	pop	r23
 12e:	6f 91       	pop	r22
 130:	5f 91       	pop	r21
 132:	4f 91       	pop	r20
 134:	3f 91       	pop	r19
 136:	2f 91       	pop	r18
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <I2C_recieve>:
		sei();
}

void i2c_transmit_data(uint8_t data)
{		
	TWDR = data;
 142:	cf 93       	push	r28
 144:	c8 2f       	mov	r28, r24
 146:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <bytes>
 14a:	81 11       	cpse	r24, r1
 14c:	06 c0       	rjmp	.+12     	; 0x15a <I2C_recieve+0x18>
 14e:	c0 93 72 01 	sts	0x0172, r28	; 0x800172 <opcode>
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <bytes>
 158:	04 c0       	rjmp	.+8      	; 0x162 <I2C_recieve+0x20>
 15a:	c0 93 71 01 	sts	0x0171, r28	; 0x800171 <data>
 15e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <i2c_service>
 162:	c0 93 71 01 	sts	0x0171, r28	; 0x800171 <data>
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <I2C_data_ACK_request>:
 16a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <i2c_service>
 16e:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <data>
 172:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 176:	08 95       	ret

00000178 <I2C_data_NACK_request>:
 178:	0e 94 d5 01 	call	0x3aa	; 0x3aa <i2c_service>
 17c:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <data>
 180:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 184:	08 95       	ret

00000186 <i2c_init>:
 186:	f8 94       	cli
 188:	88 0f       	add	r24, r24
 18a:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
 18e:	85 ec       	ldi	r24, 0xC5	; 197
 190:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 194:	78 94       	sei
 196:	08 95       	ret

00000198 <set_data>:
}

void set_data(uint8_t value)
{
	data = value;
 198:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <data>
 19c:	08 95       	ret

0000019e <__vector_24>:
}


 
ISR(TWI_vect)
{
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
	switch(TW_STATUS)
 1c0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1c4:	88 7f       	andi	r24, 0xF8	; 248
 1c6:	80 38       	cpi	r24, 0x80	; 128
 1c8:	49 f0       	breq	.+18     	; 0x1dc <__vector_24+0x3e>
 1ca:	18 f4       	brcc	.+6      	; 0x1d2 <__vector_24+0x34>
 1cc:	88 23       	and	r24, r24
 1ce:	d1 f0       	breq	.+52     	; 0x204 <__vector_24+0x66>
 1d0:	1f c0       	rjmp	.+62     	; 0x210 <__vector_24+0x72>
 1d2:	88 3a       	cpi	r24, 0xA8	; 168
 1d4:	59 f0       	breq	.+22     	; 0x1ec <__vector_24+0x4e>
 1d6:	88 3b       	cpi	r24, 0xB8	; 184
 1d8:	79 f0       	breq	.+30     	; 0x1f8 <__vector_24+0x5a>
 1da:	1a c0       	rjmp	.+52     	; 0x210 <__vector_24+0x72>
	{
		case TW_SR_DATA_ACK:
		// received data from master, call the receive callback
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 1dc:	85 ec       	ldi	r24, 0xC5	; 197
 1de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		I2C_recieve(TWDR);
 1e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 1e6:	0e 94 a1 00 	call	0x142	; 0x142 <I2C_recieve>
		break;
 1ea:	15 c0       	rjmp	.+42     	; 0x216 <__vector_24+0x78>
		
		case TW_ST_SLA_ACK:
		// master is requesting data using NACK,master expects only one additional byte. call the request callback
		I2C_data_NACK_request();
 1ec:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_data_NACK_request>
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 1f0:	85 ec       	ldi	r24, 0xC5	; 197
 1f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
 1f6:	0f c0       	rjmp	.+30     	; 0x216 <__vector_24+0x78>
		
		case TW_ST_DATA_ACK:
		// master is requesting data using ACK, master expects multiple bytes. call the request callback
		I2C_data_ACK_request();
 1f8:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_data_ACK_request>
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 1fc:	85 ec       	ldi	r24, 0xC5	; 197
 1fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
 202:	09 c0       	rjmp	.+18     	; 0x216 <__vector_24+0x78>
		
		case TW_BUS_ERROR:
		// some sort of erroneous state, prepare TWI to be readdressed
		TWCR = 0;
 204:	ec eb       	ldi	r30, 0xBC	; 188
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	10 82       	st	Z, r1
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 20a:	85 ec       	ldi	r24, 0xC5	; 197
 20c:	80 83       	st	Z, r24
		break;
 20e:	03 c0       	rjmp	.+6      	; 0x216 <__vector_24+0x78>
		
		default:
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 210:	85 ec       	ldi	r24, 0xC5	; 197
 212:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
	}
}
 216:	ff 91       	pop	r31
 218:	ef 91       	pop	r30
 21a:	bf 91       	pop	r27
 21c:	af 91       	pop	r26
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	7f 91       	pop	r23
 224:	6f 91       	pop	r22
 226:	5f 91       	pop	r21
 228:	4f 91       	pop	r20
 22a:	3f 91       	pop	r19
 22c:	2f 91       	pop	r18
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <IO_init>:


void IO_init(void){	///////////////////////// Initial Pin Setup
	
	// bit order 7 6 5 4 3 2 1 0
	DDRB  = 0b00001011;
 238:	8b e0       	ldi	r24, 0x0B	; 11
 23a:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000000;
 23c:	15 b8       	out	0x05, r1	; 5
	
	DDRC  = 0b00001111;
 23e:	8f e0       	ldi	r24, 0x0F	; 15
 240:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b00000000;
 242:	18 b8       	out	0x08, r1	; 8
	
	DDRD  = 0b11101000;
 244:	88 ee       	ldi	r24, 0xE8	; 232
 246:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000000;
 248:	1b b8       	out	0x0b, r1	; 11
 24a:	08 95       	ret

0000024c <main>:
//						Global Variables


int main(void)
{
	new_data = 0;
 24c:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <new_data>
	status = 0;
 250:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <status>
	zone = 1;	
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <zone>
		
	uart_init();   // open the communication to the microcontroller
 25a:	0e 94 ed 03 	call	0x7da	; 0x7da <uart_init>
	io_redirect(); // redirect input and output to the uart	
 25e:	0e 94 fe 03 	call	0x7fc	; 0x7fc <io_redirect>
	IO_init();	   //
 262:	0e 94 1c 01 	call	0x238	; 0x238 <IO_init>
	TimersInit();
 266:	0e 94 1d 02 	call	0x43a	; 0x43a <TimersInit>
	PWM_init();
 26a:	0e 94 24 02 	call	0x448	; 0x448 <PWM_init>
	//Enable_ADC();
	i2c_init(I2C_ADDR);	
 26e:	81 e4       	ldi	r24, 0x41	; 65
 270:	0e 94 c3 00 	call	0x186	; 0x186 <i2c_init>
	sei();
 274:	78 94       	sei
		
    while(1) 
	
	
	
    {	printf("The error is %d   and new data = %d \n",error, new_data);
 276:	c4 e2       	ldi	r28, 0x24	; 36
 278:	d1 e0       	ldi	r29, 0x01	; 1
 27a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <new_data>
 27e:	1f 92       	push	r1
 280:	8f 93       	push	r24
 282:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <error+0x1>
 286:	8f 93       	push	r24
 288:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <error>
 28c:	8f 93       	push	r24
 28e:	df 93       	push	r29
 290:	cf 93       	push	r28
 292:	0e 94 31 04 	call	0x862	; 0x862 <printf>
		
		
		if (new_data==1)
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	0f 90       	pop	r0
 2a2:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <new_data>
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	41 f7       	brne	.-48     	; 0x27a <main+0x2e>
		{
			motor_handler();
 2aa:	0e 94 52 03 	call	0x6a4	; 0x6a4 <motor_handler>
			
			new_data = 0;	
 2ae:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <new_data>
 2b2:	e3 cf       	rjmp	.-58     	; 0x27a <main+0x2e>

000002b4 <cal_checksum>:
}


void set_opcode(uint8_t value)
{
	opcode = value;
 2b4:	fc 01       	movw	r30, r24
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	9b 01       	movw	r18, r22
 2ba:	21 50       	subi	r18, 0x01	; 1
 2bc:	31 09       	sbc	r19, r1
 2be:	16 16       	cp	r1, r22
 2c0:	17 06       	cpc	r1, r23
 2c2:	74 f4       	brge	.+28     	; 0x2e0 <cal_checksum+0x2c>
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	af 01       	movw	r20, r30
 2c8:	02 2e       	mov	r0, r18
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <cal_checksum+0x1c>
 2cc:	55 95       	asr	r21
 2ce:	47 95       	ror	r20
 2d0:	0a 94       	dec	r0
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <cal_checksum+0x18>
 2d4:	41 70       	andi	r20, 0x01	; 1
 2d6:	84 27       	eor	r24, r20
 2d8:	21 50       	subi	r18, 0x01	; 1
 2da:	31 09       	sbc	r19, r1
 2dc:	a0 f7       	brcc	.-24     	; 0x2c6 <cal_checksum+0x12>
 2de:	01 c0       	rjmp	.+2      	; 0x2e2 <cal_checksum+0x2e>
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	08 95       	ret

000002e6 <Motor_Send_Status>:



void Motor_Send_Status(void)
{
	if (bytes==1)
 2e6:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <bytes>
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	59 f4       	brne	.+22     	; 0x304 <Motor_Send_Status+0x1e>
	{
		int checksum;
		
		checksum = cal_checksum(status, 8);
 2ee:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <status>
 2f2:	68 e0       	ldi	r22, 0x08	; 8
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <cal_checksum>
		set_data(checksum);
 2fa:	0e 94 cc 00 	call	0x198	; 0x198 <set_data>
		bytes=0;
 2fe:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <bytes>
 302:	08 95       	ret
	}
	else
	{
		set_data(status);
 304:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <status>
 308:	0e 94 cc 00 	call	0x198	; 0x198 <set_data>
		bytes++;
 30c:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <bytes>
 310:	8f 5f       	subi	r24, 0xFF	; 255
 312:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <bytes>
 316:	08 95       	ret

00000318 <Motor_Send_error>:
	}
}
void Motor_Send_error(void)
{
 318:	cf 93       	push	r28
	//printf("Motor Send update \n");
	int new_error=0;
	char received_checksum;
	if (bytes==3)
 31a:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <bytes>
 31e:	83 30       	cpi	r24, 0x03	; 3
 320:	f9 f4       	brne	.+62     	; 0x360 <Motor_Send_error+0x48>
	{
		received_checksum = data;
 322:	c0 91 71 01 	lds	r28, 0x0171	; 0x800171 <data>
		int checksum = cal_checksum(new_error, 16);
 326:	60 e1       	ldi	r22, 0x10	; 16
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <cal_checksum>
		
		if (checksum==received_checksum)
 330:	2c 2f       	mov	r18, r28
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	82 17       	cp	r24, r18
 336:	93 07       	cpc	r25, r19
 338:	81 f4       	brne	.+32     	; 0x35a <Motor_Send_error+0x42>
		{
			error = new_error;
 33a:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <error+0x1>
 33e:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <error>
			printf("after %d \n",error);
 342:	1f 92       	push	r1
 344:	1f 92       	push	r1
 346:	8a e4       	ldi	r24, 0x4A	; 74
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	9f 93       	push	r25
 34c:	8f 93       	push	r24
 34e:	0e 94 31 04 	call	0x862	; 0x862 <printf>
 352:	0f 90       	pop	r0
 354:	0f 90       	pop	r0
 356:	0f 90       	pop	r0
 358:	0f 90       	pop	r0
		}

		
		bytes=0;
 35a:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <bytes>
 35e:	23 c0       	rjmp	.+70     	; 0x3a6 <Motor_Send_error+0x8e>
		
	}
	else
	{
		new_error=new_error + data << (8*(bytes-1));
 360:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <data>
		printf("error update %d \n",new_error);
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	a9 01       	movw	r20, r18
 378:	02 c0       	rjmp	.+4      	; 0x37e <Motor_Send_error+0x66>
 37a:	44 0f       	add	r20, r20
 37c:	55 1f       	adc	r21, r21
 37e:	8a 95       	dec	r24
 380:	e2 f7       	brpl	.-8      	; 0x37a <Motor_Send_error+0x62>
 382:	ca 01       	movw	r24, r20
 384:	9f 93       	push	r25
 386:	4f 93       	push	r20
 388:	85 e5       	ldi	r24, 0x55	; 85
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	9f 93       	push	r25
 38e:	8f 93       	push	r24
 390:	0e 94 31 04 	call	0x862	; 0x862 <printf>
		bytes++;
 394:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <bytes>
 398:	8f 5f       	subi	r24, 0xFF	; 255
 39a:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <bytes>
 39e:	0f 90       	pop	r0
 3a0:	0f 90       	pop	r0
 3a2:	0f 90       	pop	r0
 3a4:	0f 90       	pop	r0
	
	
	
	
	
}
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <i2c_service>:
}


void i2c_service(void)
{
	switch(opcode)
 3aa:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <opcode>
 3ae:	88 23       	and	r24, r24
 3b0:	19 f0       	breq	.+6      	; 0x3b8 <i2c_service+0xe>
 3b2:	81 30       	cpi	r24, 0x01	; 1
 3b4:	21 f0       	breq	.+8      	; 0x3be <i2c_service+0x14>
 3b6:	08 95       	ret
	{
		case 0:
		{
			Motor_Send_Status();
 3b8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Motor_Send_Status>
			break;
 3bc:	08 95       	ret
		}
		
		case 1:
		{
			Motor_Send_error();
 3be:	0e 94 8c 01 	call	0x318	; 0x318 <Motor_Send_error>
 3c2:	08 95       	ret

000003c4 <T0_init>:
{
	PinState(pd3, low);
	PinState(pb3, low);
	
	Motor_pwm.desired_pwm_m3 = Zone3_MAX_PWM;
	Motor_pwm.desired_pwm_m4 = Zone3_MAX_PWM;
 3c4:	84 b5       	in	r24, 0x24	; 36
 3c6:	80 68       	ori	r24, 0x80	; 128
 3c8:	84 bd       	out	0x24, r24	; 36
 3ca:	84 b5       	in	r24, 0x24	; 36
 3cc:	80 62       	ori	r24, 0x20	; 32
 3ce:	84 bd       	out	0x24, r24	; 36
 3d0:	84 b5       	in	r24, 0x24	; 36
 3d2:	8b 60       	ori	r24, 0x0B	; 11
 3d4:	84 bd       	out	0x24, r24	; 36
 3d6:	17 bc       	out	0x27, r1	; 39
 3d8:	18 bc       	out	0x28, r1	; 40
 3da:	85 b5       	in	r24, 0x25	; 37
 3dc:	82 60       	ori	r24, 0x02	; 2
 3de:	85 bd       	out	0x25, r24	; 37
 3e0:	08 95       	ret

000003e2 <T1_init>:
 3e2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 3e6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3ea:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 3ee:	8f e9       	ldi	r24, 0x9F	; 159
 3f0:	9f e0       	ldi	r25, 0x0F	; 15
 3f2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 3f6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 3fa:	e1 e8       	ldi	r30, 0x81	; 129
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 81       	ld	r24, Z
 400:	89 60       	ori	r24, 0x09	; 9
 402:	80 83       	st	Z, r24
 404:	ef e6       	ldi	r30, 0x6F	; 111
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	80 81       	ld	r24, Z
 40a:	82 60       	ori	r24, 0x02	; 2
 40c:	80 83       	st	Z, r24
 40e:	08 95       	ret

00000410 <T2_init>:
 410:	e0 eb       	ldi	r30, 0xB0	; 176
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	80 68       	ori	r24, 0x80	; 128
 418:	80 83       	st	Z, r24
 41a:	80 81       	ld	r24, Z
 41c:	80 62       	ori	r24, 0x20	; 32
 41e:	80 83       	st	Z, r24
 420:	80 81       	ld	r24, Z
 422:	8b 60       	ori	r24, 0x0B	; 11
 424:	80 83       	st	Z, r24
 426:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 42a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 42e:	e1 eb       	ldi	r30, 0xB1	; 177
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	80 81       	ld	r24, Z
 434:	82 60       	ori	r24, 0x02	; 2
 436:	80 83       	st	Z, r24
 438:	08 95       	ret

0000043a <TimersInit>:
 43a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <T0_init>
 43e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <T1_init>
 442:	0e 94 08 02 	call	0x410	; 0x410 <T2_init>
 446:	08 95       	ret

00000448 <PWM_init>:
 448:	e8 e7       	ldi	r30, 0x78	; 120
 44a:	f1 e0       	ldi	r31, 0x01	; 1
 44c:	11 82       	std	Z+1, r1	; 0x01
 44e:	10 82       	st	Z, r1
 450:	13 82       	std	Z+3, r1	; 0x03
 452:	12 82       	std	Z+2, r1	; 0x02
 454:	15 82       	std	Z+5, r1	; 0x05
 456:	14 82       	std	Z+4, r1	; 0x04
 458:	17 82       	std	Z+7, r1	; 0x07
 45a:	16 82       	std	Z+6, r1	; 0x06
 45c:	08 95       	ret

0000045e <change_pwm_slow>:
 45e:	87 b5       	in	r24, 0x27	; 39
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <Motor_pwm+0x4>
 466:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <Motor_pwm+0x5>
 46a:	82 17       	cp	r24, r18
 46c:	93 07       	cpc	r25, r19
 46e:	4c f4       	brge	.+18     	; 0x482 <change_pwm_slow+0x24>
 470:	87 b5       	in	r24, 0x27	; 39
 472:	82 33       	cpi	r24, 0x32	; 50
 474:	18 f4       	brcc	.+6      	; 0x47c <change_pwm_slow+0x1e>
 476:	82 e3       	ldi	r24, 0x32	; 50
 478:	87 bd       	out	0x27, r24	; 39
 47a:	03 c0       	rjmp	.+6      	; 0x482 <change_pwm_slow+0x24>
 47c:	87 b5       	in	r24, 0x27	; 39
 47e:	8f 5f       	subi	r24, 0xFF	; 255
 480:	87 bd       	out	0x27, r24	; 39
 482:	87 b5       	in	r24, 0x27	; 39
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <Motor_pwm+0x4>
 48a:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <Motor_pwm+0x5>
 48e:	28 17       	cp	r18, r24
 490:	39 07       	cpc	r19, r25
 492:	44 f4       	brge	.+16     	; 0x4a4 <change_pwm_slow+0x46>
 494:	87 b5       	in	r24, 0x27	; 39
 496:	83 33       	cpi	r24, 0x33	; 51
 498:	20 f0       	brcs	.+8      	; 0x4a2 <change_pwm_slow+0x44>
 49a:	87 b5       	in	r24, 0x27	; 39
 49c:	81 50       	subi	r24, 0x01	; 1
 49e:	87 bd       	out	0x27, r24	; 39
 4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <change_pwm_slow+0x46>
 4a2:	17 bc       	out	0x27, r1	; 39
 4a4:	88 b5       	in	r24, 0x28	; 40
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <Motor_pwm+0x6>
 4ac:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <Motor_pwm+0x7>
 4b0:	82 17       	cp	r24, r18
 4b2:	93 07       	cpc	r25, r19
 4b4:	4c f4       	brge	.+18     	; 0x4c8 <change_pwm_slow+0x6a>
 4b6:	88 b5       	in	r24, 0x28	; 40
 4b8:	82 33       	cpi	r24, 0x32	; 50
 4ba:	18 f4       	brcc	.+6      	; 0x4c2 <change_pwm_slow+0x64>
 4bc:	82 e3       	ldi	r24, 0x32	; 50
 4be:	88 bd       	out	0x28, r24	; 40
 4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <change_pwm_slow+0x6a>
 4c2:	88 b5       	in	r24, 0x28	; 40
 4c4:	8f 5f       	subi	r24, 0xFF	; 255
 4c6:	88 bd       	out	0x28, r24	; 40
 4c8:	88 b5       	in	r24, 0x28	; 40
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <Motor_pwm+0x6>
 4d0:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <Motor_pwm+0x7>
 4d4:	28 17       	cp	r18, r24
 4d6:	39 07       	cpc	r19, r25
 4d8:	44 f4       	brge	.+16     	; 0x4ea <change_pwm_slow+0x8c>
 4da:	88 b5       	in	r24, 0x28	; 40
 4dc:	83 33       	cpi	r24, 0x33	; 51
 4de:	20 f0       	brcs	.+8      	; 0x4e8 <change_pwm_slow+0x8a>
 4e0:	88 b5       	in	r24, 0x28	; 40
 4e2:	81 50       	subi	r24, 0x01	; 1
 4e4:	88 bd       	out	0x28, r24	; 40
 4e6:	08 95       	ret
 4e8:	18 bc       	out	0x28, r1	; 40
 4ea:	08 95       	ret

000004ec <change_pwm_fast>:
 4ec:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <Motor_pwm>
 4f6:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <Motor_pwm+0x1>
 4fa:	82 17       	cp	r24, r18
 4fc:	93 07       	cpc	r25, r19
 4fe:	6c f4       	brge	.+26     	; 0x51a <change_pwm_fast+0x2e>
 500:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 504:	82 33       	cpi	r24, 0x32	; 50
 506:	20 f4       	brcc	.+8      	; 0x510 <change_pwm_fast+0x24>
 508:	82 e3       	ldi	r24, 0x32	; 50
 50a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 50e:	05 c0       	rjmp	.+10     	; 0x51a <change_pwm_fast+0x2e>
 510:	e3 eb       	ldi	r30, 0xB3	; 179
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	8f 5f       	subi	r24, 0xFF	; 255
 518:	80 83       	st	Z, r24
 51a:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <Motor_pwm>
 524:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <Motor_pwm+0x1>
 528:	28 17       	cp	r18, r24
 52a:	39 07       	cpc	r19, r25
 52c:	64 f4       	brge	.+24     	; 0x546 <change_pwm_fast+0x5a>
 52e:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 532:	83 33       	cpi	r24, 0x33	; 51
 534:	30 f0       	brcs	.+12     	; 0x542 <change_pwm_fast+0x56>
 536:	e3 eb       	ldi	r30, 0xB3	; 179
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	80 81       	ld	r24, Z
 53c:	81 50       	subi	r24, 0x01	; 1
 53e:	80 83       	st	Z, r24
 540:	02 c0       	rjmp	.+4      	; 0x546 <change_pwm_fast+0x5a>
 542:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 546:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <Motor_pwm+0x6>
 550:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <Motor_pwm+0x7>
 554:	82 17       	cp	r24, r18
 556:	93 07       	cpc	r25, r19
 558:	6c f4       	brge	.+26     	; 0x574 <change_pwm_fast+0x88>
 55a:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 55e:	82 33       	cpi	r24, 0x32	; 50
 560:	20 f4       	brcc	.+8      	; 0x56a <change_pwm_fast+0x7e>
 562:	82 e3       	ldi	r24, 0x32	; 50
 564:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 568:	05 c0       	rjmp	.+10     	; 0x574 <change_pwm_fast+0x88>
 56a:	e4 eb       	ldi	r30, 0xB4	; 180
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	80 81       	ld	r24, Z
 570:	8f 5f       	subi	r24, 0xFF	; 255
 572:	80 83       	st	Z, r24
 574:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <Motor_pwm+0x6>
 57e:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <Motor_pwm+0x7>
 582:	28 17       	cp	r18, r24
 584:	39 07       	cpc	r19, r25
 586:	64 f4       	brge	.+24     	; 0x5a0 <change_pwm_fast+0xb4>
 588:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 58c:	83 33       	cpi	r24, 0x33	; 51
 58e:	30 f0       	brcs	.+12     	; 0x59c <change_pwm_fast+0xb0>
 590:	e4 eb       	ldi	r30, 0xB4	; 180
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	80 81       	ld	r24, Z
 596:	81 50       	subi	r24, 0x01	; 1
 598:	80 83       	st	Z, r24
 59a:	08 95       	ret
 59c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 5a0:	08 95       	ret

000005a2 <startup_sort>:
 5a2:	5e 9a       	sbi	0x0b, 6	; 11
 5a4:	5d 9a       	sbi	0x0b, 5	; 11
 5a6:	e8 e7       	ldi	r30, 0x78	; 120
 5a8:	f1 e0       	ldi	r31, 0x01	; 1
 5aa:	8f ef       	ldi	r24, 0xFF	; 255
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	91 83       	std	Z+1, r25	; 0x01
 5b0:	80 83       	st	Z, r24
 5b2:	93 83       	std	Z+3, r25	; 0x03
 5b4:	82 83       	std	Z+2, r24	; 0x02
 5b6:	08 95       	ret

000005b8 <stop_sort>:
 5b8:	e8 e7       	ldi	r30, 0x78	; 120
 5ba:	f1 e0       	ldi	r31, 0x01	; 1
 5bc:	11 82       	std	Z+1, r1	; 0x01
 5be:	10 82       	st	Z, r1
 5c0:	13 82       	std	Z+3, r1	; 0x03
 5c2:	12 82       	std	Z+2, r1	; 0x02
 5c4:	08 95       	ret

000005c6 <StopDrive>:
 5c6:	e8 e7       	ldi	r30, 0x78	; 120
 5c8:	f1 e0       	ldi	r31, 0x01	; 1
 5ca:	15 82       	std	Z+5, r1	; 0x05
 5cc:	14 82       	std	Z+4, r1	; 0x04
 5ce:	17 82       	std	Z+7, r1	; 0x07
 5d0:	16 82       	std	Z+6, r1	; 0x06
 5d2:	08 95       	ret

000005d4 <turn_right>:
 5d4:	5b 9a       	sbi	0x0b, 3	; 11
 5d6:	2b 98       	cbi	0x05, 3	; 5
 5d8:	e8 e7       	ldi	r30, 0x78	; 120
 5da:	f1 e0       	ldi	r31, 0x01	; 1
 5dc:	8f ef       	ldi	r24, 0xFF	; 255
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	95 83       	std	Z+5, r25	; 0x05
 5e2:	84 83       	std	Z+4, r24	; 0x04
 5e4:	97 83       	std	Z+7, r25	; 0x07
 5e6:	86 83       	std	Z+6, r24	; 0x06
 5e8:	08 95       	ret

000005ea <turn_left>:
 5ea:	5b 98       	cbi	0x0b, 3	; 11
 5ec:	2b 9a       	sbi	0x05, 3	; 5
 5ee:	e8 e7       	ldi	r30, 0x78	; 120
 5f0:	f1 e0       	ldi	r31, 0x01	; 1
 5f2:	8f ef       	ldi	r24, 0xFF	; 255
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	95 83       	std	Z+5, r25	; 0x05
 5f8:	84 83       	std	Z+4, r24	; 0x04
 5fa:	97 83       	std	Z+7, r25	; 0x07
 5fc:	86 83       	std	Z+6, r24	; 0x06
 5fe:	08 95       	ret

00000600 <CalculatePwm>:
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
 604:	9c 01       	movw	r18, r24
 606:	0e 96       	adiw	r24, 0x0e	; 14
 608:	4d 97       	sbiw	r24, 0x1d	; 29
 60a:	d0 f5       	brcc	.+116    	; 0x680 <CalculatePwm+0x80>
 60c:	5b 9a       	sbi	0x0b, 3	; 11
 60e:	2b 9a       	sbi	0x05, 3	; 5
 610:	12 16       	cp	r1, r18
 612:	13 06       	cpc	r1, r19
 614:	cc f4       	brge	.+50     	; 0x648 <CalculatePwm+0x48>
 616:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <PWM_MAX>
 61a:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <PWM_MAX+0x1>
 61e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <PWM_MAX>
 622:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <PWM_MAX+0x1>
 626:	c2 97       	sbiw	r24, 0x32	; 50
 628:	b9 01       	movw	r22, r18
 62a:	0e 94 09 04 	call	0x812	; 0x812 <__divmodhi4>
 62e:	62 9f       	mul	r22, r18
 630:	c0 01       	movw	r24, r0
 632:	63 9f       	mul	r22, r19
 634:	90 0d       	add	r25, r0
 636:	72 9f       	mul	r23, r18
 638:	90 0d       	add	r25, r0
 63a:	11 24       	eor	r1, r1
 63c:	e8 1b       	sub	r30, r24
 63e:	f9 0b       	sbc	r31, r25
 640:	f0 93 7d 01 	sts	0x017D, r31	; 0x80017d <Motor_pwm+0x5>
 644:	e0 93 7c 01 	sts	0x017C, r30	; 0x80017c <Motor_pwm+0x4>
 648:	33 23       	and	r19, r19
 64a:	4c f5       	brge	.+82     	; 0x69e <CalculatePwm+0x9e>
 64c:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <PWM_MAX>
 650:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <PWM_MAX+0x1>
 654:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <PWM_MAX>
 658:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <PWM_MAX+0x1>
 65c:	c2 97       	sbiw	r24, 0x32	; 50
 65e:	b9 01       	movw	r22, r18
 660:	0e 94 09 04 	call	0x812	; 0x812 <__divmodhi4>
 664:	62 9f       	mul	r22, r18
 666:	c0 01       	movw	r24, r0
 668:	63 9f       	mul	r22, r19
 66a:	90 0d       	add	r25, r0
 66c:	72 9f       	mul	r23, r18
 66e:	90 0d       	add	r25, r0
 670:	11 24       	eor	r1, r1
 672:	e8 1b       	sub	r30, r24
 674:	f9 0b       	sbc	r31, r25
 676:	f0 93 7f 01 	sts	0x017F, r31	; 0x80017f <Motor_pwm+0x7>
 67a:	e0 93 7e 01 	sts	0x017E, r30	; 0x80017e <Motor_pwm+0x6>
 67e:	0f c0       	rjmp	.+30     	; 0x69e <CalculatePwm+0x9e>
 680:	e9 01       	movw	r28, r18
 682:	20 31       	cpi	r18, 0x10	; 16
 684:	31 05       	cpc	r19, r1
 686:	24 f0       	brlt	.+8      	; 0x690 <CalculatePwm+0x90>
 688:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <StopDrive>
 68c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <turn_left>
 690:	c1 3f       	cpi	r28, 0xF1	; 241
 692:	df 4f       	sbci	r29, 0xFF	; 255
 694:	24 f4       	brge	.+8      	; 0x69e <CalculatePwm+0x9e>
 696:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <StopDrive>
 69a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <turn_right>
 69e:	df 91       	pop	r29
 6a0:	cf 91       	pop	r28
 6a2:	08 95       	ret

000006a4 <motor_handler>:
 6a4:	8f ef       	ldi	r24, 0xFF	; 255
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <PWM_MAX+0x1>
 6ac:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <PWM_MAX>
 6b0:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <zone>
 6b4:	82 30       	cpi	r24, 0x02	; 2
 6b6:	99 f0       	breq	.+38     	; 0x6de <motor_handler+0x3a>
 6b8:	28 f4       	brcc	.+10     	; 0x6c4 <motor_handler+0x20>
 6ba:	88 23       	and	r24, r24
 6bc:	41 f0       	breq	.+16     	; 0x6ce <motor_handler+0x2a>
 6be:	81 30       	cpi	r24, 0x01	; 1
 6c0:	59 f0       	breq	.+22     	; 0x6d8 <motor_handler+0x34>
 6c2:	08 95       	ret
 6c4:	83 30       	cpi	r24, 0x03	; 3
 6c6:	89 f0       	breq	.+34     	; 0x6ea <motor_handler+0x46>
 6c8:	84 30       	cpi	r24, 0x04	; 4
 6ca:	b1 f0       	breq	.+44     	; 0x6f8 <motor_handler+0x54>
 6cc:	08 95       	ret
 6ce:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <StopDrive>
 6d2:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <stop_sort>
 6d6:	08 95       	ret
 6d8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <StopDrive>
 6dc:	08 95       	ret
 6de:	82 eb       	ldi	r24, 0xB2	; 178
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <PWM_MAX+0x1>
 6e6:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <PWM_MAX>
 6ea:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <error>
 6ee:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <error+0x1>
 6f2:	0e 94 00 03 	call	0x600	; 0x600 <CalculatePwm>
 6f6:	08 95       	ret
 6f8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <startup_sort>
 6fc:	08 95       	ret

000006fe <__vector_11>:
}



ISR(TIMER1_COMPA_vect)
{
 6fe:	1f 92       	push	r1
 700:	0f 92       	push	r0
 702:	0f b6       	in	r0, 0x3f	; 63
 704:	0f 92       	push	r0
 706:	11 24       	eor	r1, r1
 708:	2f 93       	push	r18
 70a:	3f 93       	push	r19
 70c:	4f 93       	push	r20
 70e:	5f 93       	push	r21
 710:	6f 93       	push	r22
 712:	7f 93       	push	r23
 714:	8f 93       	push	r24
 716:	9f 93       	push	r25
 718:	af 93       	push	r26
 71a:	bf 93       	push	r27
 71c:	ef 93       	push	r30
 71e:	ff 93       	push	r31
	counter_rampslow++;
 720:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <counter_rampslow>
 724:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <counter_rampslow+0x1>
 728:	01 96       	adiw	r24, 0x01	; 1
 72a:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <counter_rampslow+0x1>
 72e:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <counter_rampslow>
	
	if (zone!=1)
 732:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <zone>
 736:	81 30       	cpi	r24, 0x01	; 1
 738:	49 f0       	breq	.+18     	; 0x74c <__vector_11+0x4e>
	{
		counter_safety++;
 73a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
 73e:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <__data_end+0x1>
 742:	01 96       	adiw	r24, 0x01	; 1
 744:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <__data_end+0x1>
 748:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end>
	}
	
	Toggle(pd2);
 74c:	9b b1       	in	r25, 0x0b	; 11
 74e:	84 e0       	ldi	r24, 0x04	; 4
 750:	89 27       	eor	r24, r25
 752:	8b b9       	out	0x0b, r24	; 11
	
	if (counter_rampslow>rampslow_scale)
 754:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <counter_rampslow>
 758:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <counter_rampslow+0x1>
 75c:	85 36       	cpi	r24, 0x65	; 101
 75e:	91 05       	cpc	r25, r1
 760:	44 f0       	brlt	.+16     	; 0x772 <__vector_11+0x74>
	{
		change_pwm_slow();
 762:	0e 94 2f 02 	call	0x45e	; 0x45e <change_pwm_slow>
		change_pwm_fast();
 766:	0e 94 76 02 	call	0x4ec	; 0x4ec <change_pwm_fast>
		counter_rampslow=0;
 76a:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <counter_rampslow+0x1>
 76e:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <counter_rampslow>
	}
	

	if (counter_safety>safty_scale)
 772:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
 776:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <__data_end+0x1>
 77a:	81 39       	cpi	r24, 0x91	; 145
 77c:	91 40       	sbci	r25, 0x01	; 1
 77e:	24 f0       	brlt	.+8      	; 0x788 <__vector_11+0x8a>
	{
		Toggle(pd2);
 780:	9b b1       	in	r25, 0x0b	; 11
 782:	84 e0       	ldi	r24, 0x04	; 4
 784:	89 27       	eor	r24, r25
 786:	8b b9       	out	0x0b, r24	; 11
		
	}
	
}
 788:	ff 91       	pop	r31
 78a:	ef 91       	pop	r30
 78c:	bf 91       	pop	r27
 78e:	af 91       	pop	r26
 790:	9f 91       	pop	r25
 792:	8f 91       	pop	r24
 794:	7f 91       	pop	r23
 796:	6f 91       	pop	r22
 798:	5f 91       	pop	r21
 79a:	4f 91       	pop	r20
 79c:	3f 91       	pop	r19
 79e:	2f 91       	pop	r18
 7a0:	0f 90       	pop	r0
 7a2:	0f be       	out	0x3f, r0	; 63
 7a4:	0f 90       	pop	r0
 7a6:	1f 90       	pop	r1
 7a8:	18 95       	reti

000007aa <uart_putchar>:
		stdout = &uart_output;	//redirect standard output to uart
		stdin  = &uart_input;  //redirect standard input to uart
}
	

void uart_putchar(char c, FILE *stream) {
 7aa:	cf 93       	push	r28
 7ac:	c8 2f       	mov	r28, r24
	if (c == '\n') {
 7ae:	8a 30       	cpi	r24, 0x0A	; 10
 7b0:	19 f4       	brne	.+6      	; 0x7b8 <uart_putchar+0xe>
		uart_putchar('\r', stream);
 7b2:	8d e0       	ldi	r24, 0x0D	; 13
 7b4:	0e 94 d5 03 	call	0x7aa	; 0x7aa <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
 7b8:	e0 ec       	ldi	r30, 0xC0	; 192
 7ba:	f0 e0       	ldi	r31, 0x00	; 0
 7bc:	80 81       	ld	r24, Z
 7be:	85 ff       	sbrs	r24, 5
 7c0:	fd cf       	rjmp	.-6      	; 0x7bc <uart_putchar+0x12>
	UDR0 = c;
 7c2:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 7c6:	cf 91       	pop	r28
 7c8:	08 95       	ret

000007ca <uart_getchar>:

char uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0);
 7ca:	e0 ec       	ldi	r30, 0xC0	; 192
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	80 81       	ld	r24, Z
 7d0:	88 23       	and	r24, r24
 7d2:	ec f7       	brge	.-6      	; 0x7ce <uart_getchar+0x4>
	return UDR0;
 7d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 7d8:	08 95       	ret

000007da <uart_init>:
FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);


void uart_init(void) {
	
	UBRR0H = UBRRH_VALUE;
 7da:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 7de:	87 e6       	ldi	r24, 0x67	; 103
 7e0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
 7e4:	e0 ec       	ldi	r30, 0xC0	; 192
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	80 81       	ld	r24, Z
 7ea:	8d 7f       	andi	r24, 0xFD	; 253
 7ec:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
 7ee:	86 e0       	ldi	r24, 0x06	; 6
 7f0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
 7f4:	88 e1       	ldi	r24, 0x18	; 24
 7f6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 7fa:	08 95       	ret

000007fc <io_redirect>:
}

void io_redirect(void ){
		
		
		stdout = &uart_output;	//redirect standard output to uart
 7fc:	e2 e8       	ldi	r30, 0x82	; 130
 7fe:	f1 e0       	ldi	r31, 0x01	; 1
 800:	8e e0       	ldi	r24, 0x0E	; 14
 802:	91 e0       	ldi	r25, 0x01	; 1
 804:	93 83       	std	Z+3, r25	; 0x03
 806:	82 83       	std	Z+2, r24	; 0x02
		stdin  = &uart_input;  //redirect standard input to uart
 808:	80 e0       	ldi	r24, 0x00	; 0
 80a:	91 e0       	ldi	r25, 0x01	; 1
 80c:	91 83       	std	Z+1, r25	; 0x01
 80e:	80 83       	st	Z, r24
 810:	08 95       	ret

00000812 <__divmodhi4>:
 812:	97 fb       	bst	r25, 7
 814:	07 2e       	mov	r0, r23
 816:	16 f4       	brtc	.+4      	; 0x81c <__divmodhi4+0xa>
 818:	00 94       	com	r0
 81a:	07 d0       	rcall	.+14     	; 0x82a <__divmodhi4_neg1>
 81c:	77 fd       	sbrc	r23, 7
 81e:	09 d0       	rcall	.+18     	; 0x832 <__divmodhi4_neg2>
 820:	0e 94 1d 04 	call	0x83a	; 0x83a <__udivmodhi4>
 824:	07 fc       	sbrc	r0, 7
 826:	05 d0       	rcall	.+10     	; 0x832 <__divmodhi4_neg2>
 828:	3e f4       	brtc	.+14     	; 0x838 <__divmodhi4_exit>

0000082a <__divmodhi4_neg1>:
 82a:	90 95       	com	r25
 82c:	81 95       	neg	r24
 82e:	9f 4f       	sbci	r25, 0xFF	; 255
 830:	08 95       	ret

00000832 <__divmodhi4_neg2>:
 832:	70 95       	com	r23
 834:	61 95       	neg	r22
 836:	7f 4f       	sbci	r23, 0xFF	; 255

00000838 <__divmodhi4_exit>:
 838:	08 95       	ret

0000083a <__udivmodhi4>:
 83a:	aa 1b       	sub	r26, r26
 83c:	bb 1b       	sub	r27, r27
 83e:	51 e1       	ldi	r21, 0x11	; 17
 840:	07 c0       	rjmp	.+14     	; 0x850 <__udivmodhi4_ep>

00000842 <__udivmodhi4_loop>:
 842:	aa 1f       	adc	r26, r26
 844:	bb 1f       	adc	r27, r27
 846:	a6 17       	cp	r26, r22
 848:	b7 07       	cpc	r27, r23
 84a:	10 f0       	brcs	.+4      	; 0x850 <__udivmodhi4_ep>
 84c:	a6 1b       	sub	r26, r22
 84e:	b7 0b       	sbc	r27, r23

00000850 <__udivmodhi4_ep>:
 850:	88 1f       	adc	r24, r24
 852:	99 1f       	adc	r25, r25
 854:	5a 95       	dec	r21
 856:	a9 f7       	brne	.-22     	; 0x842 <__udivmodhi4_loop>
 858:	80 95       	com	r24
 85a:	90 95       	com	r25
 85c:	bc 01       	movw	r22, r24
 85e:	cd 01       	movw	r24, r26
 860:	08 95       	ret

00000862 <printf>:
 862:	a0 e0       	ldi	r26, 0x00	; 0
 864:	b0 e0       	ldi	r27, 0x00	; 0
 866:	e7 e3       	ldi	r30, 0x37	; 55
 868:	f4 e0       	ldi	r31, 0x04	; 4
 86a:	0c 94 18 07 	jmp	0xe30	; 0xe30 <__prologue_saves__+0x20>
 86e:	ae 01       	movw	r20, r28
 870:	4b 5f       	subi	r20, 0xFB	; 251
 872:	5f 4f       	sbci	r21, 0xFF	; 255
 874:	fa 01       	movw	r30, r20
 876:	61 91       	ld	r22, Z+
 878:	71 91       	ld	r23, Z+
 87a:	af 01       	movw	r20, r30
 87c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__iob+0x2>
 880:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <__iob+0x3>
 884:	0e 94 77 04 	call	0x8ee	; 0x8ee <vfprintf>
 888:	e2 e0       	ldi	r30, 0x02	; 2
 88a:	0c 94 34 07 	jmp	0xe68	; 0xe68 <__epilogue_restores__+0x20>

0000088e <puts>:
 88e:	0f 93       	push	r16
 890:	1f 93       	push	r17
 892:	cf 93       	push	r28
 894:	df 93       	push	r29
 896:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <__iob+0x2>
 89a:	f0 91 85 01 	lds	r31, 0x0185	; 0x800185 <__iob+0x3>
 89e:	23 81       	ldd	r18, Z+3	; 0x03
 8a0:	21 ff       	sbrs	r18, 1
 8a2:	1b c0       	rjmp	.+54     	; 0x8da <puts+0x4c>
 8a4:	8c 01       	movw	r16, r24
 8a6:	d0 e0       	ldi	r29, 0x00	; 0
 8a8:	c0 e0       	ldi	r28, 0x00	; 0
 8aa:	f8 01       	movw	r30, r16
 8ac:	81 91       	ld	r24, Z+
 8ae:	8f 01       	movw	r16, r30
 8b0:	60 91 84 01 	lds	r22, 0x0184	; 0x800184 <__iob+0x2>
 8b4:	70 91 85 01 	lds	r23, 0x0185	; 0x800185 <__iob+0x3>
 8b8:	db 01       	movw	r26, r22
 8ba:	18 96       	adiw	r26, 0x08	; 8
 8bc:	ed 91       	ld	r30, X+
 8be:	fc 91       	ld	r31, X
 8c0:	19 97       	sbiw	r26, 0x09	; 9
 8c2:	88 23       	and	r24, r24
 8c4:	31 f0       	breq	.+12     	; 0x8d2 <puts+0x44>
 8c6:	09 95       	icall
 8c8:	89 2b       	or	r24, r25
 8ca:	79 f3       	breq	.-34     	; 0x8aa <puts+0x1c>
 8cc:	df ef       	ldi	r29, 0xFF	; 255
 8ce:	cf ef       	ldi	r28, 0xFF	; 255
 8d0:	ec cf       	rjmp	.-40     	; 0x8aa <puts+0x1c>
 8d2:	8a e0       	ldi	r24, 0x0A	; 10
 8d4:	09 95       	icall
 8d6:	89 2b       	or	r24, r25
 8d8:	19 f0       	breq	.+6      	; 0x8e0 <puts+0x52>
 8da:	8f ef       	ldi	r24, 0xFF	; 255
 8dc:	9f ef       	ldi	r25, 0xFF	; 255
 8de:	02 c0       	rjmp	.+4      	; 0x8e4 <puts+0x56>
 8e0:	8d 2f       	mov	r24, r29
 8e2:	9c 2f       	mov	r25, r28
 8e4:	df 91       	pop	r29
 8e6:	cf 91       	pop	r28
 8e8:	1f 91       	pop	r17
 8ea:	0f 91       	pop	r16
 8ec:	08 95       	ret

000008ee <vfprintf>:
 8ee:	ab e0       	ldi	r26, 0x0B	; 11
 8f0:	b0 e0       	ldi	r27, 0x00	; 0
 8f2:	ed e7       	ldi	r30, 0x7D	; 125
 8f4:	f4 e0       	ldi	r31, 0x04	; 4
 8f6:	0c 94 08 07 	jmp	0xe10	; 0xe10 <__prologue_saves__>
 8fa:	6c 01       	movw	r12, r24
 8fc:	7b 01       	movw	r14, r22
 8fe:	8a 01       	movw	r16, r20
 900:	fc 01       	movw	r30, r24
 902:	17 82       	std	Z+7, r1	; 0x07
 904:	16 82       	std	Z+6, r1	; 0x06
 906:	83 81       	ldd	r24, Z+3	; 0x03
 908:	81 ff       	sbrs	r24, 1
 90a:	cc c1       	rjmp	.+920    	; 0xca4 <__stack+0x3a5>
 90c:	ce 01       	movw	r24, r28
 90e:	01 96       	adiw	r24, 0x01	; 1
 910:	3c 01       	movw	r6, r24
 912:	f6 01       	movw	r30, r12
 914:	93 81       	ldd	r25, Z+3	; 0x03
 916:	f7 01       	movw	r30, r14
 918:	93 fd       	sbrc	r25, 3
 91a:	85 91       	lpm	r24, Z+
 91c:	93 ff       	sbrs	r25, 3
 91e:	81 91       	ld	r24, Z+
 920:	7f 01       	movw	r14, r30
 922:	88 23       	and	r24, r24
 924:	09 f4       	brne	.+2      	; 0x928 <__stack+0x29>
 926:	ba c1       	rjmp	.+884    	; 0xc9c <__stack+0x39d>
 928:	85 32       	cpi	r24, 0x25	; 37
 92a:	39 f4       	brne	.+14     	; 0x93a <__stack+0x3b>
 92c:	93 fd       	sbrc	r25, 3
 92e:	85 91       	lpm	r24, Z+
 930:	93 ff       	sbrs	r25, 3
 932:	81 91       	ld	r24, Z+
 934:	7f 01       	movw	r14, r30
 936:	85 32       	cpi	r24, 0x25	; 37
 938:	29 f4       	brne	.+10     	; 0x944 <__stack+0x45>
 93a:	b6 01       	movw	r22, r12
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <fputc>
 942:	e7 cf       	rjmp	.-50     	; 0x912 <__stack+0x13>
 944:	91 2c       	mov	r9, r1
 946:	21 2c       	mov	r2, r1
 948:	31 2c       	mov	r3, r1
 94a:	ff e1       	ldi	r31, 0x1F	; 31
 94c:	f3 15       	cp	r31, r3
 94e:	d8 f0       	brcs	.+54     	; 0x986 <__stack+0x87>
 950:	8b 32       	cpi	r24, 0x2B	; 43
 952:	79 f0       	breq	.+30     	; 0x972 <__stack+0x73>
 954:	38 f4       	brcc	.+14     	; 0x964 <__stack+0x65>
 956:	80 32       	cpi	r24, 0x20	; 32
 958:	79 f0       	breq	.+30     	; 0x978 <__stack+0x79>
 95a:	83 32       	cpi	r24, 0x23	; 35
 95c:	a1 f4       	brne	.+40     	; 0x986 <__stack+0x87>
 95e:	23 2d       	mov	r18, r3
 960:	20 61       	ori	r18, 0x10	; 16
 962:	1d c0       	rjmp	.+58     	; 0x99e <__stack+0x9f>
 964:	8d 32       	cpi	r24, 0x2D	; 45
 966:	61 f0       	breq	.+24     	; 0x980 <__stack+0x81>
 968:	80 33       	cpi	r24, 0x30	; 48
 96a:	69 f4       	brne	.+26     	; 0x986 <__stack+0x87>
 96c:	23 2d       	mov	r18, r3
 96e:	21 60       	ori	r18, 0x01	; 1
 970:	16 c0       	rjmp	.+44     	; 0x99e <__stack+0x9f>
 972:	83 2d       	mov	r24, r3
 974:	82 60       	ori	r24, 0x02	; 2
 976:	38 2e       	mov	r3, r24
 978:	e3 2d       	mov	r30, r3
 97a:	e4 60       	ori	r30, 0x04	; 4
 97c:	3e 2e       	mov	r3, r30
 97e:	2a c0       	rjmp	.+84     	; 0x9d4 <__stack+0xd5>
 980:	f3 2d       	mov	r31, r3
 982:	f8 60       	ori	r31, 0x08	; 8
 984:	1d c0       	rjmp	.+58     	; 0x9c0 <__stack+0xc1>
 986:	37 fc       	sbrc	r3, 7
 988:	2d c0       	rjmp	.+90     	; 0x9e4 <__stack+0xe5>
 98a:	20 ed       	ldi	r18, 0xD0	; 208
 98c:	28 0f       	add	r18, r24
 98e:	2a 30       	cpi	r18, 0x0A	; 10
 990:	40 f0       	brcs	.+16     	; 0x9a2 <__stack+0xa3>
 992:	8e 32       	cpi	r24, 0x2E	; 46
 994:	b9 f4       	brne	.+46     	; 0x9c4 <__stack+0xc5>
 996:	36 fc       	sbrc	r3, 6
 998:	81 c1       	rjmp	.+770    	; 0xc9c <__stack+0x39d>
 99a:	23 2d       	mov	r18, r3
 99c:	20 64       	ori	r18, 0x40	; 64
 99e:	32 2e       	mov	r3, r18
 9a0:	19 c0       	rjmp	.+50     	; 0x9d4 <__stack+0xd5>
 9a2:	36 fe       	sbrs	r3, 6
 9a4:	06 c0       	rjmp	.+12     	; 0x9b2 <__stack+0xb3>
 9a6:	8a e0       	ldi	r24, 0x0A	; 10
 9a8:	98 9e       	mul	r9, r24
 9aa:	20 0d       	add	r18, r0
 9ac:	11 24       	eor	r1, r1
 9ae:	92 2e       	mov	r9, r18
 9b0:	11 c0       	rjmp	.+34     	; 0x9d4 <__stack+0xd5>
 9b2:	ea e0       	ldi	r30, 0x0A	; 10
 9b4:	2e 9e       	mul	r2, r30
 9b6:	20 0d       	add	r18, r0
 9b8:	11 24       	eor	r1, r1
 9ba:	22 2e       	mov	r2, r18
 9bc:	f3 2d       	mov	r31, r3
 9be:	f0 62       	ori	r31, 0x20	; 32
 9c0:	3f 2e       	mov	r3, r31
 9c2:	08 c0       	rjmp	.+16     	; 0x9d4 <__stack+0xd5>
 9c4:	8c 36       	cpi	r24, 0x6C	; 108
 9c6:	21 f4       	brne	.+8      	; 0x9d0 <__stack+0xd1>
 9c8:	83 2d       	mov	r24, r3
 9ca:	80 68       	ori	r24, 0x80	; 128
 9cc:	38 2e       	mov	r3, r24
 9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <__stack+0xd5>
 9d0:	88 36       	cpi	r24, 0x68	; 104
 9d2:	41 f4       	brne	.+16     	; 0x9e4 <__stack+0xe5>
 9d4:	f7 01       	movw	r30, r14
 9d6:	93 fd       	sbrc	r25, 3
 9d8:	85 91       	lpm	r24, Z+
 9da:	93 ff       	sbrs	r25, 3
 9dc:	81 91       	ld	r24, Z+
 9de:	7f 01       	movw	r14, r30
 9e0:	81 11       	cpse	r24, r1
 9e2:	b3 cf       	rjmp	.-154    	; 0x94a <__stack+0x4b>
 9e4:	98 2f       	mov	r25, r24
 9e6:	9f 7d       	andi	r25, 0xDF	; 223
 9e8:	95 54       	subi	r25, 0x45	; 69
 9ea:	93 30       	cpi	r25, 0x03	; 3
 9ec:	28 f4       	brcc	.+10     	; 0x9f8 <__stack+0xf9>
 9ee:	0c 5f       	subi	r16, 0xFC	; 252
 9f0:	1f 4f       	sbci	r17, 0xFF	; 255
 9f2:	9f e3       	ldi	r25, 0x3F	; 63
 9f4:	99 83       	std	Y+1, r25	; 0x01
 9f6:	0d c0       	rjmp	.+26     	; 0xa12 <__stack+0x113>
 9f8:	83 36       	cpi	r24, 0x63	; 99
 9fa:	31 f0       	breq	.+12     	; 0xa08 <__stack+0x109>
 9fc:	83 37       	cpi	r24, 0x73	; 115
 9fe:	71 f0       	breq	.+28     	; 0xa1c <__stack+0x11d>
 a00:	83 35       	cpi	r24, 0x53	; 83
 a02:	09 f0       	breq	.+2      	; 0xa06 <__stack+0x107>
 a04:	59 c0       	rjmp	.+178    	; 0xab8 <__stack+0x1b9>
 a06:	21 c0       	rjmp	.+66     	; 0xa4a <__stack+0x14b>
 a08:	f8 01       	movw	r30, r16
 a0a:	80 81       	ld	r24, Z
 a0c:	89 83       	std	Y+1, r24	; 0x01
 a0e:	0e 5f       	subi	r16, 0xFE	; 254
 a10:	1f 4f       	sbci	r17, 0xFF	; 255
 a12:	88 24       	eor	r8, r8
 a14:	83 94       	inc	r8
 a16:	91 2c       	mov	r9, r1
 a18:	53 01       	movw	r10, r6
 a1a:	13 c0       	rjmp	.+38     	; 0xa42 <__stack+0x143>
 a1c:	28 01       	movw	r4, r16
 a1e:	f2 e0       	ldi	r31, 0x02	; 2
 a20:	4f 0e       	add	r4, r31
 a22:	51 1c       	adc	r5, r1
 a24:	f8 01       	movw	r30, r16
 a26:	a0 80       	ld	r10, Z
 a28:	b1 80       	ldd	r11, Z+1	; 0x01
 a2a:	36 fe       	sbrs	r3, 6
 a2c:	03 c0       	rjmp	.+6      	; 0xa34 <__stack+0x135>
 a2e:	69 2d       	mov	r22, r9
 a30:	70 e0       	ldi	r23, 0x00	; 0
 a32:	02 c0       	rjmp	.+4      	; 0xa38 <__stack+0x139>
 a34:	6f ef       	ldi	r22, 0xFF	; 255
 a36:	7f ef       	ldi	r23, 0xFF	; 255
 a38:	c5 01       	movw	r24, r10
 a3a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <strnlen>
 a3e:	4c 01       	movw	r8, r24
 a40:	82 01       	movw	r16, r4
 a42:	f3 2d       	mov	r31, r3
 a44:	ff 77       	andi	r31, 0x7F	; 127
 a46:	3f 2e       	mov	r3, r31
 a48:	16 c0       	rjmp	.+44     	; 0xa76 <__stack+0x177>
 a4a:	28 01       	movw	r4, r16
 a4c:	22 e0       	ldi	r18, 0x02	; 2
 a4e:	42 0e       	add	r4, r18
 a50:	51 1c       	adc	r5, r1
 a52:	f8 01       	movw	r30, r16
 a54:	a0 80       	ld	r10, Z
 a56:	b1 80       	ldd	r11, Z+1	; 0x01
 a58:	36 fe       	sbrs	r3, 6
 a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__stack+0x163>
 a5c:	69 2d       	mov	r22, r9
 a5e:	70 e0       	ldi	r23, 0x00	; 0
 a60:	02 c0       	rjmp	.+4      	; 0xa66 <__stack+0x167>
 a62:	6f ef       	ldi	r22, 0xFF	; 255
 a64:	7f ef       	ldi	r23, 0xFF	; 255
 a66:	c5 01       	movw	r24, r10
 a68:	0e 94 58 06 	call	0xcb0	; 0xcb0 <strnlen_P>
 a6c:	4c 01       	movw	r8, r24
 a6e:	f3 2d       	mov	r31, r3
 a70:	f0 68       	ori	r31, 0x80	; 128
 a72:	3f 2e       	mov	r3, r31
 a74:	82 01       	movw	r16, r4
 a76:	33 fc       	sbrc	r3, 3
 a78:	1b c0       	rjmp	.+54     	; 0xab0 <__stack+0x1b1>
 a7a:	82 2d       	mov	r24, r2
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	88 16       	cp	r8, r24
 a80:	99 06       	cpc	r9, r25
 a82:	b0 f4       	brcc	.+44     	; 0xab0 <__stack+0x1b1>
 a84:	b6 01       	movw	r22, r12
 a86:	80 e2       	ldi	r24, 0x20	; 32
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <fputc>
 a8e:	2a 94       	dec	r2
 a90:	f4 cf       	rjmp	.-24     	; 0xa7a <__stack+0x17b>
 a92:	f5 01       	movw	r30, r10
 a94:	37 fc       	sbrc	r3, 7
 a96:	85 91       	lpm	r24, Z+
 a98:	37 fe       	sbrs	r3, 7
 a9a:	81 91       	ld	r24, Z+
 a9c:	5f 01       	movw	r10, r30
 a9e:	b6 01       	movw	r22, r12
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	0e 94 6e 06 	call	0xcdc	; 0xcdc <fputc>
 aa6:	21 10       	cpse	r2, r1
 aa8:	2a 94       	dec	r2
 aaa:	21 e0       	ldi	r18, 0x01	; 1
 aac:	82 1a       	sub	r8, r18
 aae:	91 08       	sbc	r9, r1
 ab0:	81 14       	cp	r8, r1
 ab2:	91 04       	cpc	r9, r1
 ab4:	71 f7       	brne	.-36     	; 0xa92 <__stack+0x193>
 ab6:	e8 c0       	rjmp	.+464    	; 0xc88 <__stack+0x389>
 ab8:	84 36       	cpi	r24, 0x64	; 100
 aba:	11 f0       	breq	.+4      	; 0xac0 <__stack+0x1c1>
 abc:	89 36       	cpi	r24, 0x69	; 105
 abe:	41 f5       	brne	.+80     	; 0xb10 <__stack+0x211>
 ac0:	f8 01       	movw	r30, r16
 ac2:	37 fe       	sbrs	r3, 7
 ac4:	07 c0       	rjmp	.+14     	; 0xad4 <__stack+0x1d5>
 ac6:	60 81       	ld	r22, Z
 ac8:	71 81       	ldd	r23, Z+1	; 0x01
 aca:	82 81       	ldd	r24, Z+2	; 0x02
 acc:	93 81       	ldd	r25, Z+3	; 0x03
 ace:	0c 5f       	subi	r16, 0xFC	; 252
 ad0:	1f 4f       	sbci	r17, 0xFF	; 255
 ad2:	08 c0       	rjmp	.+16     	; 0xae4 <__stack+0x1e5>
 ad4:	60 81       	ld	r22, Z
 ad6:	71 81       	ldd	r23, Z+1	; 0x01
 ad8:	07 2e       	mov	r0, r23
 ada:	00 0c       	add	r0, r0
 adc:	88 0b       	sbc	r24, r24
 ade:	99 0b       	sbc	r25, r25
 ae0:	0e 5f       	subi	r16, 0xFE	; 254
 ae2:	1f 4f       	sbci	r17, 0xFF	; 255
 ae4:	f3 2d       	mov	r31, r3
 ae6:	ff 76       	andi	r31, 0x6F	; 111
 ae8:	3f 2e       	mov	r3, r31
 aea:	97 ff       	sbrs	r25, 7
 aec:	09 c0       	rjmp	.+18     	; 0xb00 <__stack+0x201>
 aee:	90 95       	com	r25
 af0:	80 95       	com	r24
 af2:	70 95       	com	r23
 af4:	61 95       	neg	r22
 af6:	7f 4f       	sbci	r23, 0xFF	; 255
 af8:	8f 4f       	sbci	r24, 0xFF	; 255
 afa:	9f 4f       	sbci	r25, 0xFF	; 255
 afc:	f0 68       	ori	r31, 0x80	; 128
 afe:	3f 2e       	mov	r3, r31
 b00:	2a e0       	ldi	r18, 0x0A	; 10
 b02:	30 e0       	ldi	r19, 0x00	; 0
 b04:	a3 01       	movw	r20, r6
 b06:	0e 94 aa 06 	call	0xd54	; 0xd54 <__ultoa_invert>
 b0a:	88 2e       	mov	r8, r24
 b0c:	86 18       	sub	r8, r6
 b0e:	45 c0       	rjmp	.+138    	; 0xb9a <__stack+0x29b>
 b10:	85 37       	cpi	r24, 0x75	; 117
 b12:	31 f4       	brne	.+12     	; 0xb20 <__stack+0x221>
 b14:	23 2d       	mov	r18, r3
 b16:	2f 7e       	andi	r18, 0xEF	; 239
 b18:	b2 2e       	mov	r11, r18
 b1a:	2a e0       	ldi	r18, 0x0A	; 10
 b1c:	30 e0       	ldi	r19, 0x00	; 0
 b1e:	25 c0       	rjmp	.+74     	; 0xb6a <__stack+0x26b>
 b20:	93 2d       	mov	r25, r3
 b22:	99 7f       	andi	r25, 0xF9	; 249
 b24:	b9 2e       	mov	r11, r25
 b26:	8f 36       	cpi	r24, 0x6F	; 111
 b28:	c1 f0       	breq	.+48     	; 0xb5a <__stack+0x25b>
 b2a:	18 f4       	brcc	.+6      	; 0xb32 <__stack+0x233>
 b2c:	88 35       	cpi	r24, 0x58	; 88
 b2e:	79 f0       	breq	.+30     	; 0xb4e <__stack+0x24f>
 b30:	b5 c0       	rjmp	.+362    	; 0xc9c <__stack+0x39d>
 b32:	80 37       	cpi	r24, 0x70	; 112
 b34:	19 f0       	breq	.+6      	; 0xb3c <__stack+0x23d>
 b36:	88 37       	cpi	r24, 0x78	; 120
 b38:	21 f0       	breq	.+8      	; 0xb42 <__stack+0x243>
 b3a:	b0 c0       	rjmp	.+352    	; 0xc9c <__stack+0x39d>
 b3c:	e9 2f       	mov	r30, r25
 b3e:	e0 61       	ori	r30, 0x10	; 16
 b40:	be 2e       	mov	r11, r30
 b42:	b4 fe       	sbrs	r11, 4
 b44:	0d c0       	rjmp	.+26     	; 0xb60 <__stack+0x261>
 b46:	fb 2d       	mov	r31, r11
 b48:	f4 60       	ori	r31, 0x04	; 4
 b4a:	bf 2e       	mov	r11, r31
 b4c:	09 c0       	rjmp	.+18     	; 0xb60 <__stack+0x261>
 b4e:	34 fe       	sbrs	r3, 4
 b50:	0a c0       	rjmp	.+20     	; 0xb66 <__stack+0x267>
 b52:	29 2f       	mov	r18, r25
 b54:	26 60       	ori	r18, 0x06	; 6
 b56:	b2 2e       	mov	r11, r18
 b58:	06 c0       	rjmp	.+12     	; 0xb66 <__stack+0x267>
 b5a:	28 e0       	ldi	r18, 0x08	; 8
 b5c:	30 e0       	ldi	r19, 0x00	; 0
 b5e:	05 c0       	rjmp	.+10     	; 0xb6a <__stack+0x26b>
 b60:	20 e1       	ldi	r18, 0x10	; 16
 b62:	30 e0       	ldi	r19, 0x00	; 0
 b64:	02 c0       	rjmp	.+4      	; 0xb6a <__stack+0x26b>
 b66:	20 e1       	ldi	r18, 0x10	; 16
 b68:	32 e0       	ldi	r19, 0x02	; 2
 b6a:	f8 01       	movw	r30, r16
 b6c:	b7 fe       	sbrs	r11, 7
 b6e:	07 c0       	rjmp	.+14     	; 0xb7e <__stack+0x27f>
 b70:	60 81       	ld	r22, Z
 b72:	71 81       	ldd	r23, Z+1	; 0x01
 b74:	82 81       	ldd	r24, Z+2	; 0x02
 b76:	93 81       	ldd	r25, Z+3	; 0x03
 b78:	0c 5f       	subi	r16, 0xFC	; 252
 b7a:	1f 4f       	sbci	r17, 0xFF	; 255
 b7c:	06 c0       	rjmp	.+12     	; 0xb8a <__stack+0x28b>
 b7e:	60 81       	ld	r22, Z
 b80:	71 81       	ldd	r23, Z+1	; 0x01
 b82:	80 e0       	ldi	r24, 0x00	; 0
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	0e 5f       	subi	r16, 0xFE	; 254
 b88:	1f 4f       	sbci	r17, 0xFF	; 255
 b8a:	a3 01       	movw	r20, r6
 b8c:	0e 94 aa 06 	call	0xd54	; 0xd54 <__ultoa_invert>
 b90:	88 2e       	mov	r8, r24
 b92:	86 18       	sub	r8, r6
 b94:	fb 2d       	mov	r31, r11
 b96:	ff 77       	andi	r31, 0x7F	; 127
 b98:	3f 2e       	mov	r3, r31
 b9a:	36 fe       	sbrs	r3, 6
 b9c:	0d c0       	rjmp	.+26     	; 0xbb8 <__stack+0x2b9>
 b9e:	23 2d       	mov	r18, r3
 ba0:	2e 7f       	andi	r18, 0xFE	; 254
 ba2:	a2 2e       	mov	r10, r18
 ba4:	89 14       	cp	r8, r9
 ba6:	58 f4       	brcc	.+22     	; 0xbbe <__stack+0x2bf>
 ba8:	34 fe       	sbrs	r3, 4
 baa:	0b c0       	rjmp	.+22     	; 0xbc2 <__stack+0x2c3>
 bac:	32 fc       	sbrc	r3, 2
 bae:	09 c0       	rjmp	.+18     	; 0xbc2 <__stack+0x2c3>
 bb0:	83 2d       	mov	r24, r3
 bb2:	8e 7e       	andi	r24, 0xEE	; 238
 bb4:	a8 2e       	mov	r10, r24
 bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <__stack+0x2c3>
 bb8:	b8 2c       	mov	r11, r8
 bba:	a3 2c       	mov	r10, r3
 bbc:	03 c0       	rjmp	.+6      	; 0xbc4 <__stack+0x2c5>
 bbe:	b8 2c       	mov	r11, r8
 bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <__stack+0x2c5>
 bc2:	b9 2c       	mov	r11, r9
 bc4:	a4 fe       	sbrs	r10, 4
 bc6:	0f c0       	rjmp	.+30     	; 0xbe6 <__stack+0x2e7>
 bc8:	fe 01       	movw	r30, r28
 bca:	e8 0d       	add	r30, r8
 bcc:	f1 1d       	adc	r31, r1
 bce:	80 81       	ld	r24, Z
 bd0:	80 33       	cpi	r24, 0x30	; 48
 bd2:	21 f4       	brne	.+8      	; 0xbdc <__stack+0x2dd>
 bd4:	9a 2d       	mov	r25, r10
 bd6:	99 7e       	andi	r25, 0xE9	; 233
 bd8:	a9 2e       	mov	r10, r25
 bda:	09 c0       	rjmp	.+18     	; 0xbee <__stack+0x2ef>
 bdc:	a2 fe       	sbrs	r10, 2
 bde:	06 c0       	rjmp	.+12     	; 0xbec <__stack+0x2ed>
 be0:	b3 94       	inc	r11
 be2:	b3 94       	inc	r11
 be4:	04 c0       	rjmp	.+8      	; 0xbee <__stack+0x2ef>
 be6:	8a 2d       	mov	r24, r10
 be8:	86 78       	andi	r24, 0x86	; 134
 bea:	09 f0       	breq	.+2      	; 0xbee <__stack+0x2ef>
 bec:	b3 94       	inc	r11
 bee:	a3 fc       	sbrc	r10, 3
 bf0:	11 c0       	rjmp	.+34     	; 0xc14 <__stack+0x315>
 bf2:	a0 fe       	sbrs	r10, 0
 bf4:	06 c0       	rjmp	.+12     	; 0xc02 <__stack+0x303>
 bf6:	b2 14       	cp	r11, r2
 bf8:	88 f4       	brcc	.+34     	; 0xc1c <__stack+0x31d>
 bfa:	28 0c       	add	r2, r8
 bfc:	92 2c       	mov	r9, r2
 bfe:	9b 18       	sub	r9, r11
 c00:	0e c0       	rjmp	.+28     	; 0xc1e <__stack+0x31f>
 c02:	b2 14       	cp	r11, r2
 c04:	60 f4       	brcc	.+24     	; 0xc1e <__stack+0x31f>
 c06:	b6 01       	movw	r22, r12
 c08:	80 e2       	ldi	r24, 0x20	; 32
 c0a:	90 e0       	ldi	r25, 0x00	; 0
 c0c:	0e 94 6e 06 	call	0xcdc	; 0xcdc <fputc>
 c10:	b3 94       	inc	r11
 c12:	f7 cf       	rjmp	.-18     	; 0xc02 <__stack+0x303>
 c14:	b2 14       	cp	r11, r2
 c16:	18 f4       	brcc	.+6      	; 0xc1e <__stack+0x31f>
 c18:	2b 18       	sub	r2, r11
 c1a:	02 c0       	rjmp	.+4      	; 0xc20 <__stack+0x321>
 c1c:	98 2c       	mov	r9, r8
 c1e:	21 2c       	mov	r2, r1
 c20:	a4 fe       	sbrs	r10, 4
 c22:	10 c0       	rjmp	.+32     	; 0xc44 <__stack+0x345>
 c24:	b6 01       	movw	r22, r12
 c26:	80 e3       	ldi	r24, 0x30	; 48
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <fputc>
 c2e:	a2 fe       	sbrs	r10, 2
 c30:	17 c0       	rjmp	.+46     	; 0xc60 <__stack+0x361>
 c32:	a1 fc       	sbrc	r10, 1
 c34:	03 c0       	rjmp	.+6      	; 0xc3c <__stack+0x33d>
 c36:	88 e7       	ldi	r24, 0x78	; 120
 c38:	90 e0       	ldi	r25, 0x00	; 0
 c3a:	02 c0       	rjmp	.+4      	; 0xc40 <__stack+0x341>
 c3c:	88 e5       	ldi	r24, 0x58	; 88
 c3e:	90 e0       	ldi	r25, 0x00	; 0
 c40:	b6 01       	movw	r22, r12
 c42:	0c c0       	rjmp	.+24     	; 0xc5c <__stack+0x35d>
 c44:	8a 2d       	mov	r24, r10
 c46:	86 78       	andi	r24, 0x86	; 134
 c48:	59 f0       	breq	.+22     	; 0xc60 <__stack+0x361>
 c4a:	a1 fe       	sbrs	r10, 1
 c4c:	02 c0       	rjmp	.+4      	; 0xc52 <__stack+0x353>
 c4e:	8b e2       	ldi	r24, 0x2B	; 43
 c50:	01 c0       	rjmp	.+2      	; 0xc54 <__stack+0x355>
 c52:	80 e2       	ldi	r24, 0x20	; 32
 c54:	a7 fc       	sbrc	r10, 7
 c56:	8d e2       	ldi	r24, 0x2D	; 45
 c58:	b6 01       	movw	r22, r12
 c5a:	90 e0       	ldi	r25, 0x00	; 0
 c5c:	0e 94 6e 06 	call	0xcdc	; 0xcdc <fputc>
 c60:	89 14       	cp	r8, r9
 c62:	38 f4       	brcc	.+14     	; 0xc72 <__stack+0x373>
 c64:	b6 01       	movw	r22, r12
 c66:	80 e3       	ldi	r24, 0x30	; 48
 c68:	90 e0       	ldi	r25, 0x00	; 0
 c6a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <fputc>
 c6e:	9a 94       	dec	r9
 c70:	f7 cf       	rjmp	.-18     	; 0xc60 <__stack+0x361>
 c72:	8a 94       	dec	r8
 c74:	f3 01       	movw	r30, r6
 c76:	e8 0d       	add	r30, r8
 c78:	f1 1d       	adc	r31, r1
 c7a:	80 81       	ld	r24, Z
 c7c:	b6 01       	movw	r22, r12
 c7e:	90 e0       	ldi	r25, 0x00	; 0
 c80:	0e 94 6e 06 	call	0xcdc	; 0xcdc <fputc>
 c84:	81 10       	cpse	r8, r1
 c86:	f5 cf       	rjmp	.-22     	; 0xc72 <__stack+0x373>
 c88:	22 20       	and	r2, r2
 c8a:	09 f4       	brne	.+2      	; 0xc8e <__stack+0x38f>
 c8c:	42 ce       	rjmp	.-892    	; 0x912 <__stack+0x13>
 c8e:	b6 01       	movw	r22, r12
 c90:	80 e2       	ldi	r24, 0x20	; 32
 c92:	90 e0       	ldi	r25, 0x00	; 0
 c94:	0e 94 6e 06 	call	0xcdc	; 0xcdc <fputc>
 c98:	2a 94       	dec	r2
 c9a:	f6 cf       	rjmp	.-20     	; 0xc88 <__stack+0x389>
 c9c:	f6 01       	movw	r30, r12
 c9e:	86 81       	ldd	r24, Z+6	; 0x06
 ca0:	97 81       	ldd	r25, Z+7	; 0x07
 ca2:	02 c0       	rjmp	.+4      	; 0xca8 <__stack+0x3a9>
 ca4:	8f ef       	ldi	r24, 0xFF	; 255
 ca6:	9f ef       	ldi	r25, 0xFF	; 255
 ca8:	2b 96       	adiw	r28, 0x0b	; 11
 caa:	e2 e1       	ldi	r30, 0x12	; 18
 cac:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__epilogue_restores__>

00000cb0 <strnlen_P>:
 cb0:	fc 01       	movw	r30, r24
 cb2:	05 90       	lpm	r0, Z+
 cb4:	61 50       	subi	r22, 0x01	; 1
 cb6:	70 40       	sbci	r23, 0x00	; 0
 cb8:	01 10       	cpse	r0, r1
 cba:	d8 f7       	brcc	.-10     	; 0xcb2 <strnlen_P+0x2>
 cbc:	80 95       	com	r24
 cbe:	90 95       	com	r25
 cc0:	8e 0f       	add	r24, r30
 cc2:	9f 1f       	adc	r25, r31
 cc4:	08 95       	ret

00000cc6 <strnlen>:
 cc6:	fc 01       	movw	r30, r24
 cc8:	61 50       	subi	r22, 0x01	; 1
 cca:	70 40       	sbci	r23, 0x00	; 0
 ccc:	01 90       	ld	r0, Z+
 cce:	01 10       	cpse	r0, r1
 cd0:	d8 f7       	brcc	.-10     	; 0xcc8 <strnlen+0x2>
 cd2:	80 95       	com	r24
 cd4:	90 95       	com	r25
 cd6:	8e 0f       	add	r24, r30
 cd8:	9f 1f       	adc	r25, r31
 cda:	08 95       	ret

00000cdc <fputc>:
 cdc:	0f 93       	push	r16
 cde:	1f 93       	push	r17
 ce0:	cf 93       	push	r28
 ce2:	df 93       	push	r29
 ce4:	fb 01       	movw	r30, r22
 ce6:	23 81       	ldd	r18, Z+3	; 0x03
 ce8:	21 fd       	sbrc	r18, 1
 cea:	03 c0       	rjmp	.+6      	; 0xcf2 <fputc+0x16>
 cec:	8f ef       	ldi	r24, 0xFF	; 255
 cee:	9f ef       	ldi	r25, 0xFF	; 255
 cf0:	2c c0       	rjmp	.+88     	; 0xd4a <fputc+0x6e>
 cf2:	22 ff       	sbrs	r18, 2
 cf4:	16 c0       	rjmp	.+44     	; 0xd22 <fputc+0x46>
 cf6:	46 81       	ldd	r20, Z+6	; 0x06
 cf8:	57 81       	ldd	r21, Z+7	; 0x07
 cfa:	24 81       	ldd	r18, Z+4	; 0x04
 cfc:	35 81       	ldd	r19, Z+5	; 0x05
 cfe:	42 17       	cp	r20, r18
 d00:	53 07       	cpc	r21, r19
 d02:	44 f4       	brge	.+16     	; 0xd14 <fputc+0x38>
 d04:	a0 81       	ld	r26, Z
 d06:	b1 81       	ldd	r27, Z+1	; 0x01
 d08:	9d 01       	movw	r18, r26
 d0a:	2f 5f       	subi	r18, 0xFF	; 255
 d0c:	3f 4f       	sbci	r19, 0xFF	; 255
 d0e:	31 83       	std	Z+1, r19	; 0x01
 d10:	20 83       	st	Z, r18
 d12:	8c 93       	st	X, r24
 d14:	26 81       	ldd	r18, Z+6	; 0x06
 d16:	37 81       	ldd	r19, Z+7	; 0x07
 d18:	2f 5f       	subi	r18, 0xFF	; 255
 d1a:	3f 4f       	sbci	r19, 0xFF	; 255
 d1c:	37 83       	std	Z+7, r19	; 0x07
 d1e:	26 83       	std	Z+6, r18	; 0x06
 d20:	14 c0       	rjmp	.+40     	; 0xd4a <fputc+0x6e>
 d22:	8b 01       	movw	r16, r22
 d24:	ec 01       	movw	r28, r24
 d26:	fb 01       	movw	r30, r22
 d28:	00 84       	ldd	r0, Z+8	; 0x08
 d2a:	f1 85       	ldd	r31, Z+9	; 0x09
 d2c:	e0 2d       	mov	r30, r0
 d2e:	09 95       	icall
 d30:	89 2b       	or	r24, r25
 d32:	e1 f6       	brne	.-72     	; 0xcec <fputc+0x10>
 d34:	d8 01       	movw	r26, r16
 d36:	16 96       	adiw	r26, 0x06	; 6
 d38:	8d 91       	ld	r24, X+
 d3a:	9c 91       	ld	r25, X
 d3c:	17 97       	sbiw	r26, 0x07	; 7
 d3e:	01 96       	adiw	r24, 0x01	; 1
 d40:	17 96       	adiw	r26, 0x07	; 7
 d42:	9c 93       	st	X, r25
 d44:	8e 93       	st	-X, r24
 d46:	16 97       	sbiw	r26, 0x06	; 6
 d48:	ce 01       	movw	r24, r28
 d4a:	df 91       	pop	r29
 d4c:	cf 91       	pop	r28
 d4e:	1f 91       	pop	r17
 d50:	0f 91       	pop	r16
 d52:	08 95       	ret

00000d54 <__ultoa_invert>:
 d54:	fa 01       	movw	r30, r20
 d56:	aa 27       	eor	r26, r26
 d58:	28 30       	cpi	r18, 0x08	; 8
 d5a:	51 f1       	breq	.+84     	; 0xdb0 <__ultoa_invert+0x5c>
 d5c:	20 31       	cpi	r18, 0x10	; 16
 d5e:	81 f1       	breq	.+96     	; 0xdc0 <__ultoa_invert+0x6c>
 d60:	e8 94       	clt
 d62:	6f 93       	push	r22
 d64:	6e 7f       	andi	r22, 0xFE	; 254
 d66:	6e 5f       	subi	r22, 0xFE	; 254
 d68:	7f 4f       	sbci	r23, 0xFF	; 255
 d6a:	8f 4f       	sbci	r24, 0xFF	; 255
 d6c:	9f 4f       	sbci	r25, 0xFF	; 255
 d6e:	af 4f       	sbci	r26, 0xFF	; 255
 d70:	b1 e0       	ldi	r27, 0x01	; 1
 d72:	3e d0       	rcall	.+124    	; 0xdf0 <__ultoa_invert+0x9c>
 d74:	b4 e0       	ldi	r27, 0x04	; 4
 d76:	3c d0       	rcall	.+120    	; 0xdf0 <__ultoa_invert+0x9c>
 d78:	67 0f       	add	r22, r23
 d7a:	78 1f       	adc	r23, r24
 d7c:	89 1f       	adc	r24, r25
 d7e:	9a 1f       	adc	r25, r26
 d80:	a1 1d       	adc	r26, r1
 d82:	68 0f       	add	r22, r24
 d84:	79 1f       	adc	r23, r25
 d86:	8a 1f       	adc	r24, r26
 d88:	91 1d       	adc	r25, r1
 d8a:	a1 1d       	adc	r26, r1
 d8c:	6a 0f       	add	r22, r26
 d8e:	71 1d       	adc	r23, r1
 d90:	81 1d       	adc	r24, r1
 d92:	91 1d       	adc	r25, r1
 d94:	a1 1d       	adc	r26, r1
 d96:	20 d0       	rcall	.+64     	; 0xdd8 <__ultoa_invert+0x84>
 d98:	09 f4       	brne	.+2      	; 0xd9c <__ultoa_invert+0x48>
 d9a:	68 94       	set
 d9c:	3f 91       	pop	r19
 d9e:	2a e0       	ldi	r18, 0x0A	; 10
 da0:	26 9f       	mul	r18, r22
 da2:	11 24       	eor	r1, r1
 da4:	30 19       	sub	r19, r0
 da6:	30 5d       	subi	r19, 0xD0	; 208
 da8:	31 93       	st	Z+, r19
 daa:	de f6       	brtc	.-74     	; 0xd62 <__ultoa_invert+0xe>
 dac:	cf 01       	movw	r24, r30
 dae:	08 95       	ret
 db0:	46 2f       	mov	r20, r22
 db2:	47 70       	andi	r20, 0x07	; 7
 db4:	40 5d       	subi	r20, 0xD0	; 208
 db6:	41 93       	st	Z+, r20
 db8:	b3 e0       	ldi	r27, 0x03	; 3
 dba:	0f d0       	rcall	.+30     	; 0xdda <__ultoa_invert+0x86>
 dbc:	c9 f7       	brne	.-14     	; 0xdb0 <__ultoa_invert+0x5c>
 dbe:	f6 cf       	rjmp	.-20     	; 0xdac <__ultoa_invert+0x58>
 dc0:	46 2f       	mov	r20, r22
 dc2:	4f 70       	andi	r20, 0x0F	; 15
 dc4:	40 5d       	subi	r20, 0xD0	; 208
 dc6:	4a 33       	cpi	r20, 0x3A	; 58
 dc8:	18 f0       	brcs	.+6      	; 0xdd0 <__ultoa_invert+0x7c>
 dca:	49 5d       	subi	r20, 0xD9	; 217
 dcc:	31 fd       	sbrc	r19, 1
 dce:	40 52       	subi	r20, 0x20	; 32
 dd0:	41 93       	st	Z+, r20
 dd2:	02 d0       	rcall	.+4      	; 0xdd8 <__ultoa_invert+0x84>
 dd4:	a9 f7       	brne	.-22     	; 0xdc0 <__ultoa_invert+0x6c>
 dd6:	ea cf       	rjmp	.-44     	; 0xdac <__ultoa_invert+0x58>
 dd8:	b4 e0       	ldi	r27, 0x04	; 4
 dda:	a6 95       	lsr	r26
 ddc:	97 95       	ror	r25
 dde:	87 95       	ror	r24
 de0:	77 95       	ror	r23
 de2:	67 95       	ror	r22
 de4:	ba 95       	dec	r27
 de6:	c9 f7       	brne	.-14     	; 0xdda <__ultoa_invert+0x86>
 de8:	00 97       	sbiw	r24, 0x00	; 0
 dea:	61 05       	cpc	r22, r1
 dec:	71 05       	cpc	r23, r1
 dee:	08 95       	ret
 df0:	9b 01       	movw	r18, r22
 df2:	ac 01       	movw	r20, r24
 df4:	0a 2e       	mov	r0, r26
 df6:	06 94       	lsr	r0
 df8:	57 95       	ror	r21
 dfa:	47 95       	ror	r20
 dfc:	37 95       	ror	r19
 dfe:	27 95       	ror	r18
 e00:	ba 95       	dec	r27
 e02:	c9 f7       	brne	.-14     	; 0xdf6 <__ultoa_invert+0xa2>
 e04:	62 0f       	add	r22, r18
 e06:	73 1f       	adc	r23, r19
 e08:	84 1f       	adc	r24, r20
 e0a:	95 1f       	adc	r25, r21
 e0c:	a0 1d       	adc	r26, r0
 e0e:	08 95       	ret

00000e10 <__prologue_saves__>:
 e10:	2f 92       	push	r2
 e12:	3f 92       	push	r3
 e14:	4f 92       	push	r4
 e16:	5f 92       	push	r5
 e18:	6f 92       	push	r6
 e1a:	7f 92       	push	r7
 e1c:	8f 92       	push	r8
 e1e:	9f 92       	push	r9
 e20:	af 92       	push	r10
 e22:	bf 92       	push	r11
 e24:	cf 92       	push	r12
 e26:	df 92       	push	r13
 e28:	ef 92       	push	r14
 e2a:	ff 92       	push	r15
 e2c:	0f 93       	push	r16
 e2e:	1f 93       	push	r17
 e30:	cf 93       	push	r28
 e32:	df 93       	push	r29
 e34:	cd b7       	in	r28, 0x3d	; 61
 e36:	de b7       	in	r29, 0x3e	; 62
 e38:	ca 1b       	sub	r28, r26
 e3a:	db 0b       	sbc	r29, r27
 e3c:	0f b6       	in	r0, 0x3f	; 63
 e3e:	f8 94       	cli
 e40:	de bf       	out	0x3e, r29	; 62
 e42:	0f be       	out	0x3f, r0	; 63
 e44:	cd bf       	out	0x3d, r28	; 61
 e46:	09 94       	ijmp

00000e48 <__epilogue_restores__>:
 e48:	2a 88       	ldd	r2, Y+18	; 0x12
 e4a:	39 88       	ldd	r3, Y+17	; 0x11
 e4c:	48 88       	ldd	r4, Y+16	; 0x10
 e4e:	5f 84       	ldd	r5, Y+15	; 0x0f
 e50:	6e 84       	ldd	r6, Y+14	; 0x0e
 e52:	7d 84       	ldd	r7, Y+13	; 0x0d
 e54:	8c 84       	ldd	r8, Y+12	; 0x0c
 e56:	9b 84       	ldd	r9, Y+11	; 0x0b
 e58:	aa 84       	ldd	r10, Y+10	; 0x0a
 e5a:	b9 84       	ldd	r11, Y+9	; 0x09
 e5c:	c8 84       	ldd	r12, Y+8	; 0x08
 e5e:	df 80       	ldd	r13, Y+7	; 0x07
 e60:	ee 80       	ldd	r14, Y+6	; 0x06
 e62:	fd 80       	ldd	r15, Y+5	; 0x05
 e64:	0c 81       	ldd	r16, Y+4	; 0x04
 e66:	1b 81       	ldd	r17, Y+3	; 0x03
 e68:	aa 81       	ldd	r26, Y+2	; 0x02
 e6a:	b9 81       	ldd	r27, Y+1	; 0x01
 e6c:	ce 0f       	add	r28, r30
 e6e:	d1 1d       	adc	r29, r1
 e70:	0f b6       	in	r0, 0x3f	; 63
 e72:	f8 94       	cli
 e74:	de bf       	out	0x3e, r29	; 62
 e76:	0f be       	out	0x3f, r0	; 63
 e78:	cd bf       	out	0x3d, r28	; 61
 e7a:	ed 01       	movw	r28, r26
 e7c:	08 95       	ret

00000e7e <_exit>:
 e7e:	f8 94       	cli

00000e80 <__stop_program>:
 e80:	ff cf       	rjmp	.-2      	; 0xe80 <__stop_program>
