
MotorControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00000b16  00000baa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800142  00800142  00000bec  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001486  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd6  00000000  00000000  0000229e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d47  00000000  00000000  00002f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  00003cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000758  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008e0  00000000  00000000  000047e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000050c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e1       	ldi	r30, 0x16	; 22
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e4       	ldi	r26, 0x42	; 66
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 35       	cpi	r26, 0x5A	; 90
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 13 01 	call	0x226	; 0x226 <main>
  9e:	0c 94 89 05 	jmp	0xb12	; 0xb12 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_21>:

*/



ISR(ADC_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
	switch(ADMUX){
  c8:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  cc:	81 34       	cpi	r24, 0x41	; 65
  ce:	81 f0       	breq	.+32     	; 0xf0 <__vector_21+0x4a>
  d0:	18 f4       	brcc	.+6      	; 0xd8 <__vector_21+0x32>
  d2:	80 34       	cpi	r24, 0x40	; 64
  d4:	31 f0       	breq	.+12     	; 0xe2 <__vector_21+0x3c>
  d6:	20 c0       	rjmp	.+64     	; 0x118 <__vector_21+0x72>
  d8:	82 34       	cpi	r24, 0x42	; 66
  da:	89 f0       	breq	.+34     	; 0xfe <__vector_21+0x58>
  dc:	83 34       	cpi	r24, 0x43	; 67
  de:	b1 f0       	breq	.+44     	; 0x10c <__vector_21+0x66>
  e0:	1b c0       	rjmp	.+54     	; 0x118 <__vector_21+0x72>
		case 0x40:
		//printf("ADC1 RESULT = %d\n",adc_result);
		//printf("ADC CHANNEL 0\n");
		Max_Curren = 31;
  e2:	8f e1       	ldi	r24, 0x1F	; 31
  e4:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <Max_Curren>
		ADC_Channel = 1;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <ADC_Channel>
		break;
  ee:	18 c0       	rjmp	.+48     	; 0x120 <__vector_21+0x7a>
		
		case 0x41:
		//printf("ADC2 RESULT = %d\n",adc_result);
		//printf("ADC CHANNEL 1\n");
		Max_Curren = 32;
  f0:	80 e2       	ldi	r24, 0x20	; 32
  f2:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <Max_Curren>
		ADC_Channel = 2;
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <ADC_Channel>
		break;
  fc:	11 c0       	rjmp	.+34     	; 0x120 <__vector_21+0x7a>
		
		case 0x42:
		//printf("ADC3 RESULT = %d\n",adc_result);
		//printf("ADC CHANNEL 2\n");
		Max_Curren = 33;
  fe:	81 e2       	ldi	r24, 0x21	; 33
 100:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <Max_Curren>
		ADC_Channel = 3;
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <ADC_Channel>
		break;
 10a:	0a c0       	rjmp	.+20     	; 0x120 <__vector_21+0x7a>
		
		case 0x43:
		//printf("ADC4 RESULT = %d\n",adc_result);
		//printf("ADC CHANNEL 3\n");
		Max_Curren = 34;
 10c:	82 e2       	ldi	r24, 0x22	; 34
 10e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <Max_Curren>
		ADC_Channel = 0;
 112:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <ADC_Channel>
		break;
 116:	04 c0       	rjmp	.+8      	; 0x120 <__vector_21+0x7a>
		default:
		printf("Broken!\n");
 118:	8d e1       	ldi	r24, 0x1D	; 29
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	0e 94 91 02 	call	0x522	; 0x522 <puts>
		break;
	}
}
 120:	ff 91       	pop	r31
 122:	ef 91       	pop	r30
 124:	bf 91       	pop	r27
 126:	af 91       	pop	r26
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	7f 91       	pop	r23
 12e:	6f 91       	pop	r22
 130:	5f 91       	pop	r21
 132:	4f 91       	pop	r20
 134:	3f 91       	pop	r19
 136:	2f 91       	pop	r18
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <I2C_recieve>:
		sei();
}

void i2c_transmit_data(uint8_t data)
{		
	TWDR = data;
 142:	cf 93       	push	r28
 144:	c8 2f       	mov	r28, r24
 146:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <bytes>
 14a:	81 11       	cpse	r24, r1
 14c:	06 c0       	rjmp	.+12     	; 0x15a <I2C_recieve+0x18>
 14e:	c0 93 4e 01 	sts	0x014E, r28	; 0x80014e <opcode>
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <bytes>
 158:	04 c0       	rjmp	.+8      	; 0x162 <I2C_recieve+0x20>
 15a:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <data>
 15e:	0e 94 9e 01 	call	0x33c	; 0x33c <i2c_service>
 162:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <data>
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <I2C_data_ACK_request>:
 16a:	0e 94 9e 01 	call	0x33c	; 0x33c <i2c_service>
 16e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <data>
 172:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 176:	08 95       	ret

00000178 <I2C_data_NACK_request>:
 178:	0e 94 9e 01 	call	0x33c	; 0x33c <i2c_service>
 17c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <data>
 180:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 184:	08 95       	ret

00000186 <set_data>:
}

void set_data(uint8_t value)
{
	data = value;
 186:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <data>
 18a:	08 95       	ret

0000018c <__vector_24>:
}


 
ISR(TWI_vect)
{
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	2f 93       	push	r18
 198:	3f 93       	push	r19
 19a:	4f 93       	push	r20
 19c:	5f 93       	push	r21
 19e:	6f 93       	push	r22
 1a0:	7f 93       	push	r23
 1a2:	8f 93       	push	r24
 1a4:	9f 93       	push	r25
 1a6:	af 93       	push	r26
 1a8:	bf 93       	push	r27
 1aa:	ef 93       	push	r30
 1ac:	ff 93       	push	r31
	switch(TW_STATUS)
 1ae:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1b2:	88 7f       	andi	r24, 0xF8	; 248
 1b4:	80 38       	cpi	r24, 0x80	; 128
 1b6:	49 f0       	breq	.+18     	; 0x1ca <__vector_24+0x3e>
 1b8:	18 f4       	brcc	.+6      	; 0x1c0 <__vector_24+0x34>
 1ba:	88 23       	and	r24, r24
 1bc:	d1 f0       	breq	.+52     	; 0x1f2 <__vector_24+0x66>
 1be:	1f c0       	rjmp	.+62     	; 0x1fe <__vector_24+0x72>
 1c0:	88 3a       	cpi	r24, 0xA8	; 168
 1c2:	59 f0       	breq	.+22     	; 0x1da <__vector_24+0x4e>
 1c4:	88 3b       	cpi	r24, 0xB8	; 184
 1c6:	79 f0       	breq	.+30     	; 0x1e6 <__vector_24+0x5a>
 1c8:	1a c0       	rjmp	.+52     	; 0x1fe <__vector_24+0x72>
	{
		case TW_SR_DATA_ACK:
		// received data from master, call the receive callback
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 1ca:	85 ec       	ldi	r24, 0xC5	; 197
 1cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		I2C_recieve(TWDR);
 1d0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 1d4:	0e 94 a1 00 	call	0x142	; 0x142 <I2C_recieve>
		break;
 1d8:	15 c0       	rjmp	.+42     	; 0x204 <__vector_24+0x78>
		
		case TW_ST_SLA_ACK:
		// master is requesting data using NACK,master expects only one additional byte. call the request callback
		I2C_data_NACK_request();
 1da:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_data_NACK_request>
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 1de:	85 ec       	ldi	r24, 0xC5	; 197
 1e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
 1e4:	0f c0       	rjmp	.+30     	; 0x204 <__vector_24+0x78>
		
		case TW_ST_DATA_ACK:
		// master is requesting data using ACK, master expects multiple bytes. call the request callback
		I2C_data_ACK_request();
 1e6:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_data_ACK_request>
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 1ea:	85 ec       	ldi	r24, 0xC5	; 197
 1ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
 1f0:	09 c0       	rjmp	.+18     	; 0x204 <__vector_24+0x78>
		
		case TW_BUS_ERROR:
		// some sort of erroneous state, prepare TWI to be readdressed
		TWCR = 0;
 1f2:	ec eb       	ldi	r30, 0xBC	; 188
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	10 82       	st	Z, r1
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 1f8:	85 ec       	ldi	r24, 0xC5	; 197
 1fa:	80 83       	st	Z, r24
		break;
 1fc:	03 c0       	rjmp	.+6      	; 0x204 <__vector_24+0x78>
		
		default:
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 1fe:	85 ec       	ldi	r24, 0xC5	; 197
 200:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
	}
}
 204:	ff 91       	pop	r31
 206:	ef 91       	pop	r30
 208:	bf 91       	pop	r27
 20a:	af 91       	pop	r26
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	7f 91       	pop	r23
 212:	6f 91       	pop	r22
 214:	5f 91       	pop	r21
 216:	4f 91       	pop	r20
 218:	3f 91       	pop	r19
 21a:	2f 91       	pop	r18
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <main>:
char status = 10;

int main(void)
{
	
	uart_init();   // open the communication to the microcontroller
 226:	0e 94 5f 02 	call	0x4be	; 0x4be <uart_init>
	io_redirect(); // redirect input and output to the uart	
 22a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <io_redirect>
	//IO_init();	   //
	TimersInit();
 22e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <TimersInit>
	//Enable_ADC();
	//i2c_init(I2C_ADDR);	
	//sei();
	DDRD |= (1 << DDD2);
 232:	52 9a       	sbi	0x0a, 2	; 10
	PORTD &= ~(1<< PORTD2);
 234:	5a 98       	cbi	0x0b, 2	; 11
	
	
	sei();
 236:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 238:	8f e8       	ldi	r24, 0x8F	; 143
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <main+0x16>
 240:	00 c0       	rjmp	.+0      	; 0x242 <main+0x1c>
 242:	00 00       	nop
 244:	f9 cf       	rjmp	.-14     	; 0x238 <main+0x12>

00000246 <cal_checksum>:
}


void set_opcode(uint8_t value)
{
	opcode = value;
 246:	fc 01       	movw	r30, r24
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	9b 01       	movw	r18, r22
 24c:	21 50       	subi	r18, 0x01	; 1
 24e:	31 09       	sbc	r19, r1
 250:	16 16       	cp	r1, r22
 252:	17 06       	cpc	r1, r23
 254:	74 f4       	brge	.+28     	; 0x272 <cal_checksum+0x2c>
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	af 01       	movw	r20, r30
 25a:	02 2e       	mov	r0, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <cal_checksum+0x1c>
 25e:	55 95       	asr	r21
 260:	47 95       	ror	r20
 262:	0a 94       	dec	r0
 264:	e2 f7       	brpl	.-8      	; 0x25e <cal_checksum+0x18>
 266:	41 70       	andi	r20, 0x01	; 1
 268:	84 27       	eor	r24, r20
 26a:	21 50       	subi	r18, 0x01	; 1
 26c:	31 09       	sbc	r19, r1
 26e:	a0 f7       	brcc	.-24     	; 0x258 <cal_checksum+0x12>
 270:	01 c0       	rjmp	.+2      	; 0x274 <cal_checksum+0x2e>
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	08 95       	ret

00000278 <Motor_Send_Status>:



void Motor_Send_Status(void)
{
	if (bytes==1)
 278:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <bytes>
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	59 f4       	brne	.+22     	; 0x296 <Motor_Send_Status+0x1e>
	{
		int checksum;
		
		checksum = cal_checksum(status, 8);
 280:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 284:	68 e0       	ldi	r22, 0x08	; 8
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 23 01 	call	0x246	; 0x246 <cal_checksum>
		set_data(checksum);
 28c:	0e 94 c3 00 	call	0x186	; 0x186 <set_data>
		bytes=0;
 290:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <bytes>
 294:	08 95       	ret
	}
	else
	{
		set_data(status);
 296:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 29a:	0e 94 c3 00 	call	0x186	; 0x186 <set_data>
		bytes++;
 29e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <bytes>
 2a2:	8f 5f       	subi	r24, 0xFF	; 255
 2a4:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <bytes>
 2a8:	08 95       	ret

000002aa <Motor_Send_error>:
	}
}
void Motor_Send_error(void)
{
 2aa:	cf 93       	push	r28
	//printf("Motor Send update \n");
	int new_error=0;
	char received_checksum;
	if (bytes==3)
 2ac:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <bytes>
 2b0:	83 30       	cpi	r24, 0x03	; 3
 2b2:	f9 f4       	brne	.+62     	; 0x2f2 <Motor_Send_error+0x48>
	{
		received_checksum = data;
 2b4:	c0 91 4d 01 	lds	r28, 0x014D	; 0x80014d <data>
		int checksum = cal_checksum(new_error, 16);
 2b8:	60 e1       	ldi	r22, 0x10	; 16
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 23 01 	call	0x246	; 0x246 <cal_checksum>
		
		if (checksum==received_checksum)
 2c2:	2c 2f       	mov	r18, r28
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	82 17       	cp	r24, r18
 2c8:	93 07       	cpc	r25, r19
 2ca:	81 f4       	brne	.+32     	; 0x2ec <Motor_Send_error+0x42>
		{
			error = new_error;
 2cc:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <error+0x1>
 2d0:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <error>
			printf("after %d \n",error);
 2d4:	1f 92       	push	r1
 2d6:	1f 92       	push	r1
 2d8:	85 e2       	ldi	r24, 0x25	; 37
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	9f 93       	push	r25
 2de:	8f 93       	push	r24
 2e0:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <printf>
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
		}

		
		bytes=0;
 2ec:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <bytes>
 2f0:	23 c0       	rjmp	.+70     	; 0x338 <Motor_Send_error+0x8e>
		
	}
	else
	{
		new_error=new_error + data << (8*(bytes-1));
 2f2:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <data>
		printf("error update %d \n",new_error);
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	a9 01       	movw	r20, r18
 30a:	02 c0       	rjmp	.+4      	; 0x310 <Motor_Send_error+0x66>
 30c:	44 0f       	add	r20, r20
 30e:	55 1f       	adc	r21, r21
 310:	8a 95       	dec	r24
 312:	e2 f7       	brpl	.-8      	; 0x30c <Motor_Send_error+0x62>
 314:	ca 01       	movw	r24, r20
 316:	9f 93       	push	r25
 318:	4f 93       	push	r20
 31a:	80 e3       	ldi	r24, 0x30	; 48
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	9f 93       	push	r25
 320:	8f 93       	push	r24
 322:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <printf>
		bytes++;
 326:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <bytes>
 32a:	8f 5f       	subi	r24, 0xFF	; 255
 32c:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <bytes>
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	0f 90       	pop	r0
 336:	0f 90       	pop	r0
	
	
	
	
	
}
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <i2c_service>:
}


void i2c_service(void)
{
	switch(opcode)
 33c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <opcode>
 340:	88 23       	and	r24, r24
 342:	19 f0       	breq	.+6      	; 0x34a <i2c_service+0xe>
 344:	81 30       	cpi	r24, 0x01	; 1
 346:	21 f0       	breq	.+8      	; 0x350 <i2c_service+0x14>
 348:	08 95       	ret
	{
		case 0:
		{
			Motor_Send_Status();
 34a:	0e 94 3c 01 	call	0x278	; 0x278 <Motor_Send_Status>
			break;
 34e:	08 95       	ret
		}
		
		case 1:
		{
			Motor_Send_error();
 350:	0e 94 55 01 	call	0x2aa	; 0x2aa <Motor_Send_error>
 354:	08 95       	ret

00000356 <T0_init>:
		
		case 3:
		StopDrive();
		break;
	}
}
 356:	84 b5       	in	r24, 0x24	; 36
 358:	80 68       	ori	r24, 0x80	; 128
 35a:	84 bd       	out	0x24, r24	; 36
 35c:	84 b5       	in	r24, 0x24	; 36
 35e:	80 62       	ori	r24, 0x20	; 32
 360:	84 bd       	out	0x24, r24	; 36
 362:	84 b5       	in	r24, 0x24	; 36
 364:	8b 60       	ori	r24, 0x0B	; 11
 366:	84 bd       	out	0x24, r24	; 36
 368:	8f ef       	ldi	r24, 0xFF	; 255
 36a:	87 bd       	out	0x27, r24	; 39
 36c:	88 bd       	out	0x28, r24	; 40
 36e:	85 b5       	in	r24, 0x25	; 37
 370:	82 60       	ori	r24, 0x02	; 2
 372:	85 bd       	out	0x25, r24	; 37
 374:	08 95       	ret

00000376 <T1_init>:
 376:	e0 e8       	ldi	r30, 0x80	; 128
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	80 68       	ori	r24, 0x80	; 128
 37e:	80 83       	st	Z, r24
 380:	80 81       	ld	r24, Z
 382:	80 62       	ori	r24, 0x20	; 32
 384:	80 83       	st	Z, r24
 386:	80 81       	ld	r24, Z
 388:	8b 60       	ori	r24, 0x0B	; 11
 38a:	80 83       	st	Z, r24
 38c:	80 e3       	ldi	r24, 0x30	; 48
 38e:	95 e7       	ldi	r25, 0x75	; 117
 390:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 394:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 398:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 39c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 3a0:	e1 e8       	ldi	r30, 0x81	; 129
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	85 60       	ori	r24, 0x05	; 5
 3a8:	80 83       	st	Z, r24
 3aa:	08 95       	ret

000003ac <T2_init>:
 3ac:	e0 eb       	ldi	r30, 0xB0	; 176
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
 3b2:	80 68       	ori	r24, 0x80	; 128
 3b4:	80 83       	st	Z, r24
 3b6:	80 81       	ld	r24, Z
 3b8:	80 62       	ori	r24, 0x20	; 32
 3ba:	80 83       	st	Z, r24
 3bc:	80 81       	ld	r24, Z
 3be:	8b 60       	ori	r24, 0x0B	; 11
 3c0:	80 83       	st	Z, r24
 3c2:	80 e8       	ldi	r24, 0x80	; 128
 3c4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 3c8:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 3cc:	e1 eb       	ldi	r30, 0xB1	; 177
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	80 81       	ld	r24, Z
 3d2:	82 60       	ori	r24, 0x02	; 2
 3d4:	80 83       	st	Z, r24
 3d6:	e0 e7       	ldi	r30, 0x70	; 112
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	81 60       	ori	r24, 0x01	; 1
 3de:	80 83       	st	Z, r24
 3e0:	08 95       	ret

000003e2 <TimersInit>:
 3e2:	0e 94 ab 01 	call	0x356	; 0x356 <T0_init>
 3e6:	0e 94 bb 01 	call	0x376	; 0x376 <T1_init>
 3ea:	0e 94 d6 01 	call	0x3ac	; 0x3ac <T2_init>
 3ee:	08 95       	ret

000003f0 <__vector_9>:




ISR(TIMER2_OVF_vect)
{
 3f0:	1f 92       	push	r1
 3f2:	0f 92       	push	r0
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	0f 92       	push	r0
 3f8:	11 24       	eor	r1, r1
 3fa:	2f 93       	push	r18
 3fc:	8f 93       	push	r24
 3fe:	9f 93       	push	r25
	counter_rampslow++;
 400:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <counter_rampslow>
 404:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <counter_rampslow+0x1>
 408:	01 96       	adiw	r24, 0x01	; 1
 40a:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <counter_rampslow+0x1>
 40e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <counter_rampslow>
	counter_rampfast++;
 412:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <counter_rampfast>
 416:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <counter_rampfast+0x1>
 41a:	01 96       	adiw	r24, 0x01	; 1
 41c:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <counter_rampfast+0x1>
 420:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <counter_rampfast>
	counter_safety++;
 424:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
 428:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
 42c:	01 96       	adiw	r24, 0x01	; 1
 42e:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__data_end+0x1>
 432:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
	
	if (counter_rampslow>rampslow_scale)
 436:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <counter_rampslow>
 43a:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <counter_rampslow+0x1>
 43e:	87 38       	cpi	r24, 0x87	; 135
 440:	91 40       	sbci	r25, 0x01	; 1
 442:	24 f0       	brlt	.+8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
	{
		//Toggle(pd2);
		counter_rampslow=0;
 444:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <counter_rampslow+0x1>
 448:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <counter_rampslow>
	}
	
	if (counter_rampfast>rampfast_scale)
 44c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <counter_rampfast>
 450:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <counter_rampfast+0x1>
 454:	05 97       	sbiw	r24, 0x05	; 5
 456:	24 f0       	brlt	.+8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
	{
		//Toggle(pd2);
		counter_rampfast=0;
 458:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <counter_rampfast+0x1>
 45c:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <counter_rampfast>
	}
	
	if (counter_safety>safty_scale)
 460:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
 464:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
 468:	89 31       	cpi	r24, 0x19	; 25
 46a:	96 40       	sbci	r25, 0x06	; 6
 46c:	44 f0       	brlt	.+16     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
	{
		Toggle(pd2);
 46e:	9b b1       	in	r25, 0x0b	; 11
 470:	84 e0       	ldi	r24, 0x04	; 4
 472:	89 27       	eor	r24, r25
 474:	8b b9       	out	0x0b, r24	; 11
		counter_safety=0;
 476:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <__data_end+0x1>
 47a:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end>
	
	//PORTD &= ~(1 << 2); // Pin n goes low

	//Toggle(pd2);

}
 47e:	9f 91       	pop	r25
 480:	8f 91       	pop	r24
 482:	2f 91       	pop	r18
 484:	0f 90       	pop	r0
 486:	0f be       	out	0x3f, r0	; 63
 488:	0f 90       	pop	r0
 48a:	1f 90       	pop	r1
 48c:	18 95       	reti

0000048e <uart_putchar>:
		stdout = &uart_output;	//redirect standard output to uart
		stdin  = &uart_input;  //redirect standard input to uart
}
	

void uart_putchar(char c, FILE *stream) {
 48e:	cf 93       	push	r28
 490:	c8 2f       	mov	r28, r24
	if (c == '\n') {
 492:	8a 30       	cpi	r24, 0x0A	; 10
 494:	19 f4       	brne	.+6      	; 0x49c <uart_putchar+0xe>
		uart_putchar('\r', stream);
 496:	8d e0       	ldi	r24, 0x0D	; 13
 498:	0e 94 47 02 	call	0x48e	; 0x48e <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
 49c:	e0 ec       	ldi	r30, 0xC0	; 192
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	85 ff       	sbrs	r24, 5
 4a4:	fd cf       	rjmp	.-6      	; 0x4a0 <uart_putchar+0x12>
	UDR0 = c;
 4a6:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 4aa:	cf 91       	pop	r28
 4ac:	08 95       	ret

000004ae <uart_getchar>:

char uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0);
 4ae:	e0 ec       	ldi	r30, 0xC0	; 192
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	80 81       	ld	r24, Z
 4b4:	88 23       	and	r24, r24
 4b6:	ec f7       	brge	.-6      	; 0x4b2 <uart_getchar+0x4>
	return UDR0;
 4b8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4bc:	08 95       	ret

000004be <uart_init>:
FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);


void uart_init(void) {
	
	UBRR0H = UBRRH_VALUE;
 4be:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 4c2:	87 e6       	ldi	r24, 0x67	; 103
 4c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
 4c8:	e0 ec       	ldi	r30, 0xC0	; 192
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	80 81       	ld	r24, Z
 4ce:	8d 7f       	andi	r24, 0xFD	; 253
 4d0:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
 4d2:	86 e0       	ldi	r24, 0x06	; 6
 4d4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
 4d8:	88 e1       	ldi	r24, 0x18	; 24
 4da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 4de:	08 95       	ret

000004e0 <io_redirect>:
}

void io_redirect(void ){
		
		
		stdout = &uart_output;	//redirect standard output to uart
 4e0:	e4 e5       	ldi	r30, 0x54	; 84
 4e2:	f1 e0       	ldi	r31, 0x01	; 1
 4e4:	8f e0       	ldi	r24, 0x0F	; 15
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	93 83       	std	Z+3, r25	; 0x03
 4ea:	82 83       	std	Z+2, r24	; 0x02
		stdin  = &uart_input;  //redirect standard input to uart
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	91 e0       	ldi	r25, 0x01	; 1
 4f0:	91 83       	std	Z+1, r25	; 0x01
 4f2:	80 83       	st	Z, r24
 4f4:	08 95       	ret

000004f6 <printf>:
 4f6:	a0 e0       	ldi	r26, 0x00	; 0
 4f8:	b0 e0       	ldi	r27, 0x00	; 0
 4fa:	e1 e8       	ldi	r30, 0x81	; 129
 4fc:	f2 e0       	ldi	r31, 0x02	; 2
 4fe:	0c 94 62 05 	jmp	0xac4	; 0xac4 <__prologue_saves__+0x20>
 502:	ae 01       	movw	r20, r28
 504:	4b 5f       	subi	r20, 0xFB	; 251
 506:	5f 4f       	sbci	r21, 0xFF	; 255
 508:	fa 01       	movw	r30, r20
 50a:	61 91       	ld	r22, Z+
 50c:	71 91       	ld	r23, Z+
 50e:	af 01       	movw	r20, r30
 510:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__iob+0x2>
 514:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__iob+0x3>
 518:	0e 94 c1 02 	call	0x582	; 0x582 <vfprintf>
 51c:	e2 e0       	ldi	r30, 0x02	; 2
 51e:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__epilogue_restores__+0x20>

00000522 <puts>:
 522:	0f 93       	push	r16
 524:	1f 93       	push	r17
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
 52a:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <__iob+0x2>
 52e:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <__iob+0x3>
 532:	23 81       	ldd	r18, Z+3	; 0x03
 534:	21 ff       	sbrs	r18, 1
 536:	1b c0       	rjmp	.+54     	; 0x56e <puts+0x4c>
 538:	8c 01       	movw	r16, r24
 53a:	d0 e0       	ldi	r29, 0x00	; 0
 53c:	c0 e0       	ldi	r28, 0x00	; 0
 53e:	f8 01       	movw	r30, r16
 540:	81 91       	ld	r24, Z+
 542:	8f 01       	movw	r16, r30
 544:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <__iob+0x2>
 548:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <__iob+0x3>
 54c:	db 01       	movw	r26, r22
 54e:	18 96       	adiw	r26, 0x08	; 8
 550:	ed 91       	ld	r30, X+
 552:	fc 91       	ld	r31, X
 554:	19 97       	sbiw	r26, 0x09	; 9
 556:	88 23       	and	r24, r24
 558:	31 f0       	breq	.+12     	; 0x566 <puts+0x44>
 55a:	09 95       	icall
 55c:	89 2b       	or	r24, r25
 55e:	79 f3       	breq	.-34     	; 0x53e <puts+0x1c>
 560:	df ef       	ldi	r29, 0xFF	; 255
 562:	cf ef       	ldi	r28, 0xFF	; 255
 564:	ec cf       	rjmp	.-40     	; 0x53e <puts+0x1c>
 566:	8a e0       	ldi	r24, 0x0A	; 10
 568:	09 95       	icall
 56a:	89 2b       	or	r24, r25
 56c:	19 f0       	breq	.+6      	; 0x574 <puts+0x52>
 56e:	8f ef       	ldi	r24, 0xFF	; 255
 570:	9f ef       	ldi	r25, 0xFF	; 255
 572:	02 c0       	rjmp	.+4      	; 0x578 <puts+0x56>
 574:	8d 2f       	mov	r24, r29
 576:	9c 2f       	mov	r25, r28
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	1f 91       	pop	r17
 57e:	0f 91       	pop	r16
 580:	08 95       	ret

00000582 <vfprintf>:
 582:	ab e0       	ldi	r26, 0x0B	; 11
 584:	b0 e0       	ldi	r27, 0x00	; 0
 586:	e7 ec       	ldi	r30, 0xC7	; 199
 588:	f2 e0       	ldi	r31, 0x02	; 2
 58a:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <__prologue_saves__>
 58e:	6c 01       	movw	r12, r24
 590:	7b 01       	movw	r14, r22
 592:	8a 01       	movw	r16, r20
 594:	fc 01       	movw	r30, r24
 596:	17 82       	std	Z+7, r1	; 0x07
 598:	16 82       	std	Z+6, r1	; 0x06
 59a:	83 81       	ldd	r24, Z+3	; 0x03
 59c:	81 ff       	sbrs	r24, 1
 59e:	cc c1       	rjmp	.+920    	; 0x938 <__stack+0x39>
 5a0:	ce 01       	movw	r24, r28
 5a2:	01 96       	adiw	r24, 0x01	; 1
 5a4:	3c 01       	movw	r6, r24
 5a6:	f6 01       	movw	r30, r12
 5a8:	93 81       	ldd	r25, Z+3	; 0x03
 5aa:	f7 01       	movw	r30, r14
 5ac:	93 fd       	sbrc	r25, 3
 5ae:	85 91       	lpm	r24, Z+
 5b0:	93 ff       	sbrs	r25, 3
 5b2:	81 91       	ld	r24, Z+
 5b4:	7f 01       	movw	r14, r30
 5b6:	88 23       	and	r24, r24
 5b8:	09 f4       	brne	.+2      	; 0x5bc <vfprintf+0x3a>
 5ba:	ba c1       	rjmp	.+884    	; 0x930 <__stack+0x31>
 5bc:	85 32       	cpi	r24, 0x25	; 37
 5be:	39 f4       	brne	.+14     	; 0x5ce <vfprintf+0x4c>
 5c0:	93 fd       	sbrc	r25, 3
 5c2:	85 91       	lpm	r24, Z+
 5c4:	93 ff       	sbrs	r25, 3
 5c6:	81 91       	ld	r24, Z+
 5c8:	7f 01       	movw	r14, r30
 5ca:	85 32       	cpi	r24, 0x25	; 37
 5cc:	29 f4       	brne	.+10     	; 0x5d8 <vfprintf+0x56>
 5ce:	b6 01       	movw	r22, r12
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	0e 94 b8 04 	call	0x970	; 0x970 <fputc>
 5d6:	e7 cf       	rjmp	.-50     	; 0x5a6 <vfprintf+0x24>
 5d8:	91 2c       	mov	r9, r1
 5da:	21 2c       	mov	r2, r1
 5dc:	31 2c       	mov	r3, r1
 5de:	ff e1       	ldi	r31, 0x1F	; 31
 5e0:	f3 15       	cp	r31, r3
 5e2:	d8 f0       	brcs	.+54     	; 0x61a <vfprintf+0x98>
 5e4:	8b 32       	cpi	r24, 0x2B	; 43
 5e6:	79 f0       	breq	.+30     	; 0x606 <vfprintf+0x84>
 5e8:	38 f4       	brcc	.+14     	; 0x5f8 <vfprintf+0x76>
 5ea:	80 32       	cpi	r24, 0x20	; 32
 5ec:	79 f0       	breq	.+30     	; 0x60c <vfprintf+0x8a>
 5ee:	83 32       	cpi	r24, 0x23	; 35
 5f0:	a1 f4       	brne	.+40     	; 0x61a <vfprintf+0x98>
 5f2:	23 2d       	mov	r18, r3
 5f4:	20 61       	ori	r18, 0x10	; 16
 5f6:	1d c0       	rjmp	.+58     	; 0x632 <vfprintf+0xb0>
 5f8:	8d 32       	cpi	r24, 0x2D	; 45
 5fa:	61 f0       	breq	.+24     	; 0x614 <vfprintf+0x92>
 5fc:	80 33       	cpi	r24, 0x30	; 48
 5fe:	69 f4       	brne	.+26     	; 0x61a <vfprintf+0x98>
 600:	23 2d       	mov	r18, r3
 602:	21 60       	ori	r18, 0x01	; 1
 604:	16 c0       	rjmp	.+44     	; 0x632 <vfprintf+0xb0>
 606:	83 2d       	mov	r24, r3
 608:	82 60       	ori	r24, 0x02	; 2
 60a:	38 2e       	mov	r3, r24
 60c:	e3 2d       	mov	r30, r3
 60e:	e4 60       	ori	r30, 0x04	; 4
 610:	3e 2e       	mov	r3, r30
 612:	2a c0       	rjmp	.+84     	; 0x668 <vfprintf+0xe6>
 614:	f3 2d       	mov	r31, r3
 616:	f8 60       	ori	r31, 0x08	; 8
 618:	1d c0       	rjmp	.+58     	; 0x654 <vfprintf+0xd2>
 61a:	37 fc       	sbrc	r3, 7
 61c:	2d c0       	rjmp	.+90     	; 0x678 <vfprintf+0xf6>
 61e:	20 ed       	ldi	r18, 0xD0	; 208
 620:	28 0f       	add	r18, r24
 622:	2a 30       	cpi	r18, 0x0A	; 10
 624:	40 f0       	brcs	.+16     	; 0x636 <vfprintf+0xb4>
 626:	8e 32       	cpi	r24, 0x2E	; 46
 628:	b9 f4       	brne	.+46     	; 0x658 <vfprintf+0xd6>
 62a:	36 fc       	sbrc	r3, 6
 62c:	81 c1       	rjmp	.+770    	; 0x930 <__stack+0x31>
 62e:	23 2d       	mov	r18, r3
 630:	20 64       	ori	r18, 0x40	; 64
 632:	32 2e       	mov	r3, r18
 634:	19 c0       	rjmp	.+50     	; 0x668 <vfprintf+0xe6>
 636:	36 fe       	sbrs	r3, 6
 638:	06 c0       	rjmp	.+12     	; 0x646 <vfprintf+0xc4>
 63a:	8a e0       	ldi	r24, 0x0A	; 10
 63c:	98 9e       	mul	r9, r24
 63e:	20 0d       	add	r18, r0
 640:	11 24       	eor	r1, r1
 642:	92 2e       	mov	r9, r18
 644:	11 c0       	rjmp	.+34     	; 0x668 <vfprintf+0xe6>
 646:	ea e0       	ldi	r30, 0x0A	; 10
 648:	2e 9e       	mul	r2, r30
 64a:	20 0d       	add	r18, r0
 64c:	11 24       	eor	r1, r1
 64e:	22 2e       	mov	r2, r18
 650:	f3 2d       	mov	r31, r3
 652:	f0 62       	ori	r31, 0x20	; 32
 654:	3f 2e       	mov	r3, r31
 656:	08 c0       	rjmp	.+16     	; 0x668 <vfprintf+0xe6>
 658:	8c 36       	cpi	r24, 0x6C	; 108
 65a:	21 f4       	brne	.+8      	; 0x664 <vfprintf+0xe2>
 65c:	83 2d       	mov	r24, r3
 65e:	80 68       	ori	r24, 0x80	; 128
 660:	38 2e       	mov	r3, r24
 662:	02 c0       	rjmp	.+4      	; 0x668 <vfprintf+0xe6>
 664:	88 36       	cpi	r24, 0x68	; 104
 666:	41 f4       	brne	.+16     	; 0x678 <vfprintf+0xf6>
 668:	f7 01       	movw	r30, r14
 66a:	93 fd       	sbrc	r25, 3
 66c:	85 91       	lpm	r24, Z+
 66e:	93 ff       	sbrs	r25, 3
 670:	81 91       	ld	r24, Z+
 672:	7f 01       	movw	r14, r30
 674:	81 11       	cpse	r24, r1
 676:	b3 cf       	rjmp	.-154    	; 0x5de <vfprintf+0x5c>
 678:	98 2f       	mov	r25, r24
 67a:	9f 7d       	andi	r25, 0xDF	; 223
 67c:	95 54       	subi	r25, 0x45	; 69
 67e:	93 30       	cpi	r25, 0x03	; 3
 680:	28 f4       	brcc	.+10     	; 0x68c <vfprintf+0x10a>
 682:	0c 5f       	subi	r16, 0xFC	; 252
 684:	1f 4f       	sbci	r17, 0xFF	; 255
 686:	9f e3       	ldi	r25, 0x3F	; 63
 688:	99 83       	std	Y+1, r25	; 0x01
 68a:	0d c0       	rjmp	.+26     	; 0x6a6 <vfprintf+0x124>
 68c:	83 36       	cpi	r24, 0x63	; 99
 68e:	31 f0       	breq	.+12     	; 0x69c <vfprintf+0x11a>
 690:	83 37       	cpi	r24, 0x73	; 115
 692:	71 f0       	breq	.+28     	; 0x6b0 <vfprintf+0x12e>
 694:	83 35       	cpi	r24, 0x53	; 83
 696:	09 f0       	breq	.+2      	; 0x69a <vfprintf+0x118>
 698:	59 c0       	rjmp	.+178    	; 0x74c <vfprintf+0x1ca>
 69a:	21 c0       	rjmp	.+66     	; 0x6de <vfprintf+0x15c>
 69c:	f8 01       	movw	r30, r16
 69e:	80 81       	ld	r24, Z
 6a0:	89 83       	std	Y+1, r24	; 0x01
 6a2:	0e 5f       	subi	r16, 0xFE	; 254
 6a4:	1f 4f       	sbci	r17, 0xFF	; 255
 6a6:	88 24       	eor	r8, r8
 6a8:	83 94       	inc	r8
 6aa:	91 2c       	mov	r9, r1
 6ac:	53 01       	movw	r10, r6
 6ae:	13 c0       	rjmp	.+38     	; 0x6d6 <vfprintf+0x154>
 6b0:	28 01       	movw	r4, r16
 6b2:	f2 e0       	ldi	r31, 0x02	; 2
 6b4:	4f 0e       	add	r4, r31
 6b6:	51 1c       	adc	r5, r1
 6b8:	f8 01       	movw	r30, r16
 6ba:	a0 80       	ld	r10, Z
 6bc:	b1 80       	ldd	r11, Z+1	; 0x01
 6be:	36 fe       	sbrs	r3, 6
 6c0:	03 c0       	rjmp	.+6      	; 0x6c8 <vfprintf+0x146>
 6c2:	69 2d       	mov	r22, r9
 6c4:	70 e0       	ldi	r23, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <vfprintf+0x14a>
 6c8:	6f ef       	ldi	r22, 0xFF	; 255
 6ca:	7f ef       	ldi	r23, 0xFF	; 255
 6cc:	c5 01       	movw	r24, r10
 6ce:	0e 94 ad 04 	call	0x95a	; 0x95a <strnlen>
 6d2:	4c 01       	movw	r8, r24
 6d4:	82 01       	movw	r16, r4
 6d6:	f3 2d       	mov	r31, r3
 6d8:	ff 77       	andi	r31, 0x7F	; 127
 6da:	3f 2e       	mov	r3, r31
 6dc:	16 c0       	rjmp	.+44     	; 0x70a <vfprintf+0x188>
 6de:	28 01       	movw	r4, r16
 6e0:	22 e0       	ldi	r18, 0x02	; 2
 6e2:	42 0e       	add	r4, r18
 6e4:	51 1c       	adc	r5, r1
 6e6:	f8 01       	movw	r30, r16
 6e8:	a0 80       	ld	r10, Z
 6ea:	b1 80       	ldd	r11, Z+1	; 0x01
 6ec:	36 fe       	sbrs	r3, 6
 6ee:	03 c0       	rjmp	.+6      	; 0x6f6 <vfprintf+0x174>
 6f0:	69 2d       	mov	r22, r9
 6f2:	70 e0       	ldi	r23, 0x00	; 0
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <vfprintf+0x178>
 6f6:	6f ef       	ldi	r22, 0xFF	; 255
 6f8:	7f ef       	ldi	r23, 0xFF	; 255
 6fa:	c5 01       	movw	r24, r10
 6fc:	0e 94 a2 04 	call	0x944	; 0x944 <strnlen_P>
 700:	4c 01       	movw	r8, r24
 702:	f3 2d       	mov	r31, r3
 704:	f0 68       	ori	r31, 0x80	; 128
 706:	3f 2e       	mov	r3, r31
 708:	82 01       	movw	r16, r4
 70a:	33 fc       	sbrc	r3, 3
 70c:	1b c0       	rjmp	.+54     	; 0x744 <vfprintf+0x1c2>
 70e:	82 2d       	mov	r24, r2
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	88 16       	cp	r8, r24
 714:	99 06       	cpc	r9, r25
 716:	b0 f4       	brcc	.+44     	; 0x744 <vfprintf+0x1c2>
 718:	b6 01       	movw	r22, r12
 71a:	80 e2       	ldi	r24, 0x20	; 32
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	0e 94 b8 04 	call	0x970	; 0x970 <fputc>
 722:	2a 94       	dec	r2
 724:	f4 cf       	rjmp	.-24     	; 0x70e <vfprintf+0x18c>
 726:	f5 01       	movw	r30, r10
 728:	37 fc       	sbrc	r3, 7
 72a:	85 91       	lpm	r24, Z+
 72c:	37 fe       	sbrs	r3, 7
 72e:	81 91       	ld	r24, Z+
 730:	5f 01       	movw	r10, r30
 732:	b6 01       	movw	r22, r12
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	0e 94 b8 04 	call	0x970	; 0x970 <fputc>
 73a:	21 10       	cpse	r2, r1
 73c:	2a 94       	dec	r2
 73e:	21 e0       	ldi	r18, 0x01	; 1
 740:	82 1a       	sub	r8, r18
 742:	91 08       	sbc	r9, r1
 744:	81 14       	cp	r8, r1
 746:	91 04       	cpc	r9, r1
 748:	71 f7       	brne	.-36     	; 0x726 <vfprintf+0x1a4>
 74a:	e8 c0       	rjmp	.+464    	; 0x91c <__stack+0x1d>
 74c:	84 36       	cpi	r24, 0x64	; 100
 74e:	11 f0       	breq	.+4      	; 0x754 <vfprintf+0x1d2>
 750:	89 36       	cpi	r24, 0x69	; 105
 752:	41 f5       	brne	.+80     	; 0x7a4 <vfprintf+0x222>
 754:	f8 01       	movw	r30, r16
 756:	37 fe       	sbrs	r3, 7
 758:	07 c0       	rjmp	.+14     	; 0x768 <vfprintf+0x1e6>
 75a:	60 81       	ld	r22, Z
 75c:	71 81       	ldd	r23, Z+1	; 0x01
 75e:	82 81       	ldd	r24, Z+2	; 0x02
 760:	93 81       	ldd	r25, Z+3	; 0x03
 762:	0c 5f       	subi	r16, 0xFC	; 252
 764:	1f 4f       	sbci	r17, 0xFF	; 255
 766:	08 c0       	rjmp	.+16     	; 0x778 <vfprintf+0x1f6>
 768:	60 81       	ld	r22, Z
 76a:	71 81       	ldd	r23, Z+1	; 0x01
 76c:	07 2e       	mov	r0, r23
 76e:	00 0c       	add	r0, r0
 770:	88 0b       	sbc	r24, r24
 772:	99 0b       	sbc	r25, r25
 774:	0e 5f       	subi	r16, 0xFE	; 254
 776:	1f 4f       	sbci	r17, 0xFF	; 255
 778:	f3 2d       	mov	r31, r3
 77a:	ff 76       	andi	r31, 0x6F	; 111
 77c:	3f 2e       	mov	r3, r31
 77e:	97 ff       	sbrs	r25, 7
 780:	09 c0       	rjmp	.+18     	; 0x794 <vfprintf+0x212>
 782:	90 95       	com	r25
 784:	80 95       	com	r24
 786:	70 95       	com	r23
 788:	61 95       	neg	r22
 78a:	7f 4f       	sbci	r23, 0xFF	; 255
 78c:	8f 4f       	sbci	r24, 0xFF	; 255
 78e:	9f 4f       	sbci	r25, 0xFF	; 255
 790:	f0 68       	ori	r31, 0x80	; 128
 792:	3f 2e       	mov	r3, r31
 794:	2a e0       	ldi	r18, 0x0A	; 10
 796:	30 e0       	ldi	r19, 0x00	; 0
 798:	a3 01       	movw	r20, r6
 79a:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__ultoa_invert>
 79e:	88 2e       	mov	r8, r24
 7a0:	86 18       	sub	r8, r6
 7a2:	45 c0       	rjmp	.+138    	; 0x82e <vfprintf+0x2ac>
 7a4:	85 37       	cpi	r24, 0x75	; 117
 7a6:	31 f4       	brne	.+12     	; 0x7b4 <vfprintf+0x232>
 7a8:	23 2d       	mov	r18, r3
 7aa:	2f 7e       	andi	r18, 0xEF	; 239
 7ac:	b2 2e       	mov	r11, r18
 7ae:	2a e0       	ldi	r18, 0x0A	; 10
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	25 c0       	rjmp	.+74     	; 0x7fe <vfprintf+0x27c>
 7b4:	93 2d       	mov	r25, r3
 7b6:	99 7f       	andi	r25, 0xF9	; 249
 7b8:	b9 2e       	mov	r11, r25
 7ba:	8f 36       	cpi	r24, 0x6F	; 111
 7bc:	c1 f0       	breq	.+48     	; 0x7ee <vfprintf+0x26c>
 7be:	18 f4       	brcc	.+6      	; 0x7c6 <vfprintf+0x244>
 7c0:	88 35       	cpi	r24, 0x58	; 88
 7c2:	79 f0       	breq	.+30     	; 0x7e2 <vfprintf+0x260>
 7c4:	b5 c0       	rjmp	.+362    	; 0x930 <__stack+0x31>
 7c6:	80 37       	cpi	r24, 0x70	; 112
 7c8:	19 f0       	breq	.+6      	; 0x7d0 <vfprintf+0x24e>
 7ca:	88 37       	cpi	r24, 0x78	; 120
 7cc:	21 f0       	breq	.+8      	; 0x7d6 <vfprintf+0x254>
 7ce:	b0 c0       	rjmp	.+352    	; 0x930 <__stack+0x31>
 7d0:	e9 2f       	mov	r30, r25
 7d2:	e0 61       	ori	r30, 0x10	; 16
 7d4:	be 2e       	mov	r11, r30
 7d6:	b4 fe       	sbrs	r11, 4
 7d8:	0d c0       	rjmp	.+26     	; 0x7f4 <vfprintf+0x272>
 7da:	fb 2d       	mov	r31, r11
 7dc:	f4 60       	ori	r31, 0x04	; 4
 7de:	bf 2e       	mov	r11, r31
 7e0:	09 c0       	rjmp	.+18     	; 0x7f4 <vfprintf+0x272>
 7e2:	34 fe       	sbrs	r3, 4
 7e4:	0a c0       	rjmp	.+20     	; 0x7fa <vfprintf+0x278>
 7e6:	29 2f       	mov	r18, r25
 7e8:	26 60       	ori	r18, 0x06	; 6
 7ea:	b2 2e       	mov	r11, r18
 7ec:	06 c0       	rjmp	.+12     	; 0x7fa <vfprintf+0x278>
 7ee:	28 e0       	ldi	r18, 0x08	; 8
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	05 c0       	rjmp	.+10     	; 0x7fe <vfprintf+0x27c>
 7f4:	20 e1       	ldi	r18, 0x10	; 16
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	02 c0       	rjmp	.+4      	; 0x7fe <vfprintf+0x27c>
 7fa:	20 e1       	ldi	r18, 0x10	; 16
 7fc:	32 e0       	ldi	r19, 0x02	; 2
 7fe:	f8 01       	movw	r30, r16
 800:	b7 fe       	sbrs	r11, 7
 802:	07 c0       	rjmp	.+14     	; 0x812 <vfprintf+0x290>
 804:	60 81       	ld	r22, Z
 806:	71 81       	ldd	r23, Z+1	; 0x01
 808:	82 81       	ldd	r24, Z+2	; 0x02
 80a:	93 81       	ldd	r25, Z+3	; 0x03
 80c:	0c 5f       	subi	r16, 0xFC	; 252
 80e:	1f 4f       	sbci	r17, 0xFF	; 255
 810:	06 c0       	rjmp	.+12     	; 0x81e <vfprintf+0x29c>
 812:	60 81       	ld	r22, Z
 814:	71 81       	ldd	r23, Z+1	; 0x01
 816:	80 e0       	ldi	r24, 0x00	; 0
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	0e 5f       	subi	r16, 0xFE	; 254
 81c:	1f 4f       	sbci	r17, 0xFF	; 255
 81e:	a3 01       	movw	r20, r6
 820:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__ultoa_invert>
 824:	88 2e       	mov	r8, r24
 826:	86 18       	sub	r8, r6
 828:	fb 2d       	mov	r31, r11
 82a:	ff 77       	andi	r31, 0x7F	; 127
 82c:	3f 2e       	mov	r3, r31
 82e:	36 fe       	sbrs	r3, 6
 830:	0d c0       	rjmp	.+26     	; 0x84c <vfprintf+0x2ca>
 832:	23 2d       	mov	r18, r3
 834:	2e 7f       	andi	r18, 0xFE	; 254
 836:	a2 2e       	mov	r10, r18
 838:	89 14       	cp	r8, r9
 83a:	58 f4       	brcc	.+22     	; 0x852 <vfprintf+0x2d0>
 83c:	34 fe       	sbrs	r3, 4
 83e:	0b c0       	rjmp	.+22     	; 0x856 <vfprintf+0x2d4>
 840:	32 fc       	sbrc	r3, 2
 842:	09 c0       	rjmp	.+18     	; 0x856 <vfprintf+0x2d4>
 844:	83 2d       	mov	r24, r3
 846:	8e 7e       	andi	r24, 0xEE	; 238
 848:	a8 2e       	mov	r10, r24
 84a:	05 c0       	rjmp	.+10     	; 0x856 <vfprintf+0x2d4>
 84c:	b8 2c       	mov	r11, r8
 84e:	a3 2c       	mov	r10, r3
 850:	03 c0       	rjmp	.+6      	; 0x858 <vfprintf+0x2d6>
 852:	b8 2c       	mov	r11, r8
 854:	01 c0       	rjmp	.+2      	; 0x858 <vfprintf+0x2d6>
 856:	b9 2c       	mov	r11, r9
 858:	a4 fe       	sbrs	r10, 4
 85a:	0f c0       	rjmp	.+30     	; 0x87a <vfprintf+0x2f8>
 85c:	fe 01       	movw	r30, r28
 85e:	e8 0d       	add	r30, r8
 860:	f1 1d       	adc	r31, r1
 862:	80 81       	ld	r24, Z
 864:	80 33       	cpi	r24, 0x30	; 48
 866:	21 f4       	brne	.+8      	; 0x870 <vfprintf+0x2ee>
 868:	9a 2d       	mov	r25, r10
 86a:	99 7e       	andi	r25, 0xE9	; 233
 86c:	a9 2e       	mov	r10, r25
 86e:	09 c0       	rjmp	.+18     	; 0x882 <vfprintf+0x300>
 870:	a2 fe       	sbrs	r10, 2
 872:	06 c0       	rjmp	.+12     	; 0x880 <vfprintf+0x2fe>
 874:	b3 94       	inc	r11
 876:	b3 94       	inc	r11
 878:	04 c0       	rjmp	.+8      	; 0x882 <vfprintf+0x300>
 87a:	8a 2d       	mov	r24, r10
 87c:	86 78       	andi	r24, 0x86	; 134
 87e:	09 f0       	breq	.+2      	; 0x882 <vfprintf+0x300>
 880:	b3 94       	inc	r11
 882:	a3 fc       	sbrc	r10, 3
 884:	11 c0       	rjmp	.+34     	; 0x8a8 <vfprintf+0x326>
 886:	a0 fe       	sbrs	r10, 0
 888:	06 c0       	rjmp	.+12     	; 0x896 <vfprintf+0x314>
 88a:	b2 14       	cp	r11, r2
 88c:	88 f4       	brcc	.+34     	; 0x8b0 <vfprintf+0x32e>
 88e:	28 0c       	add	r2, r8
 890:	92 2c       	mov	r9, r2
 892:	9b 18       	sub	r9, r11
 894:	0e c0       	rjmp	.+28     	; 0x8b2 <vfprintf+0x330>
 896:	b2 14       	cp	r11, r2
 898:	60 f4       	brcc	.+24     	; 0x8b2 <vfprintf+0x330>
 89a:	b6 01       	movw	r22, r12
 89c:	80 e2       	ldi	r24, 0x20	; 32
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	0e 94 b8 04 	call	0x970	; 0x970 <fputc>
 8a4:	b3 94       	inc	r11
 8a6:	f7 cf       	rjmp	.-18     	; 0x896 <vfprintf+0x314>
 8a8:	b2 14       	cp	r11, r2
 8aa:	18 f4       	brcc	.+6      	; 0x8b2 <vfprintf+0x330>
 8ac:	2b 18       	sub	r2, r11
 8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <vfprintf+0x332>
 8b0:	98 2c       	mov	r9, r8
 8b2:	21 2c       	mov	r2, r1
 8b4:	a4 fe       	sbrs	r10, 4
 8b6:	10 c0       	rjmp	.+32     	; 0x8d8 <vfprintf+0x356>
 8b8:	b6 01       	movw	r22, r12
 8ba:	80 e3       	ldi	r24, 0x30	; 48
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	0e 94 b8 04 	call	0x970	; 0x970 <fputc>
 8c2:	a2 fe       	sbrs	r10, 2
 8c4:	17 c0       	rjmp	.+46     	; 0x8f4 <vfprintf+0x372>
 8c6:	a1 fc       	sbrc	r10, 1
 8c8:	03 c0       	rjmp	.+6      	; 0x8d0 <vfprintf+0x34e>
 8ca:	88 e7       	ldi	r24, 0x78	; 120
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <vfprintf+0x352>
 8d0:	88 e5       	ldi	r24, 0x58	; 88
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	b6 01       	movw	r22, r12
 8d6:	0c c0       	rjmp	.+24     	; 0x8f0 <vfprintf+0x36e>
 8d8:	8a 2d       	mov	r24, r10
 8da:	86 78       	andi	r24, 0x86	; 134
 8dc:	59 f0       	breq	.+22     	; 0x8f4 <vfprintf+0x372>
 8de:	a1 fe       	sbrs	r10, 1
 8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <vfprintf+0x364>
 8e2:	8b e2       	ldi	r24, 0x2B	; 43
 8e4:	01 c0       	rjmp	.+2      	; 0x8e8 <vfprintf+0x366>
 8e6:	80 e2       	ldi	r24, 0x20	; 32
 8e8:	a7 fc       	sbrc	r10, 7
 8ea:	8d e2       	ldi	r24, 0x2D	; 45
 8ec:	b6 01       	movw	r22, r12
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	0e 94 b8 04 	call	0x970	; 0x970 <fputc>
 8f4:	89 14       	cp	r8, r9
 8f6:	38 f4       	brcc	.+14     	; 0x906 <__stack+0x7>
 8f8:	b6 01       	movw	r22, r12
 8fa:	80 e3       	ldi	r24, 0x30	; 48
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	0e 94 b8 04 	call	0x970	; 0x970 <fputc>
 902:	9a 94       	dec	r9
 904:	f7 cf       	rjmp	.-18     	; 0x8f4 <vfprintf+0x372>
 906:	8a 94       	dec	r8
 908:	f3 01       	movw	r30, r6
 90a:	e8 0d       	add	r30, r8
 90c:	f1 1d       	adc	r31, r1
 90e:	80 81       	ld	r24, Z
 910:	b6 01       	movw	r22, r12
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	0e 94 b8 04 	call	0x970	; 0x970 <fputc>
 918:	81 10       	cpse	r8, r1
 91a:	f5 cf       	rjmp	.-22     	; 0x906 <__stack+0x7>
 91c:	22 20       	and	r2, r2
 91e:	09 f4       	brne	.+2      	; 0x922 <__stack+0x23>
 920:	42 ce       	rjmp	.-892    	; 0x5a6 <vfprintf+0x24>
 922:	b6 01       	movw	r22, r12
 924:	80 e2       	ldi	r24, 0x20	; 32
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	0e 94 b8 04 	call	0x970	; 0x970 <fputc>
 92c:	2a 94       	dec	r2
 92e:	f6 cf       	rjmp	.-20     	; 0x91c <__stack+0x1d>
 930:	f6 01       	movw	r30, r12
 932:	86 81       	ldd	r24, Z+6	; 0x06
 934:	97 81       	ldd	r25, Z+7	; 0x07
 936:	02 c0       	rjmp	.+4      	; 0x93c <__stack+0x3d>
 938:	8f ef       	ldi	r24, 0xFF	; 255
 93a:	9f ef       	ldi	r25, 0xFF	; 255
 93c:	2b 96       	adiw	r28, 0x0b	; 11
 93e:	e2 e1       	ldi	r30, 0x12	; 18
 940:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__epilogue_restores__>

00000944 <strnlen_P>:
 944:	fc 01       	movw	r30, r24
 946:	05 90       	lpm	r0, Z+
 948:	61 50       	subi	r22, 0x01	; 1
 94a:	70 40       	sbci	r23, 0x00	; 0
 94c:	01 10       	cpse	r0, r1
 94e:	d8 f7       	brcc	.-10     	; 0x946 <strnlen_P+0x2>
 950:	80 95       	com	r24
 952:	90 95       	com	r25
 954:	8e 0f       	add	r24, r30
 956:	9f 1f       	adc	r25, r31
 958:	08 95       	ret

0000095a <strnlen>:
 95a:	fc 01       	movw	r30, r24
 95c:	61 50       	subi	r22, 0x01	; 1
 95e:	70 40       	sbci	r23, 0x00	; 0
 960:	01 90       	ld	r0, Z+
 962:	01 10       	cpse	r0, r1
 964:	d8 f7       	brcc	.-10     	; 0x95c <strnlen+0x2>
 966:	80 95       	com	r24
 968:	90 95       	com	r25
 96a:	8e 0f       	add	r24, r30
 96c:	9f 1f       	adc	r25, r31
 96e:	08 95       	ret

00000970 <fputc>:
 970:	0f 93       	push	r16
 972:	1f 93       	push	r17
 974:	cf 93       	push	r28
 976:	df 93       	push	r29
 978:	fb 01       	movw	r30, r22
 97a:	23 81       	ldd	r18, Z+3	; 0x03
 97c:	21 fd       	sbrc	r18, 1
 97e:	03 c0       	rjmp	.+6      	; 0x986 <fputc+0x16>
 980:	8f ef       	ldi	r24, 0xFF	; 255
 982:	9f ef       	ldi	r25, 0xFF	; 255
 984:	2c c0       	rjmp	.+88     	; 0x9de <fputc+0x6e>
 986:	22 ff       	sbrs	r18, 2
 988:	16 c0       	rjmp	.+44     	; 0x9b6 <fputc+0x46>
 98a:	46 81       	ldd	r20, Z+6	; 0x06
 98c:	57 81       	ldd	r21, Z+7	; 0x07
 98e:	24 81       	ldd	r18, Z+4	; 0x04
 990:	35 81       	ldd	r19, Z+5	; 0x05
 992:	42 17       	cp	r20, r18
 994:	53 07       	cpc	r21, r19
 996:	44 f4       	brge	.+16     	; 0x9a8 <fputc+0x38>
 998:	a0 81       	ld	r26, Z
 99a:	b1 81       	ldd	r27, Z+1	; 0x01
 99c:	9d 01       	movw	r18, r26
 99e:	2f 5f       	subi	r18, 0xFF	; 255
 9a0:	3f 4f       	sbci	r19, 0xFF	; 255
 9a2:	31 83       	std	Z+1, r19	; 0x01
 9a4:	20 83       	st	Z, r18
 9a6:	8c 93       	st	X, r24
 9a8:	26 81       	ldd	r18, Z+6	; 0x06
 9aa:	37 81       	ldd	r19, Z+7	; 0x07
 9ac:	2f 5f       	subi	r18, 0xFF	; 255
 9ae:	3f 4f       	sbci	r19, 0xFF	; 255
 9b0:	37 83       	std	Z+7, r19	; 0x07
 9b2:	26 83       	std	Z+6, r18	; 0x06
 9b4:	14 c0       	rjmp	.+40     	; 0x9de <fputc+0x6e>
 9b6:	8b 01       	movw	r16, r22
 9b8:	ec 01       	movw	r28, r24
 9ba:	fb 01       	movw	r30, r22
 9bc:	00 84       	ldd	r0, Z+8	; 0x08
 9be:	f1 85       	ldd	r31, Z+9	; 0x09
 9c0:	e0 2d       	mov	r30, r0
 9c2:	09 95       	icall
 9c4:	89 2b       	or	r24, r25
 9c6:	e1 f6       	brne	.-72     	; 0x980 <fputc+0x10>
 9c8:	d8 01       	movw	r26, r16
 9ca:	16 96       	adiw	r26, 0x06	; 6
 9cc:	8d 91       	ld	r24, X+
 9ce:	9c 91       	ld	r25, X
 9d0:	17 97       	sbiw	r26, 0x07	; 7
 9d2:	01 96       	adiw	r24, 0x01	; 1
 9d4:	17 96       	adiw	r26, 0x07	; 7
 9d6:	9c 93       	st	X, r25
 9d8:	8e 93       	st	-X, r24
 9da:	16 97       	sbiw	r26, 0x06	; 6
 9dc:	ce 01       	movw	r24, r28
 9de:	df 91       	pop	r29
 9e0:	cf 91       	pop	r28
 9e2:	1f 91       	pop	r17
 9e4:	0f 91       	pop	r16
 9e6:	08 95       	ret

000009e8 <__ultoa_invert>:
 9e8:	fa 01       	movw	r30, r20
 9ea:	aa 27       	eor	r26, r26
 9ec:	28 30       	cpi	r18, 0x08	; 8
 9ee:	51 f1       	breq	.+84     	; 0xa44 <__ultoa_invert+0x5c>
 9f0:	20 31       	cpi	r18, 0x10	; 16
 9f2:	81 f1       	breq	.+96     	; 0xa54 <__ultoa_invert+0x6c>
 9f4:	e8 94       	clt
 9f6:	6f 93       	push	r22
 9f8:	6e 7f       	andi	r22, 0xFE	; 254
 9fa:	6e 5f       	subi	r22, 0xFE	; 254
 9fc:	7f 4f       	sbci	r23, 0xFF	; 255
 9fe:	8f 4f       	sbci	r24, 0xFF	; 255
 a00:	9f 4f       	sbci	r25, 0xFF	; 255
 a02:	af 4f       	sbci	r26, 0xFF	; 255
 a04:	b1 e0       	ldi	r27, 0x01	; 1
 a06:	3e d0       	rcall	.+124    	; 0xa84 <__ultoa_invert+0x9c>
 a08:	b4 e0       	ldi	r27, 0x04	; 4
 a0a:	3c d0       	rcall	.+120    	; 0xa84 <__ultoa_invert+0x9c>
 a0c:	67 0f       	add	r22, r23
 a0e:	78 1f       	adc	r23, r24
 a10:	89 1f       	adc	r24, r25
 a12:	9a 1f       	adc	r25, r26
 a14:	a1 1d       	adc	r26, r1
 a16:	68 0f       	add	r22, r24
 a18:	79 1f       	adc	r23, r25
 a1a:	8a 1f       	adc	r24, r26
 a1c:	91 1d       	adc	r25, r1
 a1e:	a1 1d       	adc	r26, r1
 a20:	6a 0f       	add	r22, r26
 a22:	71 1d       	adc	r23, r1
 a24:	81 1d       	adc	r24, r1
 a26:	91 1d       	adc	r25, r1
 a28:	a1 1d       	adc	r26, r1
 a2a:	20 d0       	rcall	.+64     	; 0xa6c <__ultoa_invert+0x84>
 a2c:	09 f4       	brne	.+2      	; 0xa30 <__ultoa_invert+0x48>
 a2e:	68 94       	set
 a30:	3f 91       	pop	r19
 a32:	2a e0       	ldi	r18, 0x0A	; 10
 a34:	26 9f       	mul	r18, r22
 a36:	11 24       	eor	r1, r1
 a38:	30 19       	sub	r19, r0
 a3a:	30 5d       	subi	r19, 0xD0	; 208
 a3c:	31 93       	st	Z+, r19
 a3e:	de f6       	brtc	.-74     	; 0x9f6 <__ultoa_invert+0xe>
 a40:	cf 01       	movw	r24, r30
 a42:	08 95       	ret
 a44:	46 2f       	mov	r20, r22
 a46:	47 70       	andi	r20, 0x07	; 7
 a48:	40 5d       	subi	r20, 0xD0	; 208
 a4a:	41 93       	st	Z+, r20
 a4c:	b3 e0       	ldi	r27, 0x03	; 3
 a4e:	0f d0       	rcall	.+30     	; 0xa6e <__ultoa_invert+0x86>
 a50:	c9 f7       	brne	.-14     	; 0xa44 <__ultoa_invert+0x5c>
 a52:	f6 cf       	rjmp	.-20     	; 0xa40 <__ultoa_invert+0x58>
 a54:	46 2f       	mov	r20, r22
 a56:	4f 70       	andi	r20, 0x0F	; 15
 a58:	40 5d       	subi	r20, 0xD0	; 208
 a5a:	4a 33       	cpi	r20, 0x3A	; 58
 a5c:	18 f0       	brcs	.+6      	; 0xa64 <__ultoa_invert+0x7c>
 a5e:	49 5d       	subi	r20, 0xD9	; 217
 a60:	31 fd       	sbrc	r19, 1
 a62:	40 52       	subi	r20, 0x20	; 32
 a64:	41 93       	st	Z+, r20
 a66:	02 d0       	rcall	.+4      	; 0xa6c <__ultoa_invert+0x84>
 a68:	a9 f7       	brne	.-22     	; 0xa54 <__ultoa_invert+0x6c>
 a6a:	ea cf       	rjmp	.-44     	; 0xa40 <__ultoa_invert+0x58>
 a6c:	b4 e0       	ldi	r27, 0x04	; 4
 a6e:	a6 95       	lsr	r26
 a70:	97 95       	ror	r25
 a72:	87 95       	ror	r24
 a74:	77 95       	ror	r23
 a76:	67 95       	ror	r22
 a78:	ba 95       	dec	r27
 a7a:	c9 f7       	brne	.-14     	; 0xa6e <__ultoa_invert+0x86>
 a7c:	00 97       	sbiw	r24, 0x00	; 0
 a7e:	61 05       	cpc	r22, r1
 a80:	71 05       	cpc	r23, r1
 a82:	08 95       	ret
 a84:	9b 01       	movw	r18, r22
 a86:	ac 01       	movw	r20, r24
 a88:	0a 2e       	mov	r0, r26
 a8a:	06 94       	lsr	r0
 a8c:	57 95       	ror	r21
 a8e:	47 95       	ror	r20
 a90:	37 95       	ror	r19
 a92:	27 95       	ror	r18
 a94:	ba 95       	dec	r27
 a96:	c9 f7       	brne	.-14     	; 0xa8a <__ultoa_invert+0xa2>
 a98:	62 0f       	add	r22, r18
 a9a:	73 1f       	adc	r23, r19
 a9c:	84 1f       	adc	r24, r20
 a9e:	95 1f       	adc	r25, r21
 aa0:	a0 1d       	adc	r26, r0
 aa2:	08 95       	ret

00000aa4 <__prologue_saves__>:
 aa4:	2f 92       	push	r2
 aa6:	3f 92       	push	r3
 aa8:	4f 92       	push	r4
 aaa:	5f 92       	push	r5
 aac:	6f 92       	push	r6
 aae:	7f 92       	push	r7
 ab0:	8f 92       	push	r8
 ab2:	9f 92       	push	r9
 ab4:	af 92       	push	r10
 ab6:	bf 92       	push	r11
 ab8:	cf 92       	push	r12
 aba:	df 92       	push	r13
 abc:	ef 92       	push	r14
 abe:	ff 92       	push	r15
 ac0:	0f 93       	push	r16
 ac2:	1f 93       	push	r17
 ac4:	cf 93       	push	r28
 ac6:	df 93       	push	r29
 ac8:	cd b7       	in	r28, 0x3d	; 61
 aca:	de b7       	in	r29, 0x3e	; 62
 acc:	ca 1b       	sub	r28, r26
 ace:	db 0b       	sbc	r29, r27
 ad0:	0f b6       	in	r0, 0x3f	; 63
 ad2:	f8 94       	cli
 ad4:	de bf       	out	0x3e, r29	; 62
 ad6:	0f be       	out	0x3f, r0	; 63
 ad8:	cd bf       	out	0x3d, r28	; 61
 ada:	09 94       	ijmp

00000adc <__epilogue_restores__>:
 adc:	2a 88       	ldd	r2, Y+18	; 0x12
 ade:	39 88       	ldd	r3, Y+17	; 0x11
 ae0:	48 88       	ldd	r4, Y+16	; 0x10
 ae2:	5f 84       	ldd	r5, Y+15	; 0x0f
 ae4:	6e 84       	ldd	r6, Y+14	; 0x0e
 ae6:	7d 84       	ldd	r7, Y+13	; 0x0d
 ae8:	8c 84       	ldd	r8, Y+12	; 0x0c
 aea:	9b 84       	ldd	r9, Y+11	; 0x0b
 aec:	aa 84       	ldd	r10, Y+10	; 0x0a
 aee:	b9 84       	ldd	r11, Y+9	; 0x09
 af0:	c8 84       	ldd	r12, Y+8	; 0x08
 af2:	df 80       	ldd	r13, Y+7	; 0x07
 af4:	ee 80       	ldd	r14, Y+6	; 0x06
 af6:	fd 80       	ldd	r15, Y+5	; 0x05
 af8:	0c 81       	ldd	r16, Y+4	; 0x04
 afa:	1b 81       	ldd	r17, Y+3	; 0x03
 afc:	aa 81       	ldd	r26, Y+2	; 0x02
 afe:	b9 81       	ldd	r27, Y+1	; 0x01
 b00:	ce 0f       	add	r28, r30
 b02:	d1 1d       	adc	r29, r1
 b04:	0f b6       	in	r0, 0x3f	; 63
 b06:	f8 94       	cli
 b08:	de bf       	out	0x3e, r29	; 62
 b0a:	0f be       	out	0x3f, r0	; 63
 b0c:	cd bf       	out	0x3d, r28	; 61
 b0e:	ed 01       	movw	r28, r26
 b10:	08 95       	ret

00000b12 <_exit>:
 b12:	f8 94       	cli

00000b14 <__stop_program>:
 b14:	ff cf       	rjmp	.-2      	; 0xb14 <__stop_program>
