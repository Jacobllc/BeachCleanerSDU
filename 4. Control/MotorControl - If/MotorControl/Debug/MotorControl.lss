
MotorControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  000010b0  00001144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080014a  0080014a  0000118e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000118e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014af  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb0  00000000  00000000  0000289b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d5c  00000000  00000000  0000354b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000041c  00000000  00000000  000042a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e7  00000000  00000000  000046c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000917  00000000  00000000  00004dab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  000056c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_24>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 eb       	ldi	r30, 0xB0	; 176
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 34       	cpi	r26, 0x4A	; 74
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	aa e4       	ldi	r26, 0x4A	; 74
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 35       	cpi	r26, 0x5D	; 93
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <main>
      9e:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Enable_ADC>:
#include <avr/io.h>


void Enable_ADC(void){
	
	ADMUX = (1<<REFS0); // Select Vref = AVcc
      a6:	80 e4       	ldi	r24, 0x40	; 64
      a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADIE)|(1<<ADEN);
      ac:	8f e8       	ldi	r24, 0x8F	; 143
      ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
      b2:	08 95       	ret

000000b4 <adc_read>:
	
}

uint16_t adc_read(uint8_t adc_channel){
	ADMUX &= 0xf0; // clear any prev used channael but keep internal reference
      b4:	ec e7       	ldi	r30, 0x7C	; 124
      b6:	f0 e0       	ldi	r31, 0x00	; 0
      b8:	90 81       	ld	r25, Z
      ba:	90 7f       	andi	r25, 0xF0	; 240
      bc:	90 83       	st	Z, r25
	ADMUX |= adc_channel; // set the desired channel
      be:	90 81       	ld	r25, Z
      c0:	89 2b       	or	r24, r25
      c2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
      c4:	ea e7       	ldi	r30, 0x7A	; 122
      c6:	f0 e0       	ldi	r31, 0x00	; 0
      c8:	80 81       	ld	r24, Z
      ca:	80 64       	ori	r24, 0x40	; 64
      cc:	80 83       	st	Z, r24
	// now wait for the convresion
	//while( (ADCSRA & (1<<ADSC) ) );
	
	// now we have result so return it to the calling function
	return ADC;
      ce:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      d2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
      d6:	08 95       	ret

000000d8 <I2C_recieve>:
		sei();
}

void i2c_transmit_data(uint8_t data)
{		
	TWDR = data;
      d8:	cf 93       	push	r28
      da:	c8 2f       	mov	r28, r24
      dc:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <bytes>
      e0:	81 11       	cpse	r24, r1
      e2:	06 c0       	rjmp	.+12     	; 0xf0 <I2C_recieve+0x18>
      e4:	c0 93 4e 01 	sts	0x014E, r28	; 0x80014e <opcode>
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <bytes>
      ee:	04 c0       	rjmp	.+8      	; 0xf8 <I2C_recieve+0x20>
      f0:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <data>
      f4:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <i2c_service>
      f8:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <data>
      fc:	cf 91       	pop	r28
      fe:	08 95       	ret

00000100 <I2C_data_ACK_request>:
     100:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <i2c_service>
     104:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <data>
     108:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     10c:	08 95       	ret

0000010e <I2C_data_NACK_request>:
     10e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <i2c_service>
     112:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <data>
     116:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     11a:	08 95       	ret

0000011c <i2c_init>:
     11c:	f8 94       	cli
     11e:	88 0f       	add	r24, r24
     120:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
     124:	85 ec       	ldi	r24, 0xC5	; 197
     126:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     12a:	78 94       	sei
     12c:	08 95       	ret

0000012e <set_data>:
}

void set_data(uint8_t value)
{
	data = value;
     12e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <data>
     132:	08 95       	ret

00000134 <__vector_24>:
}


 
ISR(TWI_vect)
{
     134:	1f 92       	push	r1
     136:	0f 92       	push	r0
     138:	0f b6       	in	r0, 0x3f	; 63
     13a:	0f 92       	push	r0
     13c:	11 24       	eor	r1, r1
     13e:	2f 93       	push	r18
     140:	3f 93       	push	r19
     142:	4f 93       	push	r20
     144:	5f 93       	push	r21
     146:	6f 93       	push	r22
     148:	7f 93       	push	r23
     14a:	8f 93       	push	r24
     14c:	9f 93       	push	r25
     14e:	af 93       	push	r26
     150:	bf 93       	push	r27
     152:	ef 93       	push	r30
     154:	ff 93       	push	r31
	switch(TW_STATUS)
     156:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     15a:	88 7f       	andi	r24, 0xF8	; 248
     15c:	80 38       	cpi	r24, 0x80	; 128
     15e:	49 f0       	breq	.+18     	; 0x172 <__vector_24+0x3e>
     160:	18 f4       	brcc	.+6      	; 0x168 <__vector_24+0x34>
     162:	88 23       	and	r24, r24
     164:	d1 f0       	breq	.+52     	; 0x19a <__vector_24+0x66>
     166:	1f c0       	rjmp	.+62     	; 0x1a6 <__vector_24+0x72>
     168:	88 3a       	cpi	r24, 0xA8	; 168
     16a:	59 f0       	breq	.+22     	; 0x182 <__vector_24+0x4e>
     16c:	88 3b       	cpi	r24, 0xB8	; 184
     16e:	79 f0       	breq	.+30     	; 0x18e <__vector_24+0x5a>
     170:	1a c0       	rjmp	.+52     	; 0x1a6 <__vector_24+0x72>
	{
		case TW_SR_DATA_ACK:
		// received data from master, call the receive callback
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     172:	85 ec       	ldi	r24, 0xC5	; 197
     174:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		I2C_recieve(TWDR);
     178:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     17c:	0e 94 6c 00 	call	0xd8	; 0xd8 <I2C_recieve>
		break;
     180:	15 c0       	rjmp	.+42     	; 0x1ac <__vector_24+0x78>
		
		case TW_ST_SLA_ACK:
		// master is requesting data using NACK,master expects only one additional byte. call the request callback
		I2C_data_NACK_request();
     182:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_data_NACK_request>
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     186:	85 ec       	ldi	r24, 0xC5	; 197
     188:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
     18c:	0f c0       	rjmp	.+30     	; 0x1ac <__vector_24+0x78>
		
		case TW_ST_DATA_ACK:
		// master is requesting data using ACK, master expects multiple bytes. call the request callback
		I2C_data_ACK_request();
     18e:	0e 94 80 00 	call	0x100	; 0x100 <I2C_data_ACK_request>
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     192:	85 ec       	ldi	r24, 0xC5	; 197
     194:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
     198:	09 c0       	rjmp	.+18     	; 0x1ac <__vector_24+0x78>
		
		case TW_BUS_ERROR:
		// some sort of erroneous state, prepare TWI to be readdressed
		TWCR = 0;
     19a:	ec eb       	ldi	r30, 0xBC	; 188
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	10 82       	st	Z, r1
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     1a0:	85 ec       	ldi	r24, 0xC5	; 197
     1a2:	80 83       	st	Z, r24
		break;
     1a4:	03 c0       	rjmp	.+6      	; 0x1ac <__vector_24+0x78>
		
		default:
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     1a6:	85 ec       	ldi	r24, 0xC5	; 197
     1a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
	}
}
     1ac:	ff 91       	pop	r31
     1ae:	ef 91       	pop	r30
     1b0:	bf 91       	pop	r27
     1b2:	af 91       	pop	r26
     1b4:	9f 91       	pop	r25
     1b6:	8f 91       	pop	r24
     1b8:	7f 91       	pop	r23
     1ba:	6f 91       	pop	r22
     1bc:	5f 91       	pop	r21
     1be:	4f 91       	pop	r20
     1c0:	3f 91       	pop	r19
     1c2:	2f 91       	pop	r18
     1c4:	0f 90       	pop	r0
     1c6:	0f be       	out	0x3f, r0	; 63
     1c8:	0f 90       	pop	r0
     1ca:	1f 90       	pop	r1
     1cc:	18 95       	reti

000001ce <IO_init>:


void IO_init(void){	///////////////////////// Initial Pin Setup
	
	// bit order 7 6 5 4 3 2 1 0
	DDRB  = 0b00001011;
     1ce:	8b e0       	ldi	r24, 0x0B	; 11
     1d0:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000000;
     1d2:	15 b8       	out	0x05, r1	; 5
	
	DDRC  = 0b00001111;
     1d4:	8f e0       	ldi	r24, 0x0F	; 15
     1d6:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b00000000;
     1d8:	18 b8       	out	0x08, r1	; 8
	
	DDRD  = 0b11101000;
     1da:	88 ee       	ldi	r24, 0xE8	; 232
     1dc:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000000;
     1de:	1b b8       	out	0x0b, r1	; 11
     1e0:	08 95       	ret

000001e2 <main>:
//						Global Variables
char status = 10;

int main(void)
{
	i2c_init(I2C_ADDR);														//in this we only print the received data and echo it back when data is requested from master
     1e2:	81 e4       	ldi	r24, 0x41	; 65
     1e4:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_init>
	uart_init();   // open the communication to the microcontroller
     1e8:	0e 94 a4 03 	call	0x748	; 0x748 <uart_init>
	io_redirect(); // redirect input and output to the uart	
     1ec:	0e 94 b5 03 	call	0x76a	; 0x76a <io_redirect>
	IO_init();	   //
     1f0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <IO_init>
	TimersInit();
     1f4:	0e 94 59 02 	call	0x4b2	; 0x4b2 <TimersInit>
	Enable_ADC();	
     1f8:	0e 94 53 00 	call	0xa6	; 0xa6 <Enable_ADC>
	sei(); // Enable interrupts
     1fc:	78 94       	sei
     1fe:	08 c0       	rjmp	.+16     	; 0x210 <main+0x2e>
			//CalculatePwm(error, zone);	
			//StartDrive();
			//Sorting(sortState);
			

			adc_result = adc_read(ADC_Channel);
     200:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
     204:	0e 94 5a 00 	call	0xb4	; 0xb4 <adc_read>
     208:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <adc_result+0x1>
     20c:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <adc_result>
	
		
    while(1) 
    {	
		
		while(status == 10){
     210:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     214:	8a 30       	cpi	r24, 0x0A	; 10
     216:	a1 f3       	breq	.-24     	; 0x200 <main+0x1e>
			
		}
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 							
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 

		while(status == 20){
     218:	84 31       	cpi	r24, 0x14	; 20
     21a:	d1 f7       	brne	.-12     	; 0x210 <main+0x2e>
			// printf("Not Safe to run!  \n");	
			StopDrive();
     21c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <StopDrive>
			
		}
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 							
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 

		while(status == 20){
     220:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     224:	84 31       	cpi	r24, 0x14	; 20
     226:	d1 f3       	breq	.-12     	; 0x21c <main+0x3a>
     228:	f3 cf       	rjmp	.-26     	; 0x210 <main+0x2e>

0000022a <__vector_21>:

		
	}
}

ISR(ADC_vect){
     22a:	1f 92       	push	r1
     22c:	0f 92       	push	r0
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	0f 92       	push	r0
     232:	11 24       	eor	r1, r1
     234:	2f 93       	push	r18
     236:	3f 93       	push	r19
     238:	4f 93       	push	r20
     23a:	5f 93       	push	r21
     23c:	6f 93       	push	r22
     23e:	7f 93       	push	r23
     240:	8f 93       	push	r24
     242:	9f 93       	push	r25
     244:	af 93       	push	r26
     246:	bf 93       	push	r27
     248:	ef 93       	push	r30
     24a:	ff 93       	push	r31
	switch(ADMUX){
     24c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     250:	81 34       	cpi	r24, 0x41	; 65
     252:	81 f0       	breq	.+32     	; 0x274 <__vector_21+0x4a>
     254:	18 f4       	brcc	.+6      	; 0x25c <__vector_21+0x32>
     256:	80 34       	cpi	r24, 0x40	; 64
     258:	31 f0       	breq	.+12     	; 0x266 <__vector_21+0x3c>
     25a:	20 c0       	rjmp	.+64     	; 0x29c <__vector_21+0x72>
     25c:	82 34       	cpi	r24, 0x42	; 66
     25e:	89 f0       	breq	.+34     	; 0x282 <__vector_21+0x58>
     260:	83 34       	cpi	r24, 0x43	; 67
     262:	b1 f0       	breq	.+44     	; 0x290 <__vector_21+0x66>
     264:	1b c0       	rjmp	.+54     	; 0x29c <__vector_21+0x72>
			case 0x40:
			//printf("ADC1 RESULT = %d\n",adc_result);
			//printf("ADC CHANNEL 0\n");
			Max_Curren = 31;
     266:	8f e1       	ldi	r24, 0x1F	; 31
     268:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <Max_Curren>
			ADC_Channel = 1;
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end>
			break;
     272:	18 c0       	rjmp	.+48     	; 0x2a4 <__vector_21+0x7a>
			
			case 0x41:
			//printf("ADC2 RESULT = %d\n",adc_result);
			//printf("ADC CHANNEL 1\n");
			Max_Curren = 32;
     274:	80 e2       	ldi	r24, 0x20	; 32
     276:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <Max_Curren>
			ADC_Channel = 2;
     27a:	82 e0       	ldi	r24, 0x02	; 2
     27c:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end>
			break;
     280:	11 c0       	rjmp	.+34     	; 0x2a4 <__vector_21+0x7a>
			
			case 0x42:
			//printf("ADC3 RESULT = %d\n",adc_result);
			//printf("ADC CHANNEL 2\n");
			Max_Curren = 33;
     282:	81 e2       	ldi	r24, 0x21	; 33
     284:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <Max_Curren>
			ADC_Channel = 3;
     288:	83 e0       	ldi	r24, 0x03	; 3
     28a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end>
			break;
     28e:	0a c0       	rjmp	.+20     	; 0x2a4 <__vector_21+0x7a>
			
			case 0x43:
			//printf("ADC4 RESULT = %d\n",adc_result);
			//printf("ADC CHANNEL 3\n");
			Max_Curren = 34;
     290:	82 e2       	ldi	r24, 0x22	; 34
     292:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <Max_Curren>
			ADC_Channel = 0;
     296:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__data_end>
			break;
     29a:	04 c0       	rjmp	.+8      	; 0x2a4 <__vector_21+0x7a>
	default:
		printf("Broken!\n");
     29c:	85 e2       	ldi	r24, 0x25	; 37
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	0e 94 5e 05 	call	0xabc	; 0xabc <puts>
		break;
	}
}
     2a4:	ff 91       	pop	r31
     2a6:	ef 91       	pop	r30
     2a8:	bf 91       	pop	r27
     2aa:	af 91       	pop	r26
     2ac:	9f 91       	pop	r25
     2ae:	8f 91       	pop	r24
     2b0:	7f 91       	pop	r23
     2b2:	6f 91       	pop	r22
     2b4:	5f 91       	pop	r21
     2b6:	4f 91       	pop	r20
     2b8:	3f 91       	pop	r19
     2ba:	2f 91       	pop	r18
     2bc:	0f 90       	pop	r0
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	0f 90       	pop	r0
     2c2:	1f 90       	pop	r1
     2c4:	18 95       	reti

000002c6 <__vector_16>:
	
ISR(TIMER0_OVF_vect){}
     2c6:	1f 92       	push	r1
     2c8:	0f 92       	push	r0
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	0f 92       	push	r0
     2ce:	11 24       	eor	r1, r1
     2d0:	0f 90       	pop	r0
     2d2:	0f be       	out	0x3f, r0	; 63
     2d4:	0f 90       	pop	r0
     2d6:	1f 90       	pop	r1
     2d8:	18 95       	reti

000002da <__vector_13>:
	
ISR(TIMER1_OVF_vect){}
     2da:	1f 92       	push	r1
     2dc:	0f 92       	push	r0
     2de:	0f b6       	in	r0, 0x3f	; 63
     2e0:	0f 92       	push	r0
     2e2:	11 24       	eor	r1, r1
     2e4:	0f 90       	pop	r0
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	0f 90       	pop	r0
     2ea:	1f 90       	pop	r1
     2ec:	18 95       	reti

000002ee <__vector_9>:
		
ISR(TIMER2_OVF_vect){}
     2ee:	1f 92       	push	r1
     2f0:	0f 92       	push	r0
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	0f 92       	push	r0
     2f6:	11 24       	eor	r1, r1
     2f8:	0f 90       	pop	r0
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	0f 90       	pop	r0
     2fe:	1f 90       	pop	r1
     300:	18 95       	reti

00000302 <cal_checksum>:
}


void set_opcode(uint8_t value)
{
	opcode = value;
     302:	fc 01       	movw	r30, r24
     304:	70 e0       	ldi	r23, 0x00	; 0
     306:	9b 01       	movw	r18, r22
     308:	21 50       	subi	r18, 0x01	; 1
     30a:	31 09       	sbc	r19, r1
     30c:	16 16       	cp	r1, r22
     30e:	17 06       	cpc	r1, r23
     310:	74 f4       	brge	.+28     	; 0x32e <cal_checksum+0x2c>
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	af 01       	movw	r20, r30
     316:	02 2e       	mov	r0, r18
     318:	02 c0       	rjmp	.+4      	; 0x31e <cal_checksum+0x1c>
     31a:	55 95       	asr	r21
     31c:	47 95       	ror	r20
     31e:	0a 94       	dec	r0
     320:	e2 f7       	brpl	.-8      	; 0x31a <cal_checksum+0x18>
     322:	41 70       	andi	r20, 0x01	; 1
     324:	84 27       	eor	r24, r20
     326:	21 50       	subi	r18, 0x01	; 1
     328:	31 09       	sbc	r19, r1
     32a:	a0 f7       	brcc	.-24     	; 0x314 <cal_checksum+0x12>
     32c:	01 c0       	rjmp	.+2      	; 0x330 <cal_checksum+0x2e>
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	08 95       	ret

00000334 <Motor_Send_Status>:



void Motor_Send_Status(void)
{
	if (bytes==1)
     334:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <bytes>
     338:	81 30       	cpi	r24, 0x01	; 1
     33a:	59 f4       	brne	.+22     	; 0x352 <Motor_Send_Status+0x1e>
	{
		int checksum;
		
		checksum = cal_checksum(status, 8);
     33c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     340:	68 e0       	ldi	r22, 0x08	; 8
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 81 01 	call	0x302	; 0x302 <cal_checksum>
		set_data(checksum);
     348:	0e 94 97 00 	call	0x12e	; 0x12e <set_data>
		bytes=0;
     34c:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <bytes>
     350:	08 95       	ret
	}
	else
	{
		set_data(status);
     352:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     356:	0e 94 97 00 	call	0x12e	; 0x12e <set_data>
		bytes++;
     35a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <bytes>
     35e:	8f 5f       	subi	r24, 0xFF	; 255
     360:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <bytes>
     364:	08 95       	ret

00000366 <Motor_Send_error>:
	}
}
void Motor_Send_error(void)
{
     366:	cf 93       	push	r28
	//printf("Motor Send update \n");
	int new_error=0;
	char received_checksum;
	if (bytes==3)
     368:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <bytes>
     36c:	83 30       	cpi	r24, 0x03	; 3
     36e:	f9 f4       	brne	.+62     	; 0x3ae <Motor_Send_error+0x48>
	{
		received_checksum = data;
     370:	c0 91 4d 01 	lds	r28, 0x014D	; 0x80014d <data>
		int checksum = cal_checksum(new_error, 16);
     374:	60 e1       	ldi	r22, 0x10	; 16
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	0e 94 81 01 	call	0x302	; 0x302 <cal_checksum>
		
		if (checksum==received_checksum)
     37e:	2c 2f       	mov	r18, r28
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	82 17       	cp	r24, r18
     384:	93 07       	cpc	r25, r19
     386:	81 f4       	brne	.+32     	; 0x3a8 <Motor_Send_error+0x42>
		{
			error = new_error;
     388:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <error+0x1>
     38c:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <error>
			printf("after %d \n",error);
     390:	1f 92       	push	r1
     392:	1f 92       	push	r1
     394:	8d e2       	ldi	r24, 0x2D	; 45
     396:	91 e0       	ldi	r25, 0x01	; 1
     398:	9f 93       	push	r25
     39a:	8f 93       	push	r24
     39c:	0e 94 48 05 	call	0xa90	; 0xa90 <printf>
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
		}

		
		bytes=0;
     3a8:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <bytes>
     3ac:	23 c0       	rjmp	.+70     	; 0x3f4 <Motor_Send_error+0x8e>
		
	}
	else
	{
		new_error=new_error + data << (8*(bytes-1));
     3ae:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <data>
		printf("error update %d \n",new_error);
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	01 97       	sbiw	r24, 0x01	; 1
     3b8:	88 0f       	add	r24, r24
     3ba:	99 1f       	adc	r25, r25
     3bc:	88 0f       	add	r24, r24
     3be:	99 1f       	adc	r25, r25
     3c0:	88 0f       	add	r24, r24
     3c2:	99 1f       	adc	r25, r25
     3c4:	a9 01       	movw	r20, r18
     3c6:	02 c0       	rjmp	.+4      	; 0x3cc <Motor_Send_error+0x66>
     3c8:	44 0f       	add	r20, r20
     3ca:	55 1f       	adc	r21, r21
     3cc:	8a 95       	dec	r24
     3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <Motor_Send_error+0x62>
     3d0:	ca 01       	movw	r24, r20
     3d2:	9f 93       	push	r25
     3d4:	4f 93       	push	r20
     3d6:	88 e3       	ldi	r24, 0x38	; 56
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	9f 93       	push	r25
     3dc:	8f 93       	push	r24
     3de:	0e 94 48 05 	call	0xa90	; 0xa90 <printf>
		bytes++;
     3e2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <bytes>
     3e6:	8f 5f       	subi	r24, 0xFF	; 255
     3e8:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <bytes>
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	0f 90       	pop	r0
     3f2:	0f 90       	pop	r0
	
	
	
	
	
}
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <i2c_service>:
}


void i2c_service(void)
{
	switch(opcode)
     3f8:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <opcode>
     3fc:	88 23       	and	r24, r24
     3fe:	19 f0       	breq	.+6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     400:	81 30       	cpi	r24, 0x01	; 1
     402:	21 f0       	breq	.+8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     404:	08 95       	ret
	{
		case 0:
		{
			Motor_Send_Status();
     406:	0e 94 9a 01 	call	0x334	; 0x334 <Motor_Send_Status>
			break;
     40a:	08 95       	ret
		}
		
		case 1:
		{
			Motor_Send_error();
     40c:	0e 94 b3 01 	call	0x366	; 0x366 <Motor_Send_error>
     410:	08 95       	ret

00000412 <T0_init>:
		OCR2A =  (M1_DutyCycle/100)*254;			// DubyCycle Motor 1
		OCR2B =  (M2_DutyCycle/100)*254;			// DutyCycle Motor 2
		_delay_us(1);
	
	}
}
     412:	84 b5       	in	r24, 0x24	; 36
     414:	80 68       	ori	r24, 0x80	; 128
     416:	84 bd       	out	0x24, r24	; 36
     418:	84 b5       	in	r24, 0x24	; 36
     41a:	80 62       	ori	r24, 0x20	; 32
     41c:	84 bd       	out	0x24, r24	; 36
     41e:	84 b5       	in	r24, 0x24	; 36
     420:	8b 60       	ori	r24, 0x0B	; 11
     422:	84 bd       	out	0x24, r24	; 36
     424:	8f ef       	ldi	r24, 0xFF	; 255
     426:	87 bd       	out	0x27, r24	; 39
     428:	88 bd       	out	0x28, r24	; 40
     42a:	85 b5       	in	r24, 0x25	; 37
     42c:	82 60       	ori	r24, 0x02	; 2
     42e:	85 bd       	out	0x25, r24	; 37
     430:	ee e6       	ldi	r30, 0x6E	; 110
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	81 60       	ori	r24, 0x01	; 1
     438:	80 83       	st	Z, r24
     43a:	08 95       	ret

0000043c <T1_init>:
     43c:	e0 e8       	ldi	r30, 0x80	; 128
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	80 81       	ld	r24, Z
     442:	80 68       	ori	r24, 0x80	; 128
     444:	80 83       	st	Z, r24
     446:	80 81       	ld	r24, Z
     448:	80 62       	ori	r24, 0x20	; 32
     44a:	80 83       	st	Z, r24
     44c:	80 81       	ld	r24, Z
     44e:	8b 60       	ori	r24, 0x0B	; 11
     450:	80 83       	st	Z, r24
     452:	88 ee       	ldi	r24, 0xE8	; 232
     454:	93 e0       	ldi	r25, 0x03	; 3
     456:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     45a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     45e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     462:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     466:	e1 e8       	ldi	r30, 0x81	; 129
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	80 81       	ld	r24, Z
     46c:	81 60       	ori	r24, 0x01	; 1
     46e:	80 83       	st	Z, r24
     470:	ef e6       	ldi	r30, 0x6F	; 111
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	80 81       	ld	r24, Z
     476:	81 60       	ori	r24, 0x01	; 1
     478:	80 83       	st	Z, r24
     47a:	08 95       	ret

0000047c <T2_init>:
     47c:	e0 eb       	ldi	r30, 0xB0	; 176
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	80 81       	ld	r24, Z
     482:	80 68       	ori	r24, 0x80	; 128
     484:	80 83       	st	Z, r24
     486:	80 81       	ld	r24, Z
     488:	80 62       	ori	r24, 0x20	; 32
     48a:	80 83       	st	Z, r24
     48c:	80 81       	ld	r24, Z
     48e:	8b 60       	ori	r24, 0x0B	; 11
     490:	80 83       	st	Z, r24
     492:	80 e8       	ldi	r24, 0x80	; 128
     494:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     498:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     49c:	e1 eb       	ldi	r30, 0xB1	; 177
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	80 81       	ld	r24, Z
     4a2:	82 60       	ori	r24, 0x02	; 2
     4a4:	80 83       	st	Z, r24
     4a6:	e0 e7       	ldi	r30, 0x70	; 112
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	80 81       	ld	r24, Z
     4ac:	81 60       	ori	r24, 0x01	; 1
     4ae:	80 83       	st	Z, r24
     4b0:	08 95       	ret

000004b2 <TimersInit>:
     4b2:	0e 94 09 02 	call	0x412	; 0x412 <T0_init>
     4b6:	0e 94 1e 02 	call	0x43c	; 0x43c <T1_init>
     4ba:	0e 94 3e 02 	call	0x47c	; 0x47c <T2_init>
     4be:	08 95       	ret

000004c0 <Sorting>:
     4c0:	81 30       	cpi	r24, 0x01	; 1
     4c2:	51 f4       	brne	.+20     	; 0x4d8 <Sorting+0x18>
     4c4:	8f ef       	ldi	r24, 0xFF	; 255
     4c6:	87 bd       	out	0x27, r24	; 39
     4c8:	88 bd       	out	0x28, r24	; 40
     4ca:	8f ef       	ldi	r24, 0xFF	; 255
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4d2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     4d6:	08 95       	ret
     4d8:	81 11       	cpse	r24, r1
     4da:	06 c0       	rjmp	.+12     	; 0x4e8 <Sorting+0x28>
     4dc:	17 bc       	out	0x27, r1	; 39
     4de:	18 bc       	out	0x28, r1	; 40
     4e0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4e4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     4e8:	08 95       	ret

000004ea <SetDrive>:


void SetDrive(double M1_DutyCycle, double M2_DutyCycle){
     4ea:	8f 92       	push	r8
     4ec:	9f 92       	push	r9
     4ee:	af 92       	push	r10
     4f0:	bf 92       	push	r11
     4f2:	cf 92       	push	r12
     4f4:	df 92       	push	r13
     4f6:	ef 92       	push	r14
     4f8:	ff 92       	push	r15
     4fa:	6b 01       	movw	r12, r22
     4fc:	7c 01       	movw	r14, r24
     4fe:	49 01       	movw	r8, r18
     500:	5a 01       	movw	r10, r20
		
			if(M1_DutyCycle < MPWM_MIN)
     502:	20 e0       	ldi	r18, 0x00	; 0
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	40 ea       	ldi	r20, 0xA0	; 160
     508:	51 e4       	ldi	r21, 0x41	; 65
     50a:	0e 94 c0 03 	call	0x780	; 0x780 <__cmpsf2>
     50e:	88 23       	and	r24, r24
     510:	44 f4       	brge	.+16     	; 0x522 <SetDrive+0x38>
			{
				M1_DutyCycle = MPWM_MIN;
     512:	0f 2e       	mov	r0, r31
     514:	c1 2c       	mov	r12, r1
     516:	d1 2c       	mov	r13, r1
     518:	f0 ea       	ldi	r31, 0xA0	; 160
     51a:	ef 2e       	mov	r14, r31
     51c:	f1 e4       	ldi	r31, 0x41	; 65
     51e:	ff 2e       	mov	r15, r31
     520:	f0 2d       	mov	r31, r0
			}
			
			if (M2_DutyCycle < MPWM_MIN)
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	40 ea       	ldi	r20, 0xA0	; 160
     528:	51 e4       	ldi	r21, 0x41	; 65
     52a:	c5 01       	movw	r24, r10
     52c:	b4 01       	movw	r22, r8
     52e:	0e 94 c0 03 	call	0x780	; 0x780 <__cmpsf2>
     532:	88 23       	and	r24, r24
     534:	0c f4       	brge	.+2      	; 0x538 <SetDrive+0x4e>
     536:	a9 c0       	rjmp	.+338    	; 0x68a <SetDrive+0x1a0>
			{
				M2_DutyCycle = MPWM_MIN;
			}
			
						if(M1_DutyCycle < 0)
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	a9 01       	movw	r20, r18
     53e:	c7 01       	movw	r24, r14
     540:	b6 01       	movw	r22, r12
     542:	0e 94 c0 03 	call	0x780	; 0x780 <__cmpsf2>
     546:	88 23       	and	r24, r24
     548:	1c f4       	brge	.+6      	; 0x550 <SetDrive+0x66>
						{
							M1_DutyCycle = 0;
     54a:	c1 2c       	mov	r12, r1
     54c:	d1 2c       	mov	r13, r1
     54e:	76 01       	movw	r14, r12
						}
						
						if (M2_DutyCycle < 0)
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	a9 01       	movw	r20, r18
     556:	c5 01       	movw	r24, r10
     558:	b4 01       	movw	r22, r8
     55a:	0e 94 c0 03 	call	0x780	; 0x780 <__cmpsf2>
     55e:	88 23       	and	r24, r24
     560:	64 f4       	brge	.+24     	; 0x57a <SetDrive+0x90>
						{
							M2_DutyCycle = 0;
     562:	81 2c       	mov	r8, r1
     564:	91 2c       	mov	r9, r1
     566:	54 01       	movw	r10, r8
     568:	08 c0       	rjmp	.+16     	; 0x57a <SetDrive+0x90>
				M1_DutyCycle = MPWM_MIN;
			}
			
			if (M2_DutyCycle < MPWM_MIN)
			{
				M2_DutyCycle = MPWM_MIN;
     56a:	0f 2e       	mov	r0, r31
     56c:	81 2c       	mov	r8, r1
     56e:	91 2c       	mov	r9, r1
     570:	f0 ea       	ldi	r31, 0xA0	; 160
     572:	af 2e       	mov	r10, r31
     574:	f1 e4       	ldi	r31, 0x41	; 65
     576:	bf 2e       	mov	r11, r31
     578:	f0 2d       	mov	r31, r0
						if (M2_DutyCycle < 0)
						{
							M2_DutyCycle = 0;
						}
						
			if((error > 90) || (error < -90)){
     57a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <error>
     57e:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <error+0x1>
     582:	9c 01       	movw	r18, r24
     584:	26 5a       	subi	r18, 0xA6	; 166
     586:	3f 4f       	sbci	r19, 0xFF	; 255
     588:	25 3b       	cpi	r18, 0xB5	; 181
     58a:	31 05       	cpc	r19, r1
     58c:	08 f4       	brcc	.+2      	; 0x590 <SetDrive+0xa6>
     58e:	56 c0       	rjmp	.+172    	; 0x63c <SetDrive+0x152>
//								   Turning ... 				
							if(error > 90){
     590:	8b 35       	cpi	r24, 0x5B	; 91
     592:	91 05       	cpc	r25, r1
     594:	34 f1       	brlt	.+76     	; 0x5e2 <SetDrive+0xf8>
								PinState(pd7, low);							 // H-Bridge Enable pin Motor 1
     596:	5f 98       	cbi	0x0b, 7	; 11
								PinState(pb0, low);							 // H-Bridge Enable pin Motor 2
     598:	28 98       	cbi	0x05, 0	; 5
								OCR2A =  (M1_DutyCycle/100)*254;			// DubyCycle Motor 1
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	48 ec       	ldi	r20, 0xC8	; 200
     5a0:	52 e4       	ldi	r21, 0x42	; 66
     5a2:	c7 01       	movw	r24, r14
     5a4:	b6 01       	movw	r22, r12
     5a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__divsf3>
     5aa:	20 e0       	ldi	r18, 0x00	; 0
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	4e e7       	ldi	r20, 0x7E	; 126
     5b0:	53 e4       	ldi	r21, 0x43	; 67
     5b2:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__mulsf3>
     5b6:	0e 94 37 04 	call	0x86e	; 0x86e <__fixunssfsi>
     5ba:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
								OCR2B =  (M2_DutyCycle/100)*254;			// DutyCycle Motor 2
     5be:	20 e0       	ldi	r18, 0x00	; 0
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	48 ec       	ldi	r20, 0xC8	; 200
     5c4:	52 e4       	ldi	r21, 0x42	; 66
     5c6:	c5 01       	movw	r24, r10
     5c8:	b4 01       	movw	r22, r8
     5ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__divsf3>
     5ce:	20 e0       	ldi	r18, 0x00	; 0
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	4e e7       	ldi	r20, 0x7E	; 126
     5d4:	53 e4       	ldi	r21, 0x43	; 67
     5d6:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__mulsf3>
     5da:	0e 94 37 04 	call	0x86e	; 0x86e <__fixunssfsi>
     5de:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
							}
//									Turning ... 
									if(error < -90){
     5e2:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <error>
     5e6:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <error+0x1>
     5ea:	86 3a       	cpi	r24, 0xA6	; 166
     5ec:	9f 4f       	sbci	r25, 0xFF	; 255
     5ee:	34 f5       	brge	.+76     	; 0x63c <SetDrive+0x152>
									PinState(pd7, high);							 // H-Bridge Enable pin Motor 1
     5f0:	5f 9a       	sbi	0x0b, 7	; 11
									PinState(pb0, high);							 // H-Bridge Enable pin Motor 2
     5f2:	28 9a       	sbi	0x05, 0	; 5
									OCR2A =  (M1_DutyCycle/100)*254;			// DubyCycle Motor 1
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	48 ec       	ldi	r20, 0xC8	; 200
     5fa:	52 e4       	ldi	r21, 0x42	; 66
     5fc:	c7 01       	movw	r24, r14
     5fe:	b6 01       	movw	r22, r12
     600:	0e 94 c5 03 	call	0x78a	; 0x78a <__divsf3>
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	4e e7       	ldi	r20, 0x7E	; 126
     60a:	53 e4       	ldi	r21, 0x43	; 67
     60c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__mulsf3>
     610:	0e 94 37 04 	call	0x86e	; 0x86e <__fixunssfsi>
     614:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
									OCR2B =  (M2_DutyCycle/100)*254;			// DutyCycle Motor 2
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	48 ec       	ldi	r20, 0xC8	; 200
     61e:	52 e4       	ldi	r21, 0x42	; 66
     620:	c5 01       	movw	r24, r10
     622:	b4 01       	movw	r22, r8
     624:	0e 94 c5 03 	call	0x78a	; 0x78a <__divsf3>
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	4e e7       	ldi	r20, 0x7E	; 126
     62e:	53 e4       	ldi	r21, 0x43	; 67
     630:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__mulsf3>
     634:	0e 94 37 04 	call	0x86e	; 0x86e <__fixunssfsi>
     638:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>

			}
			

//									Turning ...
								PinState(pd7, low);							 // H-Bridge Enable pin Motor 1
     63c:	5f 98       	cbi	0x0b, 7	; 11
								PinState(pb0, low);							 // H-Bridge Enable pin Motor 2
     63e:	28 98       	cbi	0x05, 0	; 5
								OCR2A =  (M1_DutyCycle/100)*254;			// DubyCycle Motor 1
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	48 ec       	ldi	r20, 0xC8	; 200
     646:	52 e4       	ldi	r21, 0x42	; 66
     648:	c7 01       	movw	r24, r14
     64a:	b6 01       	movw	r22, r12
     64c:	0e 94 c5 03 	call	0x78a	; 0x78a <__divsf3>
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	4e e7       	ldi	r20, 0x7E	; 126
     656:	53 e4       	ldi	r21, 0x43	; 67
     658:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__mulsf3>
     65c:	0e 94 37 04 	call	0x86e	; 0x86e <__fixunssfsi>
     660:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
								OCR2B =  (M2_DutyCycle/100)*254;			// DutyCycle Motor 2								
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	48 ec       	ldi	r20, 0xC8	; 200
     66a:	52 e4       	ldi	r21, 0x42	; 66
     66c:	c5 01       	movw	r24, r10
     66e:	b4 01       	movw	r22, r8
     670:	0e 94 c5 03 	call	0x78a	; 0x78a <__divsf3>
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	4e e7       	ldi	r20, 0x7E	; 126
     67a:	53 e4       	ldi	r21, 0x43	; 67
     67c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__mulsf3>
     680:	0e 94 37 04 	call	0x86e	; 0x86e <__fixunssfsi>
     684:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
		PinState(pb4, low);  // L298 in4
				printf("Direc Set \n");
		}
		*/

			}
     688:	16 c0       	rjmp	.+44     	; 0x6b6 <SetDrive+0x1cc>
			if (M2_DutyCycle < MPWM_MIN)
			{
				M2_DutyCycle = MPWM_MIN;
			}
			
						if(M1_DutyCycle < 0)
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	a9 01       	movw	r20, r18
     690:	c7 01       	movw	r24, r14
     692:	b6 01       	movw	r22, r12
     694:	0e 94 c0 03 	call	0x780	; 0x780 <__cmpsf2>
     698:	88 23       	and	r24, r24
     69a:	0c f0       	brlt	.+2      	; 0x69e <SetDrive+0x1b4>
     69c:	66 cf       	rjmp	.-308    	; 0x56a <SetDrive+0x80>
						{
							M1_DutyCycle = 0;
     69e:	c1 2c       	mov	r12, r1
     6a0:	d1 2c       	mov	r13, r1
     6a2:	76 01       	movw	r14, r12
				M1_DutyCycle = MPWM_MIN;
			}
			
			if (M2_DutyCycle < MPWM_MIN)
			{
				M2_DutyCycle = MPWM_MIN;
     6a4:	0f 2e       	mov	r0, r31
     6a6:	81 2c       	mov	r8, r1
     6a8:	91 2c       	mov	r9, r1
     6aa:	f0 ea       	ldi	r31, 0xA0	; 160
     6ac:	af 2e       	mov	r10, r31
     6ae:	f1 e4       	ldi	r31, 0x41	; 65
     6b0:	bf 2e       	mov	r11, r31
     6b2:	f0 2d       	mov	r31, r0
     6b4:	62 cf       	rjmp	.-316    	; 0x57a <SetDrive+0x90>
		PinState(pb4, low);  // L298 in4
				printf("Direc Set \n");
		}
		*/

			}
     6b6:	ff 90       	pop	r15
     6b8:	ef 90       	pop	r14
     6ba:	df 90       	pop	r13
     6bc:	cf 90       	pop	r12
     6be:	bf 90       	pop	r11
     6c0:	af 90       	pop	r10
     6c2:	9f 90       	pop	r9
     6c4:	8f 90       	pop	r8
     6c6:	08 95       	ret

000006c8 <StopDrive>:
		
//////////////////////         Motor functions

void StopDrive(void){
	
	M1_DutyCycle = 0;
     6c8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <M1_DutyCycle>
     6cc:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <M1_DutyCycle+0x1>
     6d0:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <M1_DutyCycle+0x2>
     6d4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <M1_DutyCycle+0x3>
	M2_DutyCycle = 0;
     6d8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <M2_DutyCycle>
     6dc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <M2_DutyCycle+0x1>
     6e0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <M2_DutyCycle+0x2>
     6e4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <M2_DutyCycle+0x3>
	sortState = 0;
     6e8:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <sortState>
	Sorting(sortState);
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	0e 94 60 02 	call	0x4c0	; 0x4c0 <Sorting>
	SetDrive(M1_DutyCycle, M2_DutyCycle);
     6f2:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <M2_DutyCycle>
     6f6:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <M2_DutyCycle+0x1>
     6fa:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <M2_DutyCycle+0x2>
     6fe:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <M2_DutyCycle+0x3>
     702:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <M1_DutyCycle>
     706:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <M1_DutyCycle+0x1>
     70a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <M1_DutyCycle+0x2>
     70e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <M1_DutyCycle+0x3>
     712:	0e 94 75 02 	call	0x4ea	; 0x4ea <SetDrive>
     716:	08 95       	ret

00000718 <uart_putchar>:
		stdout = &uart_output;	//redirect standard output to uart
		stdin  = &uart_input;  //redirect standard input to uart
}
	

void uart_putchar(char c, FILE *stream) {
     718:	cf 93       	push	r28
     71a:	c8 2f       	mov	r28, r24
	if (c == '\n') {
     71c:	8a 30       	cpi	r24, 0x0A	; 10
     71e:	19 f4       	brne	.+6      	; 0x726 <uart_putchar+0xe>
		uart_putchar('\r', stream);
     720:	8d e0       	ldi	r24, 0x0D	; 13
     722:	0e 94 8c 03 	call	0x718	; 0x718 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
     726:	e0 ec       	ldi	r30, 0xC0	; 192
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	80 81       	ld	r24, Z
     72c:	85 ff       	sbrs	r24, 5
     72e:	fd cf       	rjmp	.-6      	; 0x72a <uart_putchar+0x12>
	UDR0 = c;
     730:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
     734:	cf 91       	pop	r28
     736:	08 95       	ret

00000738 <uart_getchar>:

char uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0);
     738:	e0 ec       	ldi	r30, 0xC0	; 192
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	80 81       	ld	r24, Z
     73e:	88 23       	and	r24, r24
     740:	ec f7       	brge	.-6      	; 0x73c <uart_getchar+0x4>
	return UDR0;
     742:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     746:	08 95       	ret

00000748 <uart_init>:
FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);


void uart_init(void) {
	
	UBRR0H = UBRRH_VALUE;
     748:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
     74c:	87 e6       	ldi	r24, 0x67	; 103
     74e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
     752:	e0 ec       	ldi	r30, 0xC0	; 192
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	80 81       	ld	r24, Z
     758:	8d 7f       	andi	r24, 0xFD	; 253
     75a:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
     75c:	86 e0       	ldi	r24, 0x06	; 6
     75e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
     762:	88 e1       	ldi	r24, 0x18	; 24
     764:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     768:	08 95       	ret

0000076a <io_redirect>:
}

void io_redirect(void ){
		
		
		stdout = &uart_output;	//redirect standard output to uart
     76a:	e7 e5       	ldi	r30, 0x57	; 87
     76c:	f1 e0       	ldi	r31, 0x01	; 1
     76e:	87 e1       	ldi	r24, 0x17	; 23
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	93 83       	std	Z+3, r25	; 0x03
     774:	82 83       	std	Z+2, r24	; 0x02
		stdin  = &uart_input;  //redirect standard input to uart
     776:	89 e0       	ldi	r24, 0x09	; 9
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	91 83       	std	Z+1, r25	; 0x01
     77c:	80 83       	st	Z, r24
     77e:	08 95       	ret

00000780 <__cmpsf2>:
     780:	0e 94 66 04 	call	0x8cc	; 0x8cc <__fp_cmp>
     784:	08 f4       	brcc	.+2      	; 0x788 <__cmpsf2+0x8>
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	08 95       	ret

0000078a <__divsf3>:
     78a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__divsf3x>
     78e:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_round>
     792:	0e 94 9a 04 	call	0x934	; 0x934 <__fp_pscB>
     796:	58 f0       	brcs	.+22     	; 0x7ae <__divsf3+0x24>
     798:	0e 94 93 04 	call	0x926	; 0x926 <__fp_pscA>
     79c:	40 f0       	brcs	.+16     	; 0x7ae <__divsf3+0x24>
     79e:	29 f4       	brne	.+10     	; 0x7aa <__divsf3+0x20>
     7a0:	5f 3f       	cpi	r21, 0xFF	; 255
     7a2:	29 f0       	breq	.+10     	; 0x7ae <__divsf3+0x24>
     7a4:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_inf>
     7a8:	51 11       	cpse	r21, r1
     7aa:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__fp_szero>
     7ae:	0c 94 90 04 	jmp	0x920	; 0x920 <__fp_nan>

000007b2 <__divsf3x>:
     7b2:	0e 94 b2 04 	call	0x964	; 0x964 <__fp_split3>
     7b6:	68 f3       	brcs	.-38     	; 0x792 <__divsf3+0x8>

000007b8 <__divsf3_pse>:
     7b8:	99 23       	and	r25, r25
     7ba:	b1 f3       	breq	.-20     	; 0x7a8 <__divsf3+0x1e>
     7bc:	55 23       	and	r21, r21
     7be:	91 f3       	breq	.-28     	; 0x7a4 <__divsf3+0x1a>
     7c0:	95 1b       	sub	r25, r21
     7c2:	55 0b       	sbc	r21, r21
     7c4:	bb 27       	eor	r27, r27
     7c6:	aa 27       	eor	r26, r26
     7c8:	62 17       	cp	r22, r18
     7ca:	73 07       	cpc	r23, r19
     7cc:	84 07       	cpc	r24, r20
     7ce:	38 f0       	brcs	.+14     	; 0x7de <__divsf3_pse+0x26>
     7d0:	9f 5f       	subi	r25, 0xFF	; 255
     7d2:	5f 4f       	sbci	r21, 0xFF	; 255
     7d4:	22 0f       	add	r18, r18
     7d6:	33 1f       	adc	r19, r19
     7d8:	44 1f       	adc	r20, r20
     7da:	aa 1f       	adc	r26, r26
     7dc:	a9 f3       	breq	.-22     	; 0x7c8 <__divsf3_pse+0x10>
     7de:	35 d0       	rcall	.+106    	; 0x84a <__divsf3_pse+0x92>
     7e0:	0e 2e       	mov	r0, r30
     7e2:	3a f0       	brmi	.+14     	; 0x7f2 <__divsf3_pse+0x3a>
     7e4:	e0 e8       	ldi	r30, 0x80	; 128
     7e6:	32 d0       	rcall	.+100    	; 0x84c <__divsf3_pse+0x94>
     7e8:	91 50       	subi	r25, 0x01	; 1
     7ea:	50 40       	sbci	r21, 0x00	; 0
     7ec:	e6 95       	lsr	r30
     7ee:	00 1c       	adc	r0, r0
     7f0:	ca f7       	brpl	.-14     	; 0x7e4 <__divsf3_pse+0x2c>
     7f2:	2b d0       	rcall	.+86     	; 0x84a <__divsf3_pse+0x92>
     7f4:	fe 2f       	mov	r31, r30
     7f6:	29 d0       	rcall	.+82     	; 0x84a <__divsf3_pse+0x92>
     7f8:	66 0f       	add	r22, r22
     7fa:	77 1f       	adc	r23, r23
     7fc:	88 1f       	adc	r24, r24
     7fe:	bb 1f       	adc	r27, r27
     800:	26 17       	cp	r18, r22
     802:	37 07       	cpc	r19, r23
     804:	48 07       	cpc	r20, r24
     806:	ab 07       	cpc	r26, r27
     808:	b0 e8       	ldi	r27, 0x80	; 128
     80a:	09 f0       	breq	.+2      	; 0x80e <__divsf3_pse+0x56>
     80c:	bb 0b       	sbc	r27, r27
     80e:	80 2d       	mov	r24, r0
     810:	bf 01       	movw	r22, r30
     812:	ff 27       	eor	r31, r31
     814:	93 58       	subi	r25, 0x83	; 131
     816:	5f 4f       	sbci	r21, 0xFF	; 255
     818:	3a f0       	brmi	.+14     	; 0x828 <__divsf3_pse+0x70>
     81a:	9e 3f       	cpi	r25, 0xFE	; 254
     81c:	51 05       	cpc	r21, r1
     81e:	78 f0       	brcs	.+30     	; 0x83e <__divsf3_pse+0x86>
     820:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_inf>
     824:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__fp_szero>
     828:	5f 3f       	cpi	r21, 0xFF	; 255
     82a:	e4 f3       	brlt	.-8      	; 0x824 <__divsf3_pse+0x6c>
     82c:	98 3e       	cpi	r25, 0xE8	; 232
     82e:	d4 f3       	brlt	.-12     	; 0x824 <__divsf3_pse+0x6c>
     830:	86 95       	lsr	r24
     832:	77 95       	ror	r23
     834:	67 95       	ror	r22
     836:	b7 95       	ror	r27
     838:	f7 95       	ror	r31
     83a:	9f 5f       	subi	r25, 0xFF	; 255
     83c:	c9 f7       	brne	.-14     	; 0x830 <__divsf3_pse+0x78>
     83e:	88 0f       	add	r24, r24
     840:	91 1d       	adc	r25, r1
     842:	96 95       	lsr	r25
     844:	87 95       	ror	r24
     846:	97 f9       	bld	r25, 7
     848:	08 95       	ret
     84a:	e1 e0       	ldi	r30, 0x01	; 1
     84c:	66 0f       	add	r22, r22
     84e:	77 1f       	adc	r23, r23
     850:	88 1f       	adc	r24, r24
     852:	bb 1f       	adc	r27, r27
     854:	62 17       	cp	r22, r18
     856:	73 07       	cpc	r23, r19
     858:	84 07       	cpc	r24, r20
     85a:	ba 07       	cpc	r27, r26
     85c:	20 f0       	brcs	.+8      	; 0x866 <__divsf3_pse+0xae>
     85e:	62 1b       	sub	r22, r18
     860:	73 0b       	sbc	r23, r19
     862:	84 0b       	sbc	r24, r20
     864:	ba 0b       	sbc	r27, r26
     866:	ee 1f       	adc	r30, r30
     868:	88 f7       	brcc	.-30     	; 0x84c <__divsf3_pse+0x94>
     86a:	e0 95       	com	r30
     86c:	08 95       	ret

0000086e <__fixunssfsi>:
     86e:	0e 94 ba 04 	call	0x974	; 0x974 <__fp_splitA>
     872:	88 f0       	brcs	.+34     	; 0x896 <__fixunssfsi+0x28>
     874:	9f 57       	subi	r25, 0x7F	; 127
     876:	98 f0       	brcs	.+38     	; 0x89e <__fixunssfsi+0x30>
     878:	b9 2f       	mov	r27, r25
     87a:	99 27       	eor	r25, r25
     87c:	b7 51       	subi	r27, 0x17	; 23
     87e:	b0 f0       	brcs	.+44     	; 0x8ac <__fixunssfsi+0x3e>
     880:	e1 f0       	breq	.+56     	; 0x8ba <__fixunssfsi+0x4c>
     882:	66 0f       	add	r22, r22
     884:	77 1f       	adc	r23, r23
     886:	88 1f       	adc	r24, r24
     888:	99 1f       	adc	r25, r25
     88a:	1a f0       	brmi	.+6      	; 0x892 <__fixunssfsi+0x24>
     88c:	ba 95       	dec	r27
     88e:	c9 f7       	brne	.-14     	; 0x882 <__fixunssfsi+0x14>
     890:	14 c0       	rjmp	.+40     	; 0x8ba <__fixunssfsi+0x4c>
     892:	b1 30       	cpi	r27, 0x01	; 1
     894:	91 f0       	breq	.+36     	; 0x8ba <__fixunssfsi+0x4c>
     896:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__fp_zero>
     89a:	b1 e0       	ldi	r27, 0x01	; 1
     89c:	08 95       	ret
     89e:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_zero>
     8a2:	67 2f       	mov	r22, r23
     8a4:	78 2f       	mov	r23, r24
     8a6:	88 27       	eor	r24, r24
     8a8:	b8 5f       	subi	r27, 0xF8	; 248
     8aa:	39 f0       	breq	.+14     	; 0x8ba <__fixunssfsi+0x4c>
     8ac:	b9 3f       	cpi	r27, 0xF9	; 249
     8ae:	cc f3       	brlt	.-14     	; 0x8a2 <__fixunssfsi+0x34>
     8b0:	86 95       	lsr	r24
     8b2:	77 95       	ror	r23
     8b4:	67 95       	ror	r22
     8b6:	b3 95       	inc	r27
     8b8:	d9 f7       	brne	.-10     	; 0x8b0 <__fixunssfsi+0x42>
     8ba:	3e f4       	brtc	.+14     	; 0x8ca <__fixunssfsi+0x5c>
     8bc:	90 95       	com	r25
     8be:	80 95       	com	r24
     8c0:	70 95       	com	r23
     8c2:	61 95       	neg	r22
     8c4:	7f 4f       	sbci	r23, 0xFF	; 255
     8c6:	8f 4f       	sbci	r24, 0xFF	; 255
     8c8:	9f 4f       	sbci	r25, 0xFF	; 255
     8ca:	08 95       	ret

000008cc <__fp_cmp>:
     8cc:	99 0f       	add	r25, r25
     8ce:	00 08       	sbc	r0, r0
     8d0:	55 0f       	add	r21, r21
     8d2:	aa 0b       	sbc	r26, r26
     8d4:	e0 e8       	ldi	r30, 0x80	; 128
     8d6:	fe ef       	ldi	r31, 0xFE	; 254
     8d8:	16 16       	cp	r1, r22
     8da:	17 06       	cpc	r1, r23
     8dc:	e8 07       	cpc	r30, r24
     8de:	f9 07       	cpc	r31, r25
     8e0:	c0 f0       	brcs	.+48     	; 0x912 <__stack+0x13>
     8e2:	12 16       	cp	r1, r18
     8e4:	13 06       	cpc	r1, r19
     8e6:	e4 07       	cpc	r30, r20
     8e8:	f5 07       	cpc	r31, r21
     8ea:	98 f0       	brcs	.+38     	; 0x912 <__stack+0x13>
     8ec:	62 1b       	sub	r22, r18
     8ee:	73 0b       	sbc	r23, r19
     8f0:	84 0b       	sbc	r24, r20
     8f2:	95 0b       	sbc	r25, r21
     8f4:	39 f4       	brne	.+14     	; 0x904 <__stack+0x5>
     8f6:	0a 26       	eor	r0, r26
     8f8:	61 f0       	breq	.+24     	; 0x912 <__stack+0x13>
     8fa:	23 2b       	or	r18, r19
     8fc:	24 2b       	or	r18, r20
     8fe:	25 2b       	or	r18, r21
     900:	21 f4       	brne	.+8      	; 0x90a <__stack+0xb>
     902:	08 95       	ret
     904:	0a 26       	eor	r0, r26
     906:	09 f4       	brne	.+2      	; 0x90a <__stack+0xb>
     908:	a1 40       	sbci	r26, 0x01	; 1
     90a:	a6 95       	lsr	r26
     90c:	8f ef       	ldi	r24, 0xFF	; 255
     90e:	81 1d       	adc	r24, r1
     910:	81 1d       	adc	r24, r1
     912:	08 95       	ret

00000914 <__fp_inf>:
     914:	97 f9       	bld	r25, 7
     916:	9f 67       	ori	r25, 0x7F	; 127
     918:	80 e8       	ldi	r24, 0x80	; 128
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	08 95       	ret

00000920 <__fp_nan>:
     920:	9f ef       	ldi	r25, 0xFF	; 255
     922:	80 ec       	ldi	r24, 0xC0	; 192
     924:	08 95       	ret

00000926 <__fp_pscA>:
     926:	00 24       	eor	r0, r0
     928:	0a 94       	dec	r0
     92a:	16 16       	cp	r1, r22
     92c:	17 06       	cpc	r1, r23
     92e:	18 06       	cpc	r1, r24
     930:	09 06       	cpc	r0, r25
     932:	08 95       	ret

00000934 <__fp_pscB>:
     934:	00 24       	eor	r0, r0
     936:	0a 94       	dec	r0
     938:	12 16       	cp	r1, r18
     93a:	13 06       	cpc	r1, r19
     93c:	14 06       	cpc	r1, r20
     93e:	05 06       	cpc	r0, r21
     940:	08 95       	ret

00000942 <__fp_round>:
     942:	09 2e       	mov	r0, r25
     944:	03 94       	inc	r0
     946:	00 0c       	add	r0, r0
     948:	11 f4       	brne	.+4      	; 0x94e <__fp_round+0xc>
     94a:	88 23       	and	r24, r24
     94c:	52 f0       	brmi	.+20     	; 0x962 <__fp_round+0x20>
     94e:	bb 0f       	add	r27, r27
     950:	40 f4       	brcc	.+16     	; 0x962 <__fp_round+0x20>
     952:	bf 2b       	or	r27, r31
     954:	11 f4       	brne	.+4      	; 0x95a <__fp_round+0x18>
     956:	60 ff       	sbrs	r22, 0
     958:	04 c0       	rjmp	.+8      	; 0x962 <__fp_round+0x20>
     95a:	6f 5f       	subi	r22, 0xFF	; 255
     95c:	7f 4f       	sbci	r23, 0xFF	; 255
     95e:	8f 4f       	sbci	r24, 0xFF	; 255
     960:	9f 4f       	sbci	r25, 0xFF	; 255
     962:	08 95       	ret

00000964 <__fp_split3>:
     964:	57 fd       	sbrc	r21, 7
     966:	90 58       	subi	r25, 0x80	; 128
     968:	44 0f       	add	r20, r20
     96a:	55 1f       	adc	r21, r21
     96c:	59 f0       	breq	.+22     	; 0x984 <__fp_splitA+0x10>
     96e:	5f 3f       	cpi	r21, 0xFF	; 255
     970:	71 f0       	breq	.+28     	; 0x98e <__fp_splitA+0x1a>
     972:	47 95       	ror	r20

00000974 <__fp_splitA>:
     974:	88 0f       	add	r24, r24
     976:	97 fb       	bst	r25, 7
     978:	99 1f       	adc	r25, r25
     97a:	61 f0       	breq	.+24     	; 0x994 <__fp_splitA+0x20>
     97c:	9f 3f       	cpi	r25, 0xFF	; 255
     97e:	79 f0       	breq	.+30     	; 0x99e <__fp_splitA+0x2a>
     980:	87 95       	ror	r24
     982:	08 95       	ret
     984:	12 16       	cp	r1, r18
     986:	13 06       	cpc	r1, r19
     988:	14 06       	cpc	r1, r20
     98a:	55 1f       	adc	r21, r21
     98c:	f2 cf       	rjmp	.-28     	; 0x972 <__fp_split3+0xe>
     98e:	46 95       	lsr	r20
     990:	f1 df       	rcall	.-30     	; 0x974 <__fp_splitA>
     992:	08 c0       	rjmp	.+16     	; 0x9a4 <__fp_splitA+0x30>
     994:	16 16       	cp	r1, r22
     996:	17 06       	cpc	r1, r23
     998:	18 06       	cpc	r1, r24
     99a:	99 1f       	adc	r25, r25
     99c:	f1 cf       	rjmp	.-30     	; 0x980 <__fp_splitA+0xc>
     99e:	86 95       	lsr	r24
     9a0:	71 05       	cpc	r23, r1
     9a2:	61 05       	cpc	r22, r1
     9a4:	08 94       	sec
     9a6:	08 95       	ret

000009a8 <__fp_zero>:
     9a8:	e8 94       	clt

000009aa <__fp_szero>:
     9aa:	bb 27       	eor	r27, r27
     9ac:	66 27       	eor	r22, r22
     9ae:	77 27       	eor	r23, r23
     9b0:	cb 01       	movw	r24, r22
     9b2:	97 f9       	bld	r25, 7
     9b4:	08 95       	ret

000009b6 <__mulsf3>:
     9b6:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__mulsf3x>
     9ba:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_round>
     9be:	0e 94 93 04 	call	0x926	; 0x926 <__fp_pscA>
     9c2:	38 f0       	brcs	.+14     	; 0x9d2 <__mulsf3+0x1c>
     9c4:	0e 94 9a 04 	call	0x934	; 0x934 <__fp_pscB>
     9c8:	20 f0       	brcs	.+8      	; 0x9d2 <__mulsf3+0x1c>
     9ca:	95 23       	and	r25, r21
     9cc:	11 f0       	breq	.+4      	; 0x9d2 <__mulsf3+0x1c>
     9ce:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_inf>
     9d2:	0c 94 90 04 	jmp	0x920	; 0x920 <__fp_nan>
     9d6:	11 24       	eor	r1, r1
     9d8:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__fp_szero>

000009dc <__mulsf3x>:
     9dc:	0e 94 b2 04 	call	0x964	; 0x964 <__fp_split3>
     9e0:	70 f3       	brcs	.-36     	; 0x9be <__mulsf3+0x8>

000009e2 <__mulsf3_pse>:
     9e2:	95 9f       	mul	r25, r21
     9e4:	c1 f3       	breq	.-16     	; 0x9d6 <__mulsf3+0x20>
     9e6:	95 0f       	add	r25, r21
     9e8:	50 e0       	ldi	r21, 0x00	; 0
     9ea:	55 1f       	adc	r21, r21
     9ec:	62 9f       	mul	r22, r18
     9ee:	f0 01       	movw	r30, r0
     9f0:	72 9f       	mul	r23, r18
     9f2:	bb 27       	eor	r27, r27
     9f4:	f0 0d       	add	r31, r0
     9f6:	b1 1d       	adc	r27, r1
     9f8:	63 9f       	mul	r22, r19
     9fa:	aa 27       	eor	r26, r26
     9fc:	f0 0d       	add	r31, r0
     9fe:	b1 1d       	adc	r27, r1
     a00:	aa 1f       	adc	r26, r26
     a02:	64 9f       	mul	r22, r20
     a04:	66 27       	eor	r22, r22
     a06:	b0 0d       	add	r27, r0
     a08:	a1 1d       	adc	r26, r1
     a0a:	66 1f       	adc	r22, r22
     a0c:	82 9f       	mul	r24, r18
     a0e:	22 27       	eor	r18, r18
     a10:	b0 0d       	add	r27, r0
     a12:	a1 1d       	adc	r26, r1
     a14:	62 1f       	adc	r22, r18
     a16:	73 9f       	mul	r23, r19
     a18:	b0 0d       	add	r27, r0
     a1a:	a1 1d       	adc	r26, r1
     a1c:	62 1f       	adc	r22, r18
     a1e:	83 9f       	mul	r24, r19
     a20:	a0 0d       	add	r26, r0
     a22:	61 1d       	adc	r22, r1
     a24:	22 1f       	adc	r18, r18
     a26:	74 9f       	mul	r23, r20
     a28:	33 27       	eor	r19, r19
     a2a:	a0 0d       	add	r26, r0
     a2c:	61 1d       	adc	r22, r1
     a2e:	23 1f       	adc	r18, r19
     a30:	84 9f       	mul	r24, r20
     a32:	60 0d       	add	r22, r0
     a34:	21 1d       	adc	r18, r1
     a36:	82 2f       	mov	r24, r18
     a38:	76 2f       	mov	r23, r22
     a3a:	6a 2f       	mov	r22, r26
     a3c:	11 24       	eor	r1, r1
     a3e:	9f 57       	subi	r25, 0x7F	; 127
     a40:	50 40       	sbci	r21, 0x00	; 0
     a42:	9a f0       	brmi	.+38     	; 0xa6a <__mulsf3_pse+0x88>
     a44:	f1 f0       	breq	.+60     	; 0xa82 <__mulsf3_pse+0xa0>
     a46:	88 23       	and	r24, r24
     a48:	4a f0       	brmi	.+18     	; 0xa5c <__mulsf3_pse+0x7a>
     a4a:	ee 0f       	add	r30, r30
     a4c:	ff 1f       	adc	r31, r31
     a4e:	bb 1f       	adc	r27, r27
     a50:	66 1f       	adc	r22, r22
     a52:	77 1f       	adc	r23, r23
     a54:	88 1f       	adc	r24, r24
     a56:	91 50       	subi	r25, 0x01	; 1
     a58:	50 40       	sbci	r21, 0x00	; 0
     a5a:	a9 f7       	brne	.-22     	; 0xa46 <__mulsf3_pse+0x64>
     a5c:	9e 3f       	cpi	r25, 0xFE	; 254
     a5e:	51 05       	cpc	r21, r1
     a60:	80 f0       	brcs	.+32     	; 0xa82 <__mulsf3_pse+0xa0>
     a62:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_inf>
     a66:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__fp_szero>
     a6a:	5f 3f       	cpi	r21, 0xFF	; 255
     a6c:	e4 f3       	brlt	.-8      	; 0xa66 <__mulsf3_pse+0x84>
     a6e:	98 3e       	cpi	r25, 0xE8	; 232
     a70:	d4 f3       	brlt	.-12     	; 0xa66 <__mulsf3_pse+0x84>
     a72:	86 95       	lsr	r24
     a74:	77 95       	ror	r23
     a76:	67 95       	ror	r22
     a78:	b7 95       	ror	r27
     a7a:	f7 95       	ror	r31
     a7c:	e7 95       	ror	r30
     a7e:	9f 5f       	subi	r25, 0xFF	; 255
     a80:	c1 f7       	brne	.-16     	; 0xa72 <__mulsf3_pse+0x90>
     a82:	fe 2b       	or	r31, r30
     a84:	88 0f       	add	r24, r24
     a86:	91 1d       	adc	r25, r1
     a88:	96 95       	lsr	r25
     a8a:	87 95       	ror	r24
     a8c:	97 f9       	bld	r25, 7
     a8e:	08 95       	ret

00000a90 <printf>:
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	ee e4       	ldi	r30, 0x4E	; 78
     a96:	f5 e0       	ldi	r31, 0x05	; 5
     a98:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__prologue_saves__+0x20>
     a9c:	ae 01       	movw	r20, r28
     a9e:	4b 5f       	subi	r20, 0xFB	; 251
     aa0:	5f 4f       	sbci	r21, 0xFF	; 255
     aa2:	fa 01       	movw	r30, r20
     aa4:	61 91       	ld	r22, Z+
     aa6:	71 91       	ld	r23, Z+
     aa8:	af 01       	movw	r20, r30
     aaa:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <__iob+0x2>
     aae:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <__iob+0x3>
     ab2:	0e 94 8e 05 	call	0xb1c	; 0xb1c <vfprintf>
     ab6:	e2 e0       	ldi	r30, 0x02	; 2
     ab8:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__epilogue_restores__+0x20>

00000abc <puts>:
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <__iob+0x2>
     ac8:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <__iob+0x3>
     acc:	23 81       	ldd	r18, Z+3	; 0x03
     ace:	21 ff       	sbrs	r18, 1
     ad0:	1b c0       	rjmp	.+54     	; 0xb08 <puts+0x4c>
     ad2:	8c 01       	movw	r16, r24
     ad4:	d0 e0       	ldi	r29, 0x00	; 0
     ad6:	c0 e0       	ldi	r28, 0x00	; 0
     ad8:	f8 01       	movw	r30, r16
     ada:	81 91       	ld	r24, Z+
     adc:	8f 01       	movw	r16, r30
     ade:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <__iob+0x2>
     ae2:	70 91 5a 01 	lds	r23, 0x015A	; 0x80015a <__iob+0x3>
     ae6:	db 01       	movw	r26, r22
     ae8:	18 96       	adiw	r26, 0x08	; 8
     aea:	ed 91       	ld	r30, X+
     aec:	fc 91       	ld	r31, X
     aee:	19 97       	sbiw	r26, 0x09	; 9
     af0:	88 23       	and	r24, r24
     af2:	31 f0       	breq	.+12     	; 0xb00 <puts+0x44>
     af4:	09 95       	icall
     af6:	89 2b       	or	r24, r25
     af8:	79 f3       	breq	.-34     	; 0xad8 <puts+0x1c>
     afa:	df ef       	ldi	r29, 0xFF	; 255
     afc:	cf ef       	ldi	r28, 0xFF	; 255
     afe:	ec cf       	rjmp	.-40     	; 0xad8 <puts+0x1c>
     b00:	8a e0       	ldi	r24, 0x0A	; 10
     b02:	09 95       	icall
     b04:	89 2b       	or	r24, r25
     b06:	19 f0       	breq	.+6      	; 0xb0e <puts+0x52>
     b08:	8f ef       	ldi	r24, 0xFF	; 255
     b0a:	9f ef       	ldi	r25, 0xFF	; 255
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <puts+0x56>
     b0e:	8d 2f       	mov	r24, r29
     b10:	9c 2f       	mov	r25, r28
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	1f 91       	pop	r17
     b18:	0f 91       	pop	r16
     b1a:	08 95       	ret

00000b1c <vfprintf>:
     b1c:	ab e0       	ldi	r26, 0x0B	; 11
     b1e:	b0 e0       	ldi	r27, 0x00	; 0
     b20:	e4 e9       	ldi	r30, 0x94	; 148
     b22:	f5 e0       	ldi	r31, 0x05	; 5
     b24:	0c 94 1f 08 	jmp	0x103e	; 0x103e <__prologue_saves__>
     b28:	6c 01       	movw	r12, r24
     b2a:	7b 01       	movw	r14, r22
     b2c:	8a 01       	movw	r16, r20
     b2e:	fc 01       	movw	r30, r24
     b30:	17 82       	std	Z+7, r1	; 0x07
     b32:	16 82       	std	Z+6, r1	; 0x06
     b34:	83 81       	ldd	r24, Z+3	; 0x03
     b36:	81 ff       	sbrs	r24, 1
     b38:	cc c1       	rjmp	.+920    	; 0xed2 <vfprintf+0x3b6>
     b3a:	ce 01       	movw	r24, r28
     b3c:	01 96       	adiw	r24, 0x01	; 1
     b3e:	3c 01       	movw	r6, r24
     b40:	f6 01       	movw	r30, r12
     b42:	93 81       	ldd	r25, Z+3	; 0x03
     b44:	f7 01       	movw	r30, r14
     b46:	93 fd       	sbrc	r25, 3
     b48:	85 91       	lpm	r24, Z+
     b4a:	93 ff       	sbrs	r25, 3
     b4c:	81 91       	ld	r24, Z+
     b4e:	7f 01       	movw	r14, r30
     b50:	88 23       	and	r24, r24
     b52:	09 f4       	brne	.+2      	; 0xb56 <vfprintf+0x3a>
     b54:	ba c1       	rjmp	.+884    	; 0xeca <vfprintf+0x3ae>
     b56:	85 32       	cpi	r24, 0x25	; 37
     b58:	39 f4       	brne	.+14     	; 0xb68 <vfprintf+0x4c>
     b5a:	93 fd       	sbrc	r25, 3
     b5c:	85 91       	lpm	r24, Z+
     b5e:	93 ff       	sbrs	r25, 3
     b60:	81 91       	ld	r24, Z+
     b62:	7f 01       	movw	r14, r30
     b64:	85 32       	cpi	r24, 0x25	; 37
     b66:	29 f4       	brne	.+10     	; 0xb72 <vfprintf+0x56>
     b68:	b6 01       	movw	r22, r12
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 85 07 	call	0xf0a	; 0xf0a <fputc>
     b70:	e7 cf       	rjmp	.-50     	; 0xb40 <vfprintf+0x24>
     b72:	91 2c       	mov	r9, r1
     b74:	21 2c       	mov	r2, r1
     b76:	31 2c       	mov	r3, r1
     b78:	ff e1       	ldi	r31, 0x1F	; 31
     b7a:	f3 15       	cp	r31, r3
     b7c:	d8 f0       	brcs	.+54     	; 0xbb4 <vfprintf+0x98>
     b7e:	8b 32       	cpi	r24, 0x2B	; 43
     b80:	79 f0       	breq	.+30     	; 0xba0 <vfprintf+0x84>
     b82:	38 f4       	brcc	.+14     	; 0xb92 <vfprintf+0x76>
     b84:	80 32       	cpi	r24, 0x20	; 32
     b86:	79 f0       	breq	.+30     	; 0xba6 <vfprintf+0x8a>
     b88:	83 32       	cpi	r24, 0x23	; 35
     b8a:	a1 f4       	brne	.+40     	; 0xbb4 <vfprintf+0x98>
     b8c:	23 2d       	mov	r18, r3
     b8e:	20 61       	ori	r18, 0x10	; 16
     b90:	1d c0       	rjmp	.+58     	; 0xbcc <vfprintf+0xb0>
     b92:	8d 32       	cpi	r24, 0x2D	; 45
     b94:	61 f0       	breq	.+24     	; 0xbae <vfprintf+0x92>
     b96:	80 33       	cpi	r24, 0x30	; 48
     b98:	69 f4       	brne	.+26     	; 0xbb4 <vfprintf+0x98>
     b9a:	23 2d       	mov	r18, r3
     b9c:	21 60       	ori	r18, 0x01	; 1
     b9e:	16 c0       	rjmp	.+44     	; 0xbcc <vfprintf+0xb0>
     ba0:	83 2d       	mov	r24, r3
     ba2:	82 60       	ori	r24, 0x02	; 2
     ba4:	38 2e       	mov	r3, r24
     ba6:	e3 2d       	mov	r30, r3
     ba8:	e4 60       	ori	r30, 0x04	; 4
     baa:	3e 2e       	mov	r3, r30
     bac:	2a c0       	rjmp	.+84     	; 0xc02 <vfprintf+0xe6>
     bae:	f3 2d       	mov	r31, r3
     bb0:	f8 60       	ori	r31, 0x08	; 8
     bb2:	1d c0       	rjmp	.+58     	; 0xbee <vfprintf+0xd2>
     bb4:	37 fc       	sbrc	r3, 7
     bb6:	2d c0       	rjmp	.+90     	; 0xc12 <vfprintf+0xf6>
     bb8:	20 ed       	ldi	r18, 0xD0	; 208
     bba:	28 0f       	add	r18, r24
     bbc:	2a 30       	cpi	r18, 0x0A	; 10
     bbe:	40 f0       	brcs	.+16     	; 0xbd0 <vfprintf+0xb4>
     bc0:	8e 32       	cpi	r24, 0x2E	; 46
     bc2:	b9 f4       	brne	.+46     	; 0xbf2 <vfprintf+0xd6>
     bc4:	36 fc       	sbrc	r3, 6
     bc6:	81 c1       	rjmp	.+770    	; 0xeca <vfprintf+0x3ae>
     bc8:	23 2d       	mov	r18, r3
     bca:	20 64       	ori	r18, 0x40	; 64
     bcc:	32 2e       	mov	r3, r18
     bce:	19 c0       	rjmp	.+50     	; 0xc02 <vfprintf+0xe6>
     bd0:	36 fe       	sbrs	r3, 6
     bd2:	06 c0       	rjmp	.+12     	; 0xbe0 <vfprintf+0xc4>
     bd4:	8a e0       	ldi	r24, 0x0A	; 10
     bd6:	98 9e       	mul	r9, r24
     bd8:	20 0d       	add	r18, r0
     bda:	11 24       	eor	r1, r1
     bdc:	92 2e       	mov	r9, r18
     bde:	11 c0       	rjmp	.+34     	; 0xc02 <vfprintf+0xe6>
     be0:	ea e0       	ldi	r30, 0x0A	; 10
     be2:	2e 9e       	mul	r2, r30
     be4:	20 0d       	add	r18, r0
     be6:	11 24       	eor	r1, r1
     be8:	22 2e       	mov	r2, r18
     bea:	f3 2d       	mov	r31, r3
     bec:	f0 62       	ori	r31, 0x20	; 32
     bee:	3f 2e       	mov	r3, r31
     bf0:	08 c0       	rjmp	.+16     	; 0xc02 <vfprintf+0xe6>
     bf2:	8c 36       	cpi	r24, 0x6C	; 108
     bf4:	21 f4       	brne	.+8      	; 0xbfe <vfprintf+0xe2>
     bf6:	83 2d       	mov	r24, r3
     bf8:	80 68       	ori	r24, 0x80	; 128
     bfa:	38 2e       	mov	r3, r24
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <vfprintf+0xe6>
     bfe:	88 36       	cpi	r24, 0x68	; 104
     c00:	41 f4       	brne	.+16     	; 0xc12 <vfprintf+0xf6>
     c02:	f7 01       	movw	r30, r14
     c04:	93 fd       	sbrc	r25, 3
     c06:	85 91       	lpm	r24, Z+
     c08:	93 ff       	sbrs	r25, 3
     c0a:	81 91       	ld	r24, Z+
     c0c:	7f 01       	movw	r14, r30
     c0e:	81 11       	cpse	r24, r1
     c10:	b3 cf       	rjmp	.-154    	; 0xb78 <vfprintf+0x5c>
     c12:	98 2f       	mov	r25, r24
     c14:	9f 7d       	andi	r25, 0xDF	; 223
     c16:	95 54       	subi	r25, 0x45	; 69
     c18:	93 30       	cpi	r25, 0x03	; 3
     c1a:	28 f4       	brcc	.+10     	; 0xc26 <vfprintf+0x10a>
     c1c:	0c 5f       	subi	r16, 0xFC	; 252
     c1e:	1f 4f       	sbci	r17, 0xFF	; 255
     c20:	9f e3       	ldi	r25, 0x3F	; 63
     c22:	99 83       	std	Y+1, r25	; 0x01
     c24:	0d c0       	rjmp	.+26     	; 0xc40 <vfprintf+0x124>
     c26:	83 36       	cpi	r24, 0x63	; 99
     c28:	31 f0       	breq	.+12     	; 0xc36 <vfprintf+0x11a>
     c2a:	83 37       	cpi	r24, 0x73	; 115
     c2c:	71 f0       	breq	.+28     	; 0xc4a <vfprintf+0x12e>
     c2e:	83 35       	cpi	r24, 0x53	; 83
     c30:	09 f0       	breq	.+2      	; 0xc34 <vfprintf+0x118>
     c32:	59 c0       	rjmp	.+178    	; 0xce6 <vfprintf+0x1ca>
     c34:	21 c0       	rjmp	.+66     	; 0xc78 <vfprintf+0x15c>
     c36:	f8 01       	movw	r30, r16
     c38:	80 81       	ld	r24, Z
     c3a:	89 83       	std	Y+1, r24	; 0x01
     c3c:	0e 5f       	subi	r16, 0xFE	; 254
     c3e:	1f 4f       	sbci	r17, 0xFF	; 255
     c40:	88 24       	eor	r8, r8
     c42:	83 94       	inc	r8
     c44:	91 2c       	mov	r9, r1
     c46:	53 01       	movw	r10, r6
     c48:	13 c0       	rjmp	.+38     	; 0xc70 <vfprintf+0x154>
     c4a:	28 01       	movw	r4, r16
     c4c:	f2 e0       	ldi	r31, 0x02	; 2
     c4e:	4f 0e       	add	r4, r31
     c50:	51 1c       	adc	r5, r1
     c52:	f8 01       	movw	r30, r16
     c54:	a0 80       	ld	r10, Z
     c56:	b1 80       	ldd	r11, Z+1	; 0x01
     c58:	36 fe       	sbrs	r3, 6
     c5a:	03 c0       	rjmp	.+6      	; 0xc62 <vfprintf+0x146>
     c5c:	69 2d       	mov	r22, r9
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <vfprintf+0x14a>
     c62:	6f ef       	ldi	r22, 0xFF	; 255
     c64:	7f ef       	ldi	r23, 0xFF	; 255
     c66:	c5 01       	movw	r24, r10
     c68:	0e 94 7a 07 	call	0xef4	; 0xef4 <strnlen>
     c6c:	4c 01       	movw	r8, r24
     c6e:	82 01       	movw	r16, r4
     c70:	f3 2d       	mov	r31, r3
     c72:	ff 77       	andi	r31, 0x7F	; 127
     c74:	3f 2e       	mov	r3, r31
     c76:	16 c0       	rjmp	.+44     	; 0xca4 <vfprintf+0x188>
     c78:	28 01       	movw	r4, r16
     c7a:	22 e0       	ldi	r18, 0x02	; 2
     c7c:	42 0e       	add	r4, r18
     c7e:	51 1c       	adc	r5, r1
     c80:	f8 01       	movw	r30, r16
     c82:	a0 80       	ld	r10, Z
     c84:	b1 80       	ldd	r11, Z+1	; 0x01
     c86:	36 fe       	sbrs	r3, 6
     c88:	03 c0       	rjmp	.+6      	; 0xc90 <vfprintf+0x174>
     c8a:	69 2d       	mov	r22, r9
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <vfprintf+0x178>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	c5 01       	movw	r24, r10
     c96:	0e 94 6f 07 	call	0xede	; 0xede <strnlen_P>
     c9a:	4c 01       	movw	r8, r24
     c9c:	f3 2d       	mov	r31, r3
     c9e:	f0 68       	ori	r31, 0x80	; 128
     ca0:	3f 2e       	mov	r3, r31
     ca2:	82 01       	movw	r16, r4
     ca4:	33 fc       	sbrc	r3, 3
     ca6:	1b c0       	rjmp	.+54     	; 0xcde <vfprintf+0x1c2>
     ca8:	82 2d       	mov	r24, r2
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	88 16       	cp	r8, r24
     cae:	99 06       	cpc	r9, r25
     cb0:	b0 f4       	brcc	.+44     	; 0xcde <vfprintf+0x1c2>
     cb2:	b6 01       	movw	r22, r12
     cb4:	80 e2       	ldi	r24, 0x20	; 32
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 85 07 	call	0xf0a	; 0xf0a <fputc>
     cbc:	2a 94       	dec	r2
     cbe:	f4 cf       	rjmp	.-24     	; 0xca8 <vfprintf+0x18c>
     cc0:	f5 01       	movw	r30, r10
     cc2:	37 fc       	sbrc	r3, 7
     cc4:	85 91       	lpm	r24, Z+
     cc6:	37 fe       	sbrs	r3, 7
     cc8:	81 91       	ld	r24, Z+
     cca:	5f 01       	movw	r10, r30
     ccc:	b6 01       	movw	r22, r12
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	0e 94 85 07 	call	0xf0a	; 0xf0a <fputc>
     cd4:	21 10       	cpse	r2, r1
     cd6:	2a 94       	dec	r2
     cd8:	21 e0       	ldi	r18, 0x01	; 1
     cda:	82 1a       	sub	r8, r18
     cdc:	91 08       	sbc	r9, r1
     cde:	81 14       	cp	r8, r1
     ce0:	91 04       	cpc	r9, r1
     ce2:	71 f7       	brne	.-36     	; 0xcc0 <vfprintf+0x1a4>
     ce4:	e8 c0       	rjmp	.+464    	; 0xeb6 <vfprintf+0x39a>
     ce6:	84 36       	cpi	r24, 0x64	; 100
     ce8:	11 f0       	breq	.+4      	; 0xcee <vfprintf+0x1d2>
     cea:	89 36       	cpi	r24, 0x69	; 105
     cec:	41 f5       	brne	.+80     	; 0xd3e <vfprintf+0x222>
     cee:	f8 01       	movw	r30, r16
     cf0:	37 fe       	sbrs	r3, 7
     cf2:	07 c0       	rjmp	.+14     	; 0xd02 <vfprintf+0x1e6>
     cf4:	60 81       	ld	r22, Z
     cf6:	71 81       	ldd	r23, Z+1	; 0x01
     cf8:	82 81       	ldd	r24, Z+2	; 0x02
     cfa:	93 81       	ldd	r25, Z+3	; 0x03
     cfc:	0c 5f       	subi	r16, 0xFC	; 252
     cfe:	1f 4f       	sbci	r17, 0xFF	; 255
     d00:	08 c0       	rjmp	.+16     	; 0xd12 <vfprintf+0x1f6>
     d02:	60 81       	ld	r22, Z
     d04:	71 81       	ldd	r23, Z+1	; 0x01
     d06:	07 2e       	mov	r0, r23
     d08:	00 0c       	add	r0, r0
     d0a:	88 0b       	sbc	r24, r24
     d0c:	99 0b       	sbc	r25, r25
     d0e:	0e 5f       	subi	r16, 0xFE	; 254
     d10:	1f 4f       	sbci	r17, 0xFF	; 255
     d12:	f3 2d       	mov	r31, r3
     d14:	ff 76       	andi	r31, 0x6F	; 111
     d16:	3f 2e       	mov	r3, r31
     d18:	97 ff       	sbrs	r25, 7
     d1a:	09 c0       	rjmp	.+18     	; 0xd2e <vfprintf+0x212>
     d1c:	90 95       	com	r25
     d1e:	80 95       	com	r24
     d20:	70 95       	com	r23
     d22:	61 95       	neg	r22
     d24:	7f 4f       	sbci	r23, 0xFF	; 255
     d26:	8f 4f       	sbci	r24, 0xFF	; 255
     d28:	9f 4f       	sbci	r25, 0xFF	; 255
     d2a:	f0 68       	ori	r31, 0x80	; 128
     d2c:	3f 2e       	mov	r3, r31
     d2e:	2a e0       	ldi	r18, 0x0A	; 10
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	a3 01       	movw	r20, r6
     d34:	0e 94 c1 07 	call	0xf82	; 0xf82 <__ultoa_invert>
     d38:	88 2e       	mov	r8, r24
     d3a:	86 18       	sub	r8, r6
     d3c:	45 c0       	rjmp	.+138    	; 0xdc8 <vfprintf+0x2ac>
     d3e:	85 37       	cpi	r24, 0x75	; 117
     d40:	31 f4       	brne	.+12     	; 0xd4e <vfprintf+0x232>
     d42:	23 2d       	mov	r18, r3
     d44:	2f 7e       	andi	r18, 0xEF	; 239
     d46:	b2 2e       	mov	r11, r18
     d48:	2a e0       	ldi	r18, 0x0A	; 10
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	25 c0       	rjmp	.+74     	; 0xd98 <vfprintf+0x27c>
     d4e:	93 2d       	mov	r25, r3
     d50:	99 7f       	andi	r25, 0xF9	; 249
     d52:	b9 2e       	mov	r11, r25
     d54:	8f 36       	cpi	r24, 0x6F	; 111
     d56:	c1 f0       	breq	.+48     	; 0xd88 <vfprintf+0x26c>
     d58:	18 f4       	brcc	.+6      	; 0xd60 <vfprintf+0x244>
     d5a:	88 35       	cpi	r24, 0x58	; 88
     d5c:	79 f0       	breq	.+30     	; 0xd7c <vfprintf+0x260>
     d5e:	b5 c0       	rjmp	.+362    	; 0xeca <vfprintf+0x3ae>
     d60:	80 37       	cpi	r24, 0x70	; 112
     d62:	19 f0       	breq	.+6      	; 0xd6a <vfprintf+0x24e>
     d64:	88 37       	cpi	r24, 0x78	; 120
     d66:	21 f0       	breq	.+8      	; 0xd70 <vfprintf+0x254>
     d68:	b0 c0       	rjmp	.+352    	; 0xeca <vfprintf+0x3ae>
     d6a:	e9 2f       	mov	r30, r25
     d6c:	e0 61       	ori	r30, 0x10	; 16
     d6e:	be 2e       	mov	r11, r30
     d70:	b4 fe       	sbrs	r11, 4
     d72:	0d c0       	rjmp	.+26     	; 0xd8e <vfprintf+0x272>
     d74:	fb 2d       	mov	r31, r11
     d76:	f4 60       	ori	r31, 0x04	; 4
     d78:	bf 2e       	mov	r11, r31
     d7a:	09 c0       	rjmp	.+18     	; 0xd8e <vfprintf+0x272>
     d7c:	34 fe       	sbrs	r3, 4
     d7e:	0a c0       	rjmp	.+20     	; 0xd94 <vfprintf+0x278>
     d80:	29 2f       	mov	r18, r25
     d82:	26 60       	ori	r18, 0x06	; 6
     d84:	b2 2e       	mov	r11, r18
     d86:	06 c0       	rjmp	.+12     	; 0xd94 <vfprintf+0x278>
     d88:	28 e0       	ldi	r18, 0x08	; 8
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	05 c0       	rjmp	.+10     	; 0xd98 <vfprintf+0x27c>
     d8e:	20 e1       	ldi	r18, 0x10	; 16
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <vfprintf+0x27c>
     d94:	20 e1       	ldi	r18, 0x10	; 16
     d96:	32 e0       	ldi	r19, 0x02	; 2
     d98:	f8 01       	movw	r30, r16
     d9a:	b7 fe       	sbrs	r11, 7
     d9c:	07 c0       	rjmp	.+14     	; 0xdac <vfprintf+0x290>
     d9e:	60 81       	ld	r22, Z
     da0:	71 81       	ldd	r23, Z+1	; 0x01
     da2:	82 81       	ldd	r24, Z+2	; 0x02
     da4:	93 81       	ldd	r25, Z+3	; 0x03
     da6:	0c 5f       	subi	r16, 0xFC	; 252
     da8:	1f 4f       	sbci	r17, 0xFF	; 255
     daa:	06 c0       	rjmp	.+12     	; 0xdb8 <vfprintf+0x29c>
     dac:	60 81       	ld	r22, Z
     dae:	71 81       	ldd	r23, Z+1	; 0x01
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 5f       	subi	r16, 0xFE	; 254
     db6:	1f 4f       	sbci	r17, 0xFF	; 255
     db8:	a3 01       	movw	r20, r6
     dba:	0e 94 c1 07 	call	0xf82	; 0xf82 <__ultoa_invert>
     dbe:	88 2e       	mov	r8, r24
     dc0:	86 18       	sub	r8, r6
     dc2:	fb 2d       	mov	r31, r11
     dc4:	ff 77       	andi	r31, 0x7F	; 127
     dc6:	3f 2e       	mov	r3, r31
     dc8:	36 fe       	sbrs	r3, 6
     dca:	0d c0       	rjmp	.+26     	; 0xde6 <vfprintf+0x2ca>
     dcc:	23 2d       	mov	r18, r3
     dce:	2e 7f       	andi	r18, 0xFE	; 254
     dd0:	a2 2e       	mov	r10, r18
     dd2:	89 14       	cp	r8, r9
     dd4:	58 f4       	brcc	.+22     	; 0xdec <vfprintf+0x2d0>
     dd6:	34 fe       	sbrs	r3, 4
     dd8:	0b c0       	rjmp	.+22     	; 0xdf0 <vfprintf+0x2d4>
     dda:	32 fc       	sbrc	r3, 2
     ddc:	09 c0       	rjmp	.+18     	; 0xdf0 <vfprintf+0x2d4>
     dde:	83 2d       	mov	r24, r3
     de0:	8e 7e       	andi	r24, 0xEE	; 238
     de2:	a8 2e       	mov	r10, r24
     de4:	05 c0       	rjmp	.+10     	; 0xdf0 <vfprintf+0x2d4>
     de6:	b8 2c       	mov	r11, r8
     de8:	a3 2c       	mov	r10, r3
     dea:	03 c0       	rjmp	.+6      	; 0xdf2 <vfprintf+0x2d6>
     dec:	b8 2c       	mov	r11, r8
     dee:	01 c0       	rjmp	.+2      	; 0xdf2 <vfprintf+0x2d6>
     df0:	b9 2c       	mov	r11, r9
     df2:	a4 fe       	sbrs	r10, 4
     df4:	0f c0       	rjmp	.+30     	; 0xe14 <vfprintf+0x2f8>
     df6:	fe 01       	movw	r30, r28
     df8:	e8 0d       	add	r30, r8
     dfa:	f1 1d       	adc	r31, r1
     dfc:	80 81       	ld	r24, Z
     dfe:	80 33       	cpi	r24, 0x30	; 48
     e00:	21 f4       	brne	.+8      	; 0xe0a <vfprintf+0x2ee>
     e02:	9a 2d       	mov	r25, r10
     e04:	99 7e       	andi	r25, 0xE9	; 233
     e06:	a9 2e       	mov	r10, r25
     e08:	09 c0       	rjmp	.+18     	; 0xe1c <vfprintf+0x300>
     e0a:	a2 fe       	sbrs	r10, 2
     e0c:	06 c0       	rjmp	.+12     	; 0xe1a <vfprintf+0x2fe>
     e0e:	b3 94       	inc	r11
     e10:	b3 94       	inc	r11
     e12:	04 c0       	rjmp	.+8      	; 0xe1c <vfprintf+0x300>
     e14:	8a 2d       	mov	r24, r10
     e16:	86 78       	andi	r24, 0x86	; 134
     e18:	09 f0       	breq	.+2      	; 0xe1c <vfprintf+0x300>
     e1a:	b3 94       	inc	r11
     e1c:	a3 fc       	sbrc	r10, 3
     e1e:	11 c0       	rjmp	.+34     	; 0xe42 <vfprintf+0x326>
     e20:	a0 fe       	sbrs	r10, 0
     e22:	06 c0       	rjmp	.+12     	; 0xe30 <vfprintf+0x314>
     e24:	b2 14       	cp	r11, r2
     e26:	88 f4       	brcc	.+34     	; 0xe4a <vfprintf+0x32e>
     e28:	28 0c       	add	r2, r8
     e2a:	92 2c       	mov	r9, r2
     e2c:	9b 18       	sub	r9, r11
     e2e:	0e c0       	rjmp	.+28     	; 0xe4c <vfprintf+0x330>
     e30:	b2 14       	cp	r11, r2
     e32:	60 f4       	brcc	.+24     	; 0xe4c <vfprintf+0x330>
     e34:	b6 01       	movw	r22, r12
     e36:	80 e2       	ldi	r24, 0x20	; 32
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 85 07 	call	0xf0a	; 0xf0a <fputc>
     e3e:	b3 94       	inc	r11
     e40:	f7 cf       	rjmp	.-18     	; 0xe30 <vfprintf+0x314>
     e42:	b2 14       	cp	r11, r2
     e44:	18 f4       	brcc	.+6      	; 0xe4c <vfprintf+0x330>
     e46:	2b 18       	sub	r2, r11
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <vfprintf+0x332>
     e4a:	98 2c       	mov	r9, r8
     e4c:	21 2c       	mov	r2, r1
     e4e:	a4 fe       	sbrs	r10, 4
     e50:	10 c0       	rjmp	.+32     	; 0xe72 <vfprintf+0x356>
     e52:	b6 01       	movw	r22, r12
     e54:	80 e3       	ldi	r24, 0x30	; 48
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 85 07 	call	0xf0a	; 0xf0a <fputc>
     e5c:	a2 fe       	sbrs	r10, 2
     e5e:	17 c0       	rjmp	.+46     	; 0xe8e <vfprintf+0x372>
     e60:	a1 fc       	sbrc	r10, 1
     e62:	03 c0       	rjmp	.+6      	; 0xe6a <vfprintf+0x34e>
     e64:	88 e7       	ldi	r24, 0x78	; 120
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <vfprintf+0x352>
     e6a:	88 e5       	ldi	r24, 0x58	; 88
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	b6 01       	movw	r22, r12
     e70:	0c c0       	rjmp	.+24     	; 0xe8a <vfprintf+0x36e>
     e72:	8a 2d       	mov	r24, r10
     e74:	86 78       	andi	r24, 0x86	; 134
     e76:	59 f0       	breq	.+22     	; 0xe8e <vfprintf+0x372>
     e78:	a1 fe       	sbrs	r10, 1
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <vfprintf+0x364>
     e7c:	8b e2       	ldi	r24, 0x2B	; 43
     e7e:	01 c0       	rjmp	.+2      	; 0xe82 <vfprintf+0x366>
     e80:	80 e2       	ldi	r24, 0x20	; 32
     e82:	a7 fc       	sbrc	r10, 7
     e84:	8d e2       	ldi	r24, 0x2D	; 45
     e86:	b6 01       	movw	r22, r12
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	0e 94 85 07 	call	0xf0a	; 0xf0a <fputc>
     e8e:	89 14       	cp	r8, r9
     e90:	38 f4       	brcc	.+14     	; 0xea0 <vfprintf+0x384>
     e92:	b6 01       	movw	r22, r12
     e94:	80 e3       	ldi	r24, 0x30	; 48
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0e 94 85 07 	call	0xf0a	; 0xf0a <fputc>
     e9c:	9a 94       	dec	r9
     e9e:	f7 cf       	rjmp	.-18     	; 0xe8e <vfprintf+0x372>
     ea0:	8a 94       	dec	r8
     ea2:	f3 01       	movw	r30, r6
     ea4:	e8 0d       	add	r30, r8
     ea6:	f1 1d       	adc	r31, r1
     ea8:	80 81       	ld	r24, Z
     eaa:	b6 01       	movw	r22, r12
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 85 07 	call	0xf0a	; 0xf0a <fputc>
     eb2:	81 10       	cpse	r8, r1
     eb4:	f5 cf       	rjmp	.-22     	; 0xea0 <vfprintf+0x384>
     eb6:	22 20       	and	r2, r2
     eb8:	09 f4       	brne	.+2      	; 0xebc <vfprintf+0x3a0>
     eba:	42 ce       	rjmp	.-892    	; 0xb40 <vfprintf+0x24>
     ebc:	b6 01       	movw	r22, r12
     ebe:	80 e2       	ldi	r24, 0x20	; 32
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 85 07 	call	0xf0a	; 0xf0a <fputc>
     ec6:	2a 94       	dec	r2
     ec8:	f6 cf       	rjmp	.-20     	; 0xeb6 <vfprintf+0x39a>
     eca:	f6 01       	movw	r30, r12
     ecc:	86 81       	ldd	r24, Z+6	; 0x06
     ece:	97 81       	ldd	r25, Z+7	; 0x07
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <vfprintf+0x3ba>
     ed2:	8f ef       	ldi	r24, 0xFF	; 255
     ed4:	9f ef       	ldi	r25, 0xFF	; 255
     ed6:	2b 96       	adiw	r28, 0x0b	; 11
     ed8:	e2 e1       	ldi	r30, 0x12	; 18
     eda:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__epilogue_restores__>

00000ede <strnlen_P>:
     ede:	fc 01       	movw	r30, r24
     ee0:	05 90       	lpm	r0, Z+
     ee2:	61 50       	subi	r22, 0x01	; 1
     ee4:	70 40       	sbci	r23, 0x00	; 0
     ee6:	01 10       	cpse	r0, r1
     ee8:	d8 f7       	brcc	.-10     	; 0xee0 <strnlen_P+0x2>
     eea:	80 95       	com	r24
     eec:	90 95       	com	r25
     eee:	8e 0f       	add	r24, r30
     ef0:	9f 1f       	adc	r25, r31
     ef2:	08 95       	ret

00000ef4 <strnlen>:
     ef4:	fc 01       	movw	r30, r24
     ef6:	61 50       	subi	r22, 0x01	; 1
     ef8:	70 40       	sbci	r23, 0x00	; 0
     efa:	01 90       	ld	r0, Z+
     efc:	01 10       	cpse	r0, r1
     efe:	d8 f7       	brcc	.-10     	; 0xef6 <strnlen+0x2>
     f00:	80 95       	com	r24
     f02:	90 95       	com	r25
     f04:	8e 0f       	add	r24, r30
     f06:	9f 1f       	adc	r25, r31
     f08:	08 95       	ret

00000f0a <fputc>:
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	fb 01       	movw	r30, r22
     f14:	23 81       	ldd	r18, Z+3	; 0x03
     f16:	21 fd       	sbrc	r18, 1
     f18:	03 c0       	rjmp	.+6      	; 0xf20 <fputc+0x16>
     f1a:	8f ef       	ldi	r24, 0xFF	; 255
     f1c:	9f ef       	ldi	r25, 0xFF	; 255
     f1e:	2c c0       	rjmp	.+88     	; 0xf78 <fputc+0x6e>
     f20:	22 ff       	sbrs	r18, 2
     f22:	16 c0       	rjmp	.+44     	; 0xf50 <fputc+0x46>
     f24:	46 81       	ldd	r20, Z+6	; 0x06
     f26:	57 81       	ldd	r21, Z+7	; 0x07
     f28:	24 81       	ldd	r18, Z+4	; 0x04
     f2a:	35 81       	ldd	r19, Z+5	; 0x05
     f2c:	42 17       	cp	r20, r18
     f2e:	53 07       	cpc	r21, r19
     f30:	44 f4       	brge	.+16     	; 0xf42 <fputc+0x38>
     f32:	a0 81       	ld	r26, Z
     f34:	b1 81       	ldd	r27, Z+1	; 0x01
     f36:	9d 01       	movw	r18, r26
     f38:	2f 5f       	subi	r18, 0xFF	; 255
     f3a:	3f 4f       	sbci	r19, 0xFF	; 255
     f3c:	31 83       	std	Z+1, r19	; 0x01
     f3e:	20 83       	st	Z, r18
     f40:	8c 93       	st	X, r24
     f42:	26 81       	ldd	r18, Z+6	; 0x06
     f44:	37 81       	ldd	r19, Z+7	; 0x07
     f46:	2f 5f       	subi	r18, 0xFF	; 255
     f48:	3f 4f       	sbci	r19, 0xFF	; 255
     f4a:	37 83       	std	Z+7, r19	; 0x07
     f4c:	26 83       	std	Z+6, r18	; 0x06
     f4e:	14 c0       	rjmp	.+40     	; 0xf78 <fputc+0x6e>
     f50:	8b 01       	movw	r16, r22
     f52:	ec 01       	movw	r28, r24
     f54:	fb 01       	movw	r30, r22
     f56:	00 84       	ldd	r0, Z+8	; 0x08
     f58:	f1 85       	ldd	r31, Z+9	; 0x09
     f5a:	e0 2d       	mov	r30, r0
     f5c:	09 95       	icall
     f5e:	89 2b       	or	r24, r25
     f60:	e1 f6       	brne	.-72     	; 0xf1a <fputc+0x10>
     f62:	d8 01       	movw	r26, r16
     f64:	16 96       	adiw	r26, 0x06	; 6
     f66:	8d 91       	ld	r24, X+
     f68:	9c 91       	ld	r25, X
     f6a:	17 97       	sbiw	r26, 0x07	; 7
     f6c:	01 96       	adiw	r24, 0x01	; 1
     f6e:	17 96       	adiw	r26, 0x07	; 7
     f70:	9c 93       	st	X, r25
     f72:	8e 93       	st	-X, r24
     f74:	16 97       	sbiw	r26, 0x06	; 6
     f76:	ce 01       	movw	r24, r28
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	08 95       	ret

00000f82 <__ultoa_invert>:
     f82:	fa 01       	movw	r30, r20
     f84:	aa 27       	eor	r26, r26
     f86:	28 30       	cpi	r18, 0x08	; 8
     f88:	51 f1       	breq	.+84     	; 0xfde <__ultoa_invert+0x5c>
     f8a:	20 31       	cpi	r18, 0x10	; 16
     f8c:	81 f1       	breq	.+96     	; 0xfee <__ultoa_invert+0x6c>
     f8e:	e8 94       	clt
     f90:	6f 93       	push	r22
     f92:	6e 7f       	andi	r22, 0xFE	; 254
     f94:	6e 5f       	subi	r22, 0xFE	; 254
     f96:	7f 4f       	sbci	r23, 0xFF	; 255
     f98:	8f 4f       	sbci	r24, 0xFF	; 255
     f9a:	9f 4f       	sbci	r25, 0xFF	; 255
     f9c:	af 4f       	sbci	r26, 0xFF	; 255
     f9e:	b1 e0       	ldi	r27, 0x01	; 1
     fa0:	3e d0       	rcall	.+124    	; 0x101e <__ultoa_invert+0x9c>
     fa2:	b4 e0       	ldi	r27, 0x04	; 4
     fa4:	3c d0       	rcall	.+120    	; 0x101e <__ultoa_invert+0x9c>
     fa6:	67 0f       	add	r22, r23
     fa8:	78 1f       	adc	r23, r24
     faa:	89 1f       	adc	r24, r25
     fac:	9a 1f       	adc	r25, r26
     fae:	a1 1d       	adc	r26, r1
     fb0:	68 0f       	add	r22, r24
     fb2:	79 1f       	adc	r23, r25
     fb4:	8a 1f       	adc	r24, r26
     fb6:	91 1d       	adc	r25, r1
     fb8:	a1 1d       	adc	r26, r1
     fba:	6a 0f       	add	r22, r26
     fbc:	71 1d       	adc	r23, r1
     fbe:	81 1d       	adc	r24, r1
     fc0:	91 1d       	adc	r25, r1
     fc2:	a1 1d       	adc	r26, r1
     fc4:	20 d0       	rcall	.+64     	; 0x1006 <__ultoa_invert+0x84>
     fc6:	09 f4       	brne	.+2      	; 0xfca <__ultoa_invert+0x48>
     fc8:	68 94       	set
     fca:	3f 91       	pop	r19
     fcc:	2a e0       	ldi	r18, 0x0A	; 10
     fce:	26 9f       	mul	r18, r22
     fd0:	11 24       	eor	r1, r1
     fd2:	30 19       	sub	r19, r0
     fd4:	30 5d       	subi	r19, 0xD0	; 208
     fd6:	31 93       	st	Z+, r19
     fd8:	de f6       	brtc	.-74     	; 0xf90 <__ultoa_invert+0xe>
     fda:	cf 01       	movw	r24, r30
     fdc:	08 95       	ret
     fde:	46 2f       	mov	r20, r22
     fe0:	47 70       	andi	r20, 0x07	; 7
     fe2:	40 5d       	subi	r20, 0xD0	; 208
     fe4:	41 93       	st	Z+, r20
     fe6:	b3 e0       	ldi	r27, 0x03	; 3
     fe8:	0f d0       	rcall	.+30     	; 0x1008 <__ultoa_invert+0x86>
     fea:	c9 f7       	brne	.-14     	; 0xfde <__ultoa_invert+0x5c>
     fec:	f6 cf       	rjmp	.-20     	; 0xfda <__ultoa_invert+0x58>
     fee:	46 2f       	mov	r20, r22
     ff0:	4f 70       	andi	r20, 0x0F	; 15
     ff2:	40 5d       	subi	r20, 0xD0	; 208
     ff4:	4a 33       	cpi	r20, 0x3A	; 58
     ff6:	18 f0       	brcs	.+6      	; 0xffe <__ultoa_invert+0x7c>
     ff8:	49 5d       	subi	r20, 0xD9	; 217
     ffa:	31 fd       	sbrc	r19, 1
     ffc:	40 52       	subi	r20, 0x20	; 32
     ffe:	41 93       	st	Z+, r20
    1000:	02 d0       	rcall	.+4      	; 0x1006 <__ultoa_invert+0x84>
    1002:	a9 f7       	brne	.-22     	; 0xfee <__ultoa_invert+0x6c>
    1004:	ea cf       	rjmp	.-44     	; 0xfda <__ultoa_invert+0x58>
    1006:	b4 e0       	ldi	r27, 0x04	; 4
    1008:	a6 95       	lsr	r26
    100a:	97 95       	ror	r25
    100c:	87 95       	ror	r24
    100e:	77 95       	ror	r23
    1010:	67 95       	ror	r22
    1012:	ba 95       	dec	r27
    1014:	c9 f7       	brne	.-14     	; 0x1008 <__ultoa_invert+0x86>
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	61 05       	cpc	r22, r1
    101a:	71 05       	cpc	r23, r1
    101c:	08 95       	ret
    101e:	9b 01       	movw	r18, r22
    1020:	ac 01       	movw	r20, r24
    1022:	0a 2e       	mov	r0, r26
    1024:	06 94       	lsr	r0
    1026:	57 95       	ror	r21
    1028:	47 95       	ror	r20
    102a:	37 95       	ror	r19
    102c:	27 95       	ror	r18
    102e:	ba 95       	dec	r27
    1030:	c9 f7       	brne	.-14     	; 0x1024 <__ultoa_invert+0xa2>
    1032:	62 0f       	add	r22, r18
    1034:	73 1f       	adc	r23, r19
    1036:	84 1f       	adc	r24, r20
    1038:	95 1f       	adc	r25, r21
    103a:	a0 1d       	adc	r26, r0
    103c:	08 95       	ret

0000103e <__prologue_saves__>:
    103e:	2f 92       	push	r2
    1040:	3f 92       	push	r3
    1042:	4f 92       	push	r4
    1044:	5f 92       	push	r5
    1046:	6f 92       	push	r6
    1048:	7f 92       	push	r7
    104a:	8f 92       	push	r8
    104c:	9f 92       	push	r9
    104e:	af 92       	push	r10
    1050:	bf 92       	push	r11
    1052:	cf 92       	push	r12
    1054:	df 92       	push	r13
    1056:	ef 92       	push	r14
    1058:	ff 92       	push	r15
    105a:	0f 93       	push	r16
    105c:	1f 93       	push	r17
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	ca 1b       	sub	r28, r26
    1068:	db 0b       	sbc	r29, r27
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	f8 94       	cli
    106e:	de bf       	out	0x3e, r29	; 62
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	cd bf       	out	0x3d, r28	; 61
    1074:	09 94       	ijmp

00001076 <__epilogue_restores__>:
    1076:	2a 88       	ldd	r2, Y+18	; 0x12
    1078:	39 88       	ldd	r3, Y+17	; 0x11
    107a:	48 88       	ldd	r4, Y+16	; 0x10
    107c:	5f 84       	ldd	r5, Y+15	; 0x0f
    107e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1080:	7d 84       	ldd	r7, Y+13	; 0x0d
    1082:	8c 84       	ldd	r8, Y+12	; 0x0c
    1084:	9b 84       	ldd	r9, Y+11	; 0x0b
    1086:	aa 84       	ldd	r10, Y+10	; 0x0a
    1088:	b9 84       	ldd	r11, Y+9	; 0x09
    108a:	c8 84       	ldd	r12, Y+8	; 0x08
    108c:	df 80       	ldd	r13, Y+7	; 0x07
    108e:	ee 80       	ldd	r14, Y+6	; 0x06
    1090:	fd 80       	ldd	r15, Y+5	; 0x05
    1092:	0c 81       	ldd	r16, Y+4	; 0x04
    1094:	1b 81       	ldd	r17, Y+3	; 0x03
    1096:	aa 81       	ldd	r26, Y+2	; 0x02
    1098:	b9 81       	ldd	r27, Y+1	; 0x01
    109a:	ce 0f       	add	r28, r30
    109c:	d1 1d       	adc	r29, r1
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	ed 01       	movw	r28, r26
    10aa:	08 95       	ret

000010ac <_exit>:
    10ac:	f8 94       	cli

000010ae <__stop_program>:
    10ae:	ff cf       	rjmp	.-2      	; 0x10ae <__stop_program>
