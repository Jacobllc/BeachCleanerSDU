
Final_implem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00000968  000009fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000968  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  0080015c  0080015c  00000a58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016cb  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d53  00000000  00000000  00002383  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fe0  00000000  00000000  000030d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000450  00000000  00000000  000040b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f0  00000000  00000000  00004508  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a2  00000000  00000000  00004cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000539a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 35       	cpi	r26, 0x5C	; 92
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e5       	ldi	r26, 0x5C	; 92
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 37       	cpi	r26, 0x7F	; 127
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1f 01 	call	0x23e	; 0x23e <main>
  9e:	0c 94 b2 04 	jmp	0x964	; 0x964 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_21>:

*/



ISR(ADC_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
	switch(ADMUX){
  c8:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  cc:	81 34       	cpi	r24, 0x41	; 65
  ce:	81 f0       	breq	.+32     	; 0xf0 <__vector_21+0x4a>
  d0:	18 f4       	brcc	.+6      	; 0xd8 <__vector_21+0x32>
  d2:	80 34       	cpi	r24, 0x40	; 64
  d4:	31 f0       	breq	.+12     	; 0xe2 <__vector_21+0x3c>
  d6:	20 c0       	rjmp	.+64     	; 0x118 <__vector_21+0x72>
  d8:	82 34       	cpi	r24, 0x42	; 66
  da:	89 f0       	breq	.+34     	; 0xfe <__vector_21+0x58>
  dc:	83 34       	cpi	r24, 0x43	; 67
  de:	b1 f0       	breq	.+44     	; 0x10c <__vector_21+0x66>
  e0:	1b c0       	rjmp	.+54     	; 0x118 <__vector_21+0x72>
		case 0x40:
		//printf("ADC1 RESULT = %d\n",adc_result);
		//printf("ADC CHANNEL 0\n");
		Max_Curren = 31;
  e2:	8f e1       	ldi	r24, 0x1F	; 31
  e4:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <Max_Curren>
		ADC_Channel = 1;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <ADC_Channel>
		break;
  ee:	18 c0       	rjmp	.+48     	; 0x120 <__vector_21+0x7a>
		
		case 0x41:
		//printf("ADC2 RESULT = %d\n",adc_result);
		//printf("ADC CHANNEL 1\n");
		Max_Curren = 32;
  f0:	80 e2       	ldi	r24, 0x20	; 32
  f2:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <Max_Curren>
		ADC_Channel = 2;
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <ADC_Channel>
		break;
  fc:	11 c0       	rjmp	.+34     	; 0x120 <__vector_21+0x7a>
		
		case 0x42:
		//printf("ADC3 RESULT = %d\n",adc_result);
		//printf("ADC CHANNEL 2\n");
		Max_Curren = 33;
  fe:	81 e2       	ldi	r24, 0x21	; 33
 100:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <Max_Curren>
		ADC_Channel = 3;
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <ADC_Channel>
		break;
 10a:	0a c0       	rjmp	.+20     	; 0x120 <__vector_21+0x7a>
		
		case 0x43:
		//printf("ADC4 RESULT = %d\n",adc_result);
		//printf("ADC CHANNEL 3\n");
		Max_Curren = 34;
 10c:	82 e2       	ldi	r24, 0x22	; 34
 10e:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <Max_Curren>
		ADC_Channel = 0;
 112:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <ADC_Channel>
		break;
 116:	04 c0       	rjmp	.+8      	; 0x120 <__vector_21+0x7a>
		default:
		printf("Broken!\n");
 118:	8c e1       	ldi	r24, 0x1C	; 28
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	0e 94 82 04 	call	0x904	; 0x904 <puts>
		break;
	}
}
 120:	ff 91       	pop	r31
 122:	ef 91       	pop	r30
 124:	bf 91       	pop	r27
 126:	af 91       	pop	r26
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	7f 91       	pop	r23
 12e:	6f 91       	pop	r22
 130:	5f 91       	pop	r21
 132:	4f 91       	pop	r20
 134:	3f 91       	pop	r19
 136:	2f 91       	pop	r18
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <I2C_recieve>:
		sei();
}

void i2c_transmit_data(uint8_t data)
{		
	TWDR = data;
 142:	cf 93       	push	r28
 144:	c8 2f       	mov	r28, r24
 146:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <bytes>
 14a:	81 11       	cpse	r24, r1
 14c:	06 c0       	rjmp	.+12     	; 0x15a <I2C_recieve+0x18>
 14e:	c0 93 6d 01 	sts	0x016D, r28	; 0x80016d <opcode>
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <bytes>
 158:	04 c0       	rjmp	.+8      	; 0x162 <I2C_recieve+0x20>
 15a:	c0 93 6a 01 	sts	0x016A, r28	; 0x80016a <data>
 15e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <i2c_service>
 162:	c0 93 6a 01 	sts	0x016A, r28	; 0x80016a <data>
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <I2C_data_NACK_request>:
 16a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <i2c_service>
 16e:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <data>
 172:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 176:	08 95       	ret

00000178 <i2c_init>:
 178:	f8 94       	cli
 17a:	88 0f       	add	r24, r24
 17c:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
 180:	85 ec       	ldi	r24, 0xC5	; 197
 182:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 186:	78 94       	sei
 188:	08 95       	ret

0000018a <set_data>:
}

void set_data(uint8_t value)
{
	data = value;
 18a:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <data>
 18e:	08 95       	ret

00000190 <__vector_24>:
}


 
ISR(TWI_vect)
{
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	2f 93       	push	r18
 19c:	3f 93       	push	r19
 19e:	4f 93       	push	r20
 1a0:	5f 93       	push	r21
 1a2:	6f 93       	push	r22
 1a4:	7f 93       	push	r23
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	af 93       	push	r26
 1ac:	bf 93       	push	r27
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31
	switch(TW_STATUS)
 1b2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1b6:	88 7f       	andi	r24, 0xF8	; 248
 1b8:	80 38       	cpi	r24, 0x80	; 128
 1ba:	49 f0       	breq	.+18     	; 0x1ce <__vector_24+0x3e>
 1bc:	18 f4       	brcc	.+6      	; 0x1c4 <__vector_24+0x34>
 1be:	88 23       	and	r24, r24
 1c0:	d1 f0       	breq	.+52     	; 0x1f6 <__vector_24+0x66>
 1c2:	1f c0       	rjmp	.+62     	; 0x202 <__vector_24+0x72>
 1c4:	88 3a       	cpi	r24, 0xA8	; 168
 1c6:	59 f0       	breq	.+22     	; 0x1de <__vector_24+0x4e>
 1c8:	88 3b       	cpi	r24, 0xB8	; 184
 1ca:	79 f0       	breq	.+30     	; 0x1ea <__vector_24+0x5a>
 1cc:	1a c0       	rjmp	.+52     	; 0x202 <__vector_24+0x72>
	{
		case TW_SR_DATA_ACK:
		// received data from master, call the receive callback
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 1ce:	85 ec       	ldi	r24, 0xC5	; 197
 1d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		I2C_recieve(TWDR);
 1d4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 1d8:	0e 94 a1 00 	call	0x142	; 0x142 <I2C_recieve>
		break;
 1dc:	15 c0       	rjmp	.+42     	; 0x208 <__vector_24+0x78>
		
		case TW_ST_SLA_ACK:
		// master is requesting data using NACK,master expects only one additional byte. call the request callback
		I2C_data_NACK_request();
 1de:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_data_NACK_request>
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 1e2:	85 ec       	ldi	r24, 0xC5	; 197
 1e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		
		break;
 1e8:	0f c0       	rjmp	.+30     	; 0x208 <__vector_24+0x78>
		
		case TW_ST_DATA_ACK:
		// master is requesting data using ACK, master expects multiple bytes. call the request callback
		I2C_data_NACK_request();
 1ea:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_data_NACK_request>
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 1ee:	85 ec       	ldi	r24, 0xC5	; 197
 1f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
 1f4:	09 c0       	rjmp	.+18     	; 0x208 <__vector_24+0x78>
		
		case TW_BUS_ERROR:
		// some sort of erroneous state, prepare TWI to be readdressed
		TWCR = 0;
 1f6:	ec eb       	ldi	r30, 0xBC	; 188
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	10 82       	st	Z, r1
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 1fc:	85 ec       	ldi	r24, 0xC5	; 197
 1fe:	80 83       	st	Z, r24
		break;
 200:	03 c0       	rjmp	.+6      	; 0x208 <__vector_24+0x78>
		
		default:
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 202:	85 ec       	ldi	r24, 0xC5	; 197
 204:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
	}
}
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	bf 91       	pop	r27
 20e:	af 91       	pop	r26
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	7f 91       	pop	r23
 216:	6f 91       	pop	r22
 218:	5f 91       	pop	r21
 21a:	4f 91       	pop	r20
 21c:	3f 91       	pop	r19
 21e:	2f 91       	pop	r18
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <IO_init>:


void IO_init(void){	///////////////////////// Initial Pin Setup
	
	// bit order 7 6 5 4 3 2 1 0
	DDRB  = 0b00001011;
 22a:	8b e0       	ldi	r24, 0x0B	; 11
 22c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000000;
 22e:	15 b8       	out	0x05, r1	; 5
	
	DDRC  = 0b00001111;
 230:	8f e0       	ldi	r24, 0x0F	; 15
 232:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b00000000;
 234:	18 b8       	out	0x08, r1	; 8
	
	DDRD  = 0b11101000;
 236:	88 ee       	ldi	r24, 0xE8	; 232
 238:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000000;
 23a:	1b b8       	out	0x0b, r1	; 11
 23c:	08 95       	ret

0000023e <main>:
//						Global Variables


int main(void)
{
	new_data = 0;
 23e:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <new_data>
	status = 0;
 242:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <status>
	zone = 0;	
 246:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <zone>
		
	uart_init();   // open the communication to the microcontroller
 24a:	0e 94 3e 04 	call	0x87c	; 0x87c <uart_init>
	io_redirect(); // redirect input and output to the uart	
 24e:	0e 94 4f 04 	call	0x89e	; 0x89e <io_redirect>
	IO_init();	   //
 252:	0e 94 15 01 	call	0x22a	; 0x22a <IO_init>
	TimersInit();
 256:	0e 94 2f 02 	call	0x45e	; 0x45e <TimersInit>
	Motor_init();
 25a:	0e 94 36 02 	call	0x46c	; 0x46c <Motor_init>
	//Enable_ADC();
	i2c_init(I2C_ADDR);	
 25e:	81 e4       	ldi	r24, 0x41	; 65
 260:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_init>
	sei();
 264:	78 94       	sei
	//sei();
		
    while(1) 
    {	
		
		if (new_data==1)
 266:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <new_data>
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	21 f4       	brne	.+8      	; 0x276 <main+0x38>
		{
			motor_handler();
 26e:	0e 94 9f 03 	call	0x73e	; 0x73e <motor_handler>
			new_data = 0;	
 272:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <new_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 276:	2f ef       	ldi	r18, 0xFF	; 255
 278:	83 ed       	ldi	r24, 0xD3	; 211
 27a:	90 e3       	ldi	r25, 0x30	; 48
 27c:	21 50       	subi	r18, 0x01	; 1
 27e:	80 40       	sbci	r24, 0x00	; 0
 280:	90 40       	sbci	r25, 0x00	; 0
 282:	e1 f7       	brne	.-8      	; 0x27c <main+0x3e>
 284:	00 c0       	rjmp	.+0      	; 0x286 <main+0x48>
 286:	00 00       	nop
 288:	ee cf       	rjmp	.-36     	; 0x266 <main+0x28>

0000028a <cal_checksum>:


int new_error=0;
char new_zone=0;
int cal_checksum(int value, char length)
{
 28a:	fc 01       	movw	r30, r24
	char array[length];
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	9b 01       	movw	r18, r22
 290:	21 50       	subi	r18, 0x01	; 1
 292:	31 09       	sbc	r19, r1
	char Checksum=0;
	for (int i=0; i<length; i++)
 294:	16 16       	cp	r1, r22
 296:	17 06       	cpc	r1, r23
 298:	74 f4       	brge	.+28     	; 0x2b6 <cal_checksum+0x2c>
 29a:	80 e0       	ldi	r24, 0x00	; 0
	{   array[i] = 0;
		array[i]= (value>>((length-1)-i)) & 1;
		Checksum^=array[i];
 29c:	af 01       	movw	r20, r30
 29e:	02 2e       	mov	r0, r18
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <cal_checksum+0x1c>
 2a2:	55 95       	asr	r21
 2a4:	47 95       	ror	r20
 2a6:	0a 94       	dec	r0
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <cal_checksum+0x18>
 2aa:	41 70       	andi	r20, 0x01	; 1
 2ac:	84 27       	eor	r24, r20
 2ae:	21 50       	subi	r18, 0x01	; 1
 2b0:	31 09       	sbc	r19, r1
 2b2:	a0 f7       	brcc	.-24     	; 0x29c <cal_checksum+0x12>
 2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <cal_checksum+0x2e>
int new_error=0;
char new_zone=0;
int cal_checksum(int value, char length)
{
	char array[length];
	char Checksum=0;
 2b6:	80 e0       	ldi	r24, 0x00	; 0
	{   array[i] = 0;
		array[i]= (value>>((length-1)-i)) & 1;
		Checksum^=array[i];
	}
	return Checksum;
}
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	08 95       	ret

000002bc <Motor_Send_Status>:



void Motor_Send_Status(void)
{
	if (bytes==2)
 2bc:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <bytes>
 2c0:	82 30       	cpi	r24, 0x02	; 2
 2c2:	59 f4       	brne	.+22     	; 0x2da <Motor_Send_Status+0x1e>
	{
		int checksum;
		
		checksum = cal_checksum(status, 8);
 2c4:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <status>
 2c8:	68 e0       	ldi	r22, 0x08	; 8
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 45 01 	call	0x28a	; 0x28a <cal_checksum>
		set_data(checksum);
 2d0:	0e 94 c5 00 	call	0x18a	; 0x18a <set_data>
		bytes=0;
 2d4:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <bytes>
 2d8:	08 95       	ret
	}
	else
	{
		set_data(status);
 2da:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <status>
 2de:	0e 94 c5 00 	call	0x18a	; 0x18a <set_data>
		bytes++;
 2e2:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <bytes>
 2e6:	8f 5f       	subi	r24, 0xFF	; 255
 2e8:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <bytes>
 2ec:	08 95       	ret

000002ee <Motor_Send_error>:
	}
}

void Motor_Send_error(void)
{
 2ee:	0f 93       	push	r16
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
	
	char received_checksum;
	if (bytes==3)
 2f4:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <bytes>
 2f8:	23 30       	cpi	r18, 0x03	; 3
 2fa:	e9 f4       	brne	.+58     	; 0x336 <Motor_Send_error+0x48>
	{
		received_checksum = data;
 2fc:	c0 91 6a 01 	lds	r28, 0x016A	; 0x80016a <data>
		int checksum = cal_checksum(new_error, 16);
 300:	00 91 5d 01 	lds	r16, 0x015D	; 0x80015d <new_error>
 304:	10 91 5e 01 	lds	r17, 0x015E	; 0x80015e <new_error+0x1>
 308:	60 e1       	ldi	r22, 0x10	; 16
 30a:	c8 01       	movw	r24, r16
 30c:	0e 94 45 01 	call	0x28a	; 0x28a <cal_checksum>
		
		if (checksum==received_checksum)
 310:	2c 2f       	mov	r18, r28
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	82 17       	cp	r24, r18
 316:	93 07       	cpc	r25, r19
 318:	39 f4       	brne	.+14     	; 0x328 <Motor_Send_error+0x3a>
		{
			error = new_error;
 31a:	10 93 6c 01 	sts	0x016C, r17	; 0x80016c <error+0x1>
 31e:	00 93 6b 01 	sts	0x016B, r16	; 0x80016b <error>
			new_data=1;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <new_data>
		}

		new_error=0;
 328:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <new_error+0x1>
 32c:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <new_error>
		bytes=0;
 330:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <bytes>
 334:	1f c0       	rjmp	.+62     	; 0x374 <Motor_Send_error+0x86>
		
	}
	else
	{
		new_error= new_error + (data << (8*(bytes-1)));
 336:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <data>
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	42 2f       	mov	r20, r18
 33e:	50 e0       	ldi	r21, 0x00	; 0
 340:	41 50       	subi	r20, 0x01	; 1
 342:	51 09       	sbc	r21, r1
 344:	44 0f       	add	r20, r20
 346:	55 1f       	adc	r21, r21
 348:	44 0f       	add	r20, r20
 34a:	55 1f       	adc	r21, r21
 34c:	44 0f       	add	r20, r20
 34e:	55 1f       	adc	r21, r21
 350:	02 c0       	rjmp	.+4      	; 0x356 <Motor_Send_error+0x68>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	4a 95       	dec	r20
 358:	e2 f7       	brpl	.-8      	; 0x352 <Motor_Send_error+0x64>
 35a:	40 91 5d 01 	lds	r20, 0x015D	; 0x80015d <new_error>
 35e:	50 91 5e 01 	lds	r21, 0x015E	; 0x80015e <new_error+0x1>
 362:	84 0f       	add	r24, r20
 364:	95 1f       	adc	r25, r21
 366:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <new_error+0x1>
 36a:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <new_error>
		bytes++;
 36e:	2f 5f       	subi	r18, 0xFF	; 255
 370:	20 93 69 01 	sts	0x0169, r18	; 0x800169 <bytes>
	}
}
 374:	cf 91       	pop	r28
 376:	1f 91       	pop	r17
 378:	0f 91       	pop	r16
 37a:	08 95       	ret

0000037c <Motor_Send_zone>:

void Motor_Send_zone(void)
{
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
	
		char received_checksum;
		if (bytes==2)
 380:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <bytes>
 384:	82 30       	cpi	r24, 0x02	; 2
 386:	a9 f4       	brne	.+42     	; 0x3b2 <Motor_Send_zone+0x36>
		{
			received_checksum = data;
 388:	c0 91 6a 01 	lds	r28, 0x016A	; 0x80016a <data>
			int checksum = cal_checksum(new_zone, 8);
 38c:	d0 91 5c 01 	lds	r29, 0x015C	; 0x80015c <__data_end>
 390:	68 e0       	ldi	r22, 0x08	; 8
 392:	8d 2f       	mov	r24, r29
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 45 01 	call	0x28a	; 0x28a <cal_checksum>
			
			if (checksum==received_checksum)
 39a:	2c 2f       	mov	r18, r28
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	82 17       	cp	r24, r18
 3a0:	93 07       	cpc	r25, r19
 3a2:	21 f4       	brne	.+8      	; 0x3ac <Motor_Send_zone+0x30>
			{
				zone = new_zone;
 3a4:	d0 93 68 01 	sts	0x0168, r29	; 0x800168 <zone>
				new_zone=0;
 3a8:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__data_end>
				
			}

			bytes=0;
 3ac:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <bytes>
 3b0:	07 c0       	rjmp	.+14     	; 0x3c0 <Motor_Send_zone+0x44>
			
		}
		else
		{
			new_zone = data;
 3b2:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <data>
 3b6:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <__data_end>
			bytes++;
 3ba:	8f 5f       	subi	r24, 0xFF	; 255
 3bc:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <bytes>
		}
	
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	08 95       	ret

000003c6 <i2c_service>:
}


void i2c_service(void)
{
	switch(opcode)
 3c6:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <opcode>
 3ca:	81 30       	cpi	r24, 0x01	; 1
 3cc:	39 f0       	breq	.+14     	; 0x3dc <i2c_service+0x16>
 3ce:	18 f0       	brcs	.+6      	; 0x3d6 <i2c_service+0x10>
 3d0:	82 30       	cpi	r24, 0x02	; 2
 3d2:	39 f0       	breq	.+14     	; 0x3e2 <i2c_service+0x1c>
 3d4:	08 95       	ret
	{
		case 0:
		{
			Motor_Send_Status();
 3d6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <Motor_Send_Status>
			break;
 3da:	08 95       	ret
		}
		
		case 1:
		{
			Motor_Send_error();
 3dc:	0e 94 77 01 	call	0x2ee	; 0x2ee <Motor_Send_error>
			break;
 3e0:	08 95       	ret
		}
		
		case 2:
		{
			Motor_Send_zone();
 3e2:	0e 94 be 01 	call	0x37c	; 0x37c <Motor_Send_zone>
 3e6:	08 95       	ret

000003e8 <T0_init>:


void print_pwm(void)
{
	printf("PWM m1 %d  PWM m2 %d  PWM m3 %d   PWM m4 %d\n",Motor_pwm.desired_pwm_m1, Motor_pwm.desired_pwm_m2,Motor_pwm.desired_pwm_m3, Motor_pwm.desired_pwm_m4);	
}
 3e8:	84 b5       	in	r24, 0x24	; 36
 3ea:	80 68       	ori	r24, 0x80	; 128
 3ec:	84 bd       	out	0x24, r24	; 36
 3ee:	84 b5       	in	r24, 0x24	; 36
 3f0:	80 62       	ori	r24, 0x20	; 32
 3f2:	84 bd       	out	0x24, r24	; 36
 3f4:	84 b5       	in	r24, 0x24	; 36
 3f6:	8b 60       	ori	r24, 0x0B	; 11
 3f8:	84 bd       	out	0x24, r24	; 36
 3fa:	17 bc       	out	0x27, r1	; 39
 3fc:	18 bc       	out	0x28, r1	; 40
 3fe:	85 b5       	in	r24, 0x25	; 37
 400:	82 60       	ori	r24, 0x02	; 2
 402:	85 bd       	out	0x25, r24	; 37
 404:	08 95       	ret

00000406 <T1_init>:
 406:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 40a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 40e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 412:	8f e9       	ldi	r24, 0x9F	; 159
 414:	9f e0       	ldi	r25, 0x0F	; 15
 416:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 41a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 41e:	e1 e8       	ldi	r30, 0x81	; 129
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	89 60       	ori	r24, 0x09	; 9
 426:	80 83       	st	Z, r24
 428:	ef e6       	ldi	r30, 0x6F	; 111
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	80 81       	ld	r24, Z
 42e:	82 60       	ori	r24, 0x02	; 2
 430:	80 83       	st	Z, r24
 432:	08 95       	ret

00000434 <T2_init>:
 434:	e0 eb       	ldi	r30, 0xB0	; 176
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	80 68       	ori	r24, 0x80	; 128
 43c:	80 83       	st	Z, r24
 43e:	80 81       	ld	r24, Z
 440:	80 62       	ori	r24, 0x20	; 32
 442:	80 83       	st	Z, r24
 444:	80 81       	ld	r24, Z
 446:	8b 60       	ori	r24, 0x0B	; 11
 448:	80 83       	st	Z, r24
 44a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 44e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 452:	e1 eb       	ldi	r30, 0xB1	; 177
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	80 81       	ld	r24, Z
 458:	82 60       	ori	r24, 0x02	; 2
 45a:	80 83       	st	Z, r24
 45c:	08 95       	ret

0000045e <TimersInit>:
 45e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <T0_init>
 462:	0e 94 03 02 	call	0x406	; 0x406 <T1_init>
 466:	0e 94 1a 02 	call	0x434	; 0x434 <T2_init>
 46a:	08 95       	ret

0000046c <Motor_init>:
 46c:	ef e6       	ldi	r30, 0x6F	; 111
 46e:	f1 e0       	ldi	r31, 0x01	; 1
 470:	11 82       	std	Z+1, r1	; 0x01
 472:	10 82       	st	Z, r1
 474:	13 82       	std	Z+3, r1	; 0x03
 476:	12 82       	std	Z+2, r1	; 0x02
 478:	15 82       	std	Z+5, r1	; 0x05
 47a:	14 82       	std	Z+4, r1	; 0x04
 47c:	17 82       	std	Z+7, r1	; 0x07
 47e:	16 82       	std	Z+6, r1	; 0x06
 480:	5c 98       	cbi	0x0b, 4	; 11
 482:	08 95       	ret

00000484 <change_pwm_slow>:
 484:	87 b5       	in	r24, 0x27	; 39
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <Motor_pwm>
 48c:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <Motor_pwm+0x1>
 490:	82 17       	cp	r24, r18
 492:	93 07       	cpc	r25, r19
 494:	4c f4       	brge	.+18     	; 0x4a8 <change_pwm_slow+0x24>
 496:	87 b5       	in	r24, 0x27	; 39
 498:	8d 32       	cpi	r24, 0x2D	; 45
 49a:	18 f4       	brcc	.+6      	; 0x4a2 <change_pwm_slow+0x1e>
 49c:	8d e2       	ldi	r24, 0x2D	; 45
 49e:	87 bd       	out	0x27, r24	; 39
 4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <change_pwm_slow+0x24>
 4a2:	87 b5       	in	r24, 0x27	; 39
 4a4:	8f 5f       	subi	r24, 0xFF	; 255
 4a6:	87 bd       	out	0x27, r24	; 39
 4a8:	87 b5       	in	r24, 0x27	; 39
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <Motor_pwm>
 4b0:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <Motor_pwm+0x1>
 4b4:	28 17       	cp	r18, r24
 4b6:	39 07       	cpc	r19, r25
 4b8:	44 f4       	brge	.+16     	; 0x4ca <change_pwm_slow+0x46>
 4ba:	87 b5       	in	r24, 0x27	; 39
 4bc:	8e 32       	cpi	r24, 0x2E	; 46
 4be:	20 f0       	brcs	.+8      	; 0x4c8 <change_pwm_slow+0x44>
 4c0:	87 b5       	in	r24, 0x27	; 39
 4c2:	81 50       	subi	r24, 0x01	; 1
 4c4:	87 bd       	out	0x27, r24	; 39
 4c6:	01 c0       	rjmp	.+2      	; 0x4ca <change_pwm_slow+0x46>
 4c8:	17 bc       	out	0x27, r1	; 39
 4ca:	88 b5       	in	r24, 0x28	; 40
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <Motor_pwm+0x2>
 4d2:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <Motor_pwm+0x3>
 4d6:	82 17       	cp	r24, r18
 4d8:	93 07       	cpc	r25, r19
 4da:	4c f4       	brge	.+18     	; 0x4ee <change_pwm_slow+0x6a>
 4dc:	88 b5       	in	r24, 0x28	; 40
 4de:	8d 32       	cpi	r24, 0x2D	; 45
 4e0:	18 f4       	brcc	.+6      	; 0x4e8 <change_pwm_slow+0x64>
 4e2:	8d e2       	ldi	r24, 0x2D	; 45
 4e4:	88 bd       	out	0x28, r24	; 40
 4e6:	03 c0       	rjmp	.+6      	; 0x4ee <change_pwm_slow+0x6a>
 4e8:	88 b5       	in	r24, 0x28	; 40
 4ea:	8f 5f       	subi	r24, 0xFF	; 255
 4ec:	88 bd       	out	0x28, r24	; 40
 4ee:	88 b5       	in	r24, 0x28	; 40
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <Motor_pwm+0x2>
 4f6:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <Motor_pwm+0x3>
 4fa:	28 17       	cp	r18, r24
 4fc:	39 07       	cpc	r19, r25
 4fe:	44 f4       	brge	.+16     	; 0x510 <change_pwm_slow+0x8c>
 500:	88 b5       	in	r24, 0x28	; 40
 502:	8e 32       	cpi	r24, 0x2E	; 46
 504:	20 f0       	brcs	.+8      	; 0x50e <change_pwm_slow+0x8a>
 506:	88 b5       	in	r24, 0x28	; 40
 508:	81 50       	subi	r24, 0x01	; 1
 50a:	88 bd       	out	0x28, r24	; 40
 50c:	08 95       	ret
 50e:	18 bc       	out	0x28, r1	; 40
 510:	08 95       	ret

00000512 <change_pwm_fast>:
 512:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <Motor_pwm+0x4>
 51c:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <Motor_pwm+0x5>
 520:	82 17       	cp	r24, r18
 522:	93 07       	cpc	r25, r19
 524:	6c f4       	brge	.+26     	; 0x540 <change_pwm_fast+0x2e>
 526:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 52a:	8d 32       	cpi	r24, 0x2D	; 45
 52c:	20 f4       	brcc	.+8      	; 0x536 <change_pwm_fast+0x24>
 52e:	8d e2       	ldi	r24, 0x2D	; 45
 530:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 534:	05 c0       	rjmp	.+10     	; 0x540 <change_pwm_fast+0x2e>
 536:	e3 eb       	ldi	r30, 0xB3	; 179
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	80 81       	ld	r24, Z
 53c:	8f 5f       	subi	r24, 0xFF	; 255
 53e:	80 83       	st	Z, r24
 540:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <Motor_pwm+0x4>
 54a:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <Motor_pwm+0x5>
 54e:	28 17       	cp	r18, r24
 550:	39 07       	cpc	r19, r25
 552:	64 f4       	brge	.+24     	; 0x56c <change_pwm_fast+0x5a>
 554:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 558:	8e 32       	cpi	r24, 0x2E	; 46
 55a:	30 f0       	brcs	.+12     	; 0x568 <change_pwm_fast+0x56>
 55c:	e3 eb       	ldi	r30, 0xB3	; 179
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	80 81       	ld	r24, Z
 562:	81 50       	subi	r24, 0x01	; 1
 564:	80 83       	st	Z, r24
 566:	02 c0       	rjmp	.+4      	; 0x56c <change_pwm_fast+0x5a>
 568:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 56c:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	20 91 75 01 	lds	r18, 0x0175	; 0x800175 <Motor_pwm+0x6>
 576:	30 91 76 01 	lds	r19, 0x0176	; 0x800176 <Motor_pwm+0x7>
 57a:	82 17       	cp	r24, r18
 57c:	93 07       	cpc	r25, r19
 57e:	6c f4       	brge	.+26     	; 0x59a <change_pwm_fast+0x88>
 580:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 584:	8d 32       	cpi	r24, 0x2D	; 45
 586:	20 f4       	brcc	.+8      	; 0x590 <change_pwm_fast+0x7e>
 588:	8d e2       	ldi	r24, 0x2D	; 45
 58a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 58e:	05 c0       	rjmp	.+10     	; 0x59a <change_pwm_fast+0x88>
 590:	e4 eb       	ldi	r30, 0xB4	; 180
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	80 81       	ld	r24, Z
 596:	8f 5f       	subi	r24, 0xFF	; 255
 598:	80 83       	st	Z, r24
 59a:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	20 91 75 01 	lds	r18, 0x0175	; 0x800175 <Motor_pwm+0x6>
 5a4:	30 91 76 01 	lds	r19, 0x0176	; 0x800176 <Motor_pwm+0x7>
 5a8:	28 17       	cp	r18, r24
 5aa:	39 07       	cpc	r19, r25
 5ac:	64 f4       	brge	.+24     	; 0x5c6 <change_pwm_fast+0xb4>
 5ae:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 5b2:	8e 32       	cpi	r24, 0x2E	; 46
 5b4:	30 f0       	brcs	.+12     	; 0x5c2 <change_pwm_fast+0xb0>
 5b6:	e4 eb       	ldi	r30, 0xB4	; 180
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	80 81       	ld	r24, Z
 5bc:	81 50       	subi	r24, 0x01	; 1
 5be:	80 83       	st	Z, r24
 5c0:	08 95       	ret
 5c2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 5c6:	08 95       	ret

000005c8 <startup_sort>:
 5c8:	5c 9a       	sbi	0x0b, 4	; 11
 5ca:	ef e6       	ldi	r30, 0x6F	; 111
 5cc:	f1 e0       	ldi	r31, 0x01	; 1
 5ce:	8f ef       	ldi	r24, 0xFF	; 255
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	91 83       	std	Z+1, r25	; 0x01
 5d4:	80 83       	st	Z, r24
 5d6:	93 83       	std	Z+3, r25	; 0x03
 5d8:	82 83       	std	Z+2, r24	; 0x02
 5da:	08 95       	ret

000005dc <stop_sort>:
 5dc:	ef e6       	ldi	r30, 0x6F	; 111
 5de:	f1 e0       	ldi	r31, 0x01	; 1
 5e0:	11 82       	std	Z+1, r1	; 0x01
 5e2:	10 82       	st	Z, r1
 5e4:	13 82       	std	Z+3, r1	; 0x03
 5e6:	12 82       	std	Z+2, r1	; 0x02
 5e8:	5c 98       	cbi	0x0b, 4	; 11
 5ea:	08 95       	ret

000005ec <StopDrive>:
 5ec:	ef e6       	ldi	r30, 0x6F	; 111
 5ee:	f1 e0       	ldi	r31, 0x01	; 1
 5f0:	15 82       	std	Z+5, r1	; 0x05
 5f2:	14 82       	std	Z+4, r1	; 0x04
 5f4:	17 82       	std	Z+7, r1	; 0x07
 5f6:	16 82       	std	Z+6, r1	; 0x06
 5f8:	08 95       	ret

000005fa <turn_right>:
 5fa:	4f 99       	sbic	0x09, 7	; 9
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <turn_right+0x8>
 5fe:	18 9b       	sbis	0x03, 0	; 3
 600:	0e c0       	rjmp	.+28     	; 0x61e <turn_right+0x24>
 602:	0e 94 f6 02 	call	0x5ec	; 0x5ec <StopDrive>
 606:	e3 eb       	ldi	r30, 0xB3	; 179
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	a4 eb       	ldi	r26, 0xB4	; 180
 60c:	b0 e0       	ldi	r27, 0x00	; 0
 60e:	80 81       	ld	r24, Z
 610:	88 23       	and	r24, r24
 612:	19 f0       	breq	.+6      	; 0x61a <turn_right+0x20>
 614:	8c 91       	ld	r24, X
 616:	81 11       	cpse	r24, r1
 618:	fa cf       	rjmp	.-12     	; 0x60e <turn_right+0x14>
 61a:	5f 98       	cbi	0x0b, 7	; 11
 61c:	28 98       	cbi	0x05, 0	; 5
 61e:	ef e6       	ldi	r30, 0x6F	; 111
 620:	f1 e0       	ldi	r31, 0x01	; 1
 622:	8f ef       	ldi	r24, 0xFF	; 255
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	95 83       	std	Z+5, r25	; 0x05
 628:	84 83       	std	Z+4, r24	; 0x04
 62a:	97 83       	std	Z+7, r25	; 0x07
 62c:	86 83       	std	Z+6, r24	; 0x06
 62e:	08 95       	ret

00000630 <turn_left>:
 630:	4f 9b       	sbis	0x09, 7	; 9
 632:	02 c0       	rjmp	.+4      	; 0x638 <turn_left+0x8>
 634:	18 99       	sbic	0x03, 0	; 3
 636:	0e c0       	rjmp	.+28     	; 0x654 <turn_left+0x24>
 638:	0e 94 f6 02 	call	0x5ec	; 0x5ec <StopDrive>
 63c:	e3 eb       	ldi	r30, 0xB3	; 179
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	a4 eb       	ldi	r26, 0xB4	; 180
 642:	b0 e0       	ldi	r27, 0x00	; 0
 644:	80 81       	ld	r24, Z
 646:	88 23       	and	r24, r24
 648:	19 f0       	breq	.+6      	; 0x650 <turn_left+0x20>
 64a:	8c 91       	ld	r24, X
 64c:	81 11       	cpse	r24, r1
 64e:	fa cf       	rjmp	.-12     	; 0x644 <turn_left+0x14>
 650:	5f 9a       	sbi	0x0b, 7	; 11
 652:	28 9a       	sbi	0x05, 0	; 5
 654:	ef e6       	ldi	r30, 0x6F	; 111
 656:	f1 e0       	ldi	r31, 0x01	; 1
 658:	8f ef       	ldi	r24, 0xFF	; 255
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	95 83       	std	Z+5, r25	; 0x05
 65e:	84 83       	std	Z+4, r24	; 0x04
 660:	97 83       	std	Z+7, r25	; 0x07
 662:	86 83       	std	Z+6, r24	; 0x06
 664:	08 95       	ret

00000666 <CalculatePwm>:
 666:	cf 93       	push	r28
 668:	df 93       	push	r29
 66a:	ec 01       	movw	r28, r24
 66c:	0f 96       	adiw	r24, 0x0f	; 15
 66e:	4f 97       	sbiw	r24, 0x1f	; 31
 670:	08 f0       	brcs	.+2      	; 0x674 <CalculatePwm+0xe>
 672:	58 c0       	rjmp	.+176    	; 0x724 <CalculatePwm+0xbe>
 674:	4f 9b       	sbis	0x09, 7	; 9
 676:	02 c0       	rjmp	.+4      	; 0x67c <CalculatePwm+0x16>
 678:	18 9b       	sbis	0x03, 0	; 3
 67a:	0e c0       	rjmp	.+28     	; 0x698 <CalculatePwm+0x32>
 67c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <StopDrive>
 680:	e3 eb       	ldi	r30, 0xB3	; 179
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	a4 eb       	ldi	r26, 0xB4	; 180
 686:	b0 e0       	ldi	r27, 0x00	; 0
 688:	80 81       	ld	r24, Z
 68a:	88 23       	and	r24, r24
 68c:	19 f0       	breq	.+6      	; 0x694 <CalculatePwm+0x2e>
 68e:	8c 91       	ld	r24, X
 690:	81 11       	cpse	r24, r1
 692:	fa cf       	rjmp	.-12     	; 0x688 <CalculatePwm+0x22>
 694:	5f 9a       	sbi	0x0b, 7	; 11
 696:	28 98       	cbi	0x05, 0	; 5
 698:	dd 23       	and	r29, r29
 69a:	1c f1       	brlt	.+70     	; 0x6e2 <CalculatePwm+0x7c>
 69c:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <PWM_MAX>
 6a0:	30 91 78 01 	lds	r19, 0x0178	; 0x800178 <PWM_MAX+0x1>
 6a4:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <PWM_MAX>
 6a8:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <PWM_MAX+0x1>
 6ac:	ef e6       	ldi	r30, 0x6F	; 111
 6ae:	f1 e0       	ldi	r31, 0x01	; 1
 6b0:	8d 97       	sbiw	r24, 0x2d	; 45
 6b2:	6f e0       	ldi	r22, 0x0F	; 15
 6b4:	70 e0       	ldi	r23, 0x00	; 0
 6b6:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__divmodhi4>
 6ba:	6c 9f       	mul	r22, r28
 6bc:	c0 01       	movw	r24, r0
 6be:	6d 9f       	mul	r22, r29
 6c0:	90 0d       	add	r25, r0
 6c2:	7c 9f       	mul	r23, r28
 6c4:	90 0d       	add	r25, r0
 6c6:	11 24       	eor	r1, r1
 6c8:	28 1b       	sub	r18, r24
 6ca:	39 0b       	sbc	r19, r25
 6cc:	35 83       	std	Z+5, r19	; 0x05
 6ce:	24 83       	std	Z+4, r18	; 0x04
 6d0:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <PWM_MAX>
 6d4:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <PWM_MAX+0x1>
 6d8:	97 83       	std	Z+7, r25	; 0x07
 6da:	86 83       	std	Z+6, r24	; 0x06
 6dc:	1c 16       	cp	r1, r28
 6de:	1d 06       	cpc	r1, r29
 6e0:	5c f1       	brlt	.+86     	; 0x738 <CalculatePwm+0xd2>
 6e2:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <PWM_MAX>
 6e6:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <PWM_MAX+0x1>
 6ea:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <PWM_MAX>
 6ee:	30 91 78 01 	lds	r19, 0x0178	; 0x800178 <PWM_MAX+0x1>
 6f2:	ef e6       	ldi	r30, 0x6F	; 111
 6f4:	f1 e0       	ldi	r31, 0x01	; 1
 6f6:	8d 97       	sbiw	r24, 0x2d	; 45
 6f8:	6f e0       	ldi	r22, 0x0F	; 15
 6fa:	70 e0       	ldi	r23, 0x00	; 0
 6fc:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__divmodhi4>
 700:	6c 9f       	mul	r22, r28
 702:	c0 01       	movw	r24, r0
 704:	6d 9f       	mul	r22, r29
 706:	90 0d       	add	r25, r0
 708:	7c 9f       	mul	r23, r28
 70a:	90 0d       	add	r25, r0
 70c:	11 24       	eor	r1, r1
 70e:	28 0f       	add	r18, r24
 710:	39 1f       	adc	r19, r25
 712:	37 83       	std	Z+7, r19	; 0x07
 714:	26 83       	std	Z+6, r18	; 0x06
 716:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <PWM_MAX>
 71a:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <PWM_MAX+0x1>
 71e:	95 83       	std	Z+5, r25	; 0x05
 720:	84 83       	std	Z+4, r24	; 0x04
 722:	0a c0       	rjmp	.+20     	; 0x738 <CalculatePwm+0xd2>
 724:	c0 31       	cpi	r28, 0x10	; 16
 726:	d1 05       	cpc	r29, r1
 728:	14 f0       	brlt	.+4      	; 0x72e <CalculatePwm+0xc8>
 72a:	0e 94 18 03 	call	0x630	; 0x630 <turn_left>
 72e:	c1 3f       	cpi	r28, 0xF1	; 241
 730:	df 4f       	sbci	r29, 0xFF	; 255
 732:	14 f4       	brge	.+4      	; 0x738 <CalculatePwm+0xd2>
 734:	0e 94 fd 02 	call	0x5fa	; 0x5fa <turn_right>
 738:	df 91       	pop	r29
 73a:	cf 91       	pop	r28
 73c:	08 95       	ret

0000073e <motor_handler>:
 73e:	8f ef       	ldi	r24, 0xFF	; 255
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <PWM_MAX+0x1>
 746:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <PWM_MAX>
 74a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <zone>
 74e:	82 30       	cpi	r24, 0x02	; 2
 750:	99 f0       	breq	.+38     	; 0x778 <motor_handler+0x3a>
 752:	28 f4       	brcc	.+10     	; 0x75e <motor_handler+0x20>
 754:	88 23       	and	r24, r24
 756:	41 f0       	breq	.+16     	; 0x768 <motor_handler+0x2a>
 758:	81 30       	cpi	r24, 0x01	; 1
 75a:	59 f0       	breq	.+22     	; 0x772 <motor_handler+0x34>
 75c:	08 95       	ret
 75e:	83 30       	cpi	r24, 0x03	; 3
 760:	89 f0       	breq	.+34     	; 0x784 <motor_handler+0x46>
 762:	84 30       	cpi	r24, 0x04	; 4
 764:	b1 f0       	breq	.+44     	; 0x792 <motor_handler+0x54>
 766:	08 95       	ret
 768:	0e 94 f6 02 	call	0x5ec	; 0x5ec <StopDrive>
 76c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <stop_sort>
 770:	08 95       	ret
 772:	0e 94 f6 02 	call	0x5ec	; 0x5ec <StopDrive>
 776:	08 95       	ret
 778:	82 eb       	ldi	r24, 0xB2	; 178
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <PWM_MAX+0x1>
 780:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <PWM_MAX>
 784:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <error>
 788:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <error+0x1>
 78c:	0e 94 33 03 	call	0x666	; 0x666 <CalculatePwm>
 790:	08 95       	ret
 792:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <startup_sort>
 796:	84 e2       	ldi	r24, 0x24	; 36
 798:	91 e0       	ldi	r25, 0x01	; 1
 79a:	0e 94 82 04 	call	0x904	; 0x904 <puts>
 79e:	08 95       	ret

000007a0 <__vector_11>:



ISR(TIMER1_COMPA_vect)
{
 7a0:	1f 92       	push	r1
 7a2:	0f 92       	push	r0
 7a4:	0f b6       	in	r0, 0x3f	; 63
 7a6:	0f 92       	push	r0
 7a8:	11 24       	eor	r1, r1
 7aa:	2f 93       	push	r18
 7ac:	3f 93       	push	r19
 7ae:	4f 93       	push	r20
 7b0:	5f 93       	push	r21
 7b2:	6f 93       	push	r22
 7b4:	7f 93       	push	r23
 7b6:	8f 93       	push	r24
 7b8:	9f 93       	push	r25
 7ba:	af 93       	push	r26
 7bc:	bf 93       	push	r27
 7be:	ef 93       	push	r30
 7c0:	ff 93       	push	r31
	counter_rampslow++;
 7c2:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <counter_rampslow>
 7c6:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <counter_rampslow+0x1>
 7ca:	01 96       	adiw	r24, 0x01	; 1
 7cc:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <counter_rampslow+0x1>
 7d0:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <counter_rampslow>
	
	if (zone!=1)
 7d4:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <zone>
 7d8:	81 30       	cpi	r24, 0x01	; 1
 7da:	49 f0       	breq	.+18     	; 0x7ee <__vector_11+0x4e>
	{
		counter_safety++;
 7dc:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <counter_safety>
 7e0:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <counter_safety+0x1>
 7e4:	01 96       	adiw	r24, 0x01	; 1
 7e6:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <counter_safety+0x1>
 7ea:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <counter_safety>
	}
	
	Toggle(pd2);
 7ee:	9b b1       	in	r25, 0x0b	; 11
 7f0:	84 e0       	ldi	r24, 0x04	; 4
 7f2:	89 27       	eor	r24, r25
 7f4:	8b b9       	out	0x0b, r24	; 11
	
	if (counter_rampslow>rampslow_scale)
 7f6:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <counter_rampslow>
 7fa:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <counter_rampslow+0x1>
 7fe:	85 36       	cpi	r24, 0x65	; 101
 800:	91 05       	cpc	r25, r1
 802:	44 f0       	brlt	.+16     	; 0x814 <__vector_11+0x74>
	{
		change_pwm_slow();
 804:	0e 94 42 02 	call	0x484	; 0x484 <change_pwm_slow>
		change_pwm_fast();
 808:	0e 94 89 02 	call	0x512	; 0x512 <change_pwm_fast>
		counter_rampslow=0;
 80c:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <counter_rampslow+0x1>
 810:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <counter_rampslow>
	}
	

	if (counter_safety>safty_scale)
 814:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <counter_safety>
 818:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <counter_safety+0x1>
 81c:	81 39       	cpi	r24, 0x91	; 145
 81e:	91 40       	sbci	r25, 0x01	; 1
 820:	24 f0       	brlt	.+8      	; 0x82a <__vector_11+0x8a>
	{
		Toggle(pd2);	
 822:	9b b1       	in	r25, 0x0b	; 11
 824:	84 e0       	ldi	r24, 0x04	; 4
 826:	89 27       	eor	r24, r25
 828:	8b b9       	out	0x0b, r24	; 11
	}
	
}
 82a:	ff 91       	pop	r31
 82c:	ef 91       	pop	r30
 82e:	bf 91       	pop	r27
 830:	af 91       	pop	r26
 832:	9f 91       	pop	r25
 834:	8f 91       	pop	r24
 836:	7f 91       	pop	r23
 838:	6f 91       	pop	r22
 83a:	5f 91       	pop	r21
 83c:	4f 91       	pop	r20
 83e:	3f 91       	pop	r19
 840:	2f 91       	pop	r18
 842:	0f 90       	pop	r0
 844:	0f be       	out	0x3f, r0	; 63
 846:	0f 90       	pop	r0
 848:	1f 90       	pop	r1
 84a:	18 95       	reti

0000084c <uart_putchar>:
		stdout = &uart_output;	//redirect standard output to uart
		stdin  = &uart_input;  //redirect standard input to uart
}
	

void uart_putchar(char c, FILE *stream) {
 84c:	cf 93       	push	r28
 84e:	c8 2f       	mov	r28, r24
	if (c == '\n') {
 850:	8a 30       	cpi	r24, 0x0A	; 10
 852:	19 f4       	brne	.+6      	; 0x85a <uart_putchar+0xe>
		uart_putchar('\r', stream);
 854:	8d e0       	ldi	r24, 0x0D	; 13
 856:	0e 94 26 04 	call	0x84c	; 0x84c <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
 85a:	e0 ec       	ldi	r30, 0xC0	; 192
 85c:	f0 e0       	ldi	r31, 0x00	; 0
 85e:	80 81       	ld	r24, Z
 860:	85 ff       	sbrs	r24, 5
 862:	fd cf       	rjmp	.-6      	; 0x85e <uart_putchar+0x12>
	UDR0 = c;
 864:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 868:	cf 91       	pop	r28
 86a:	08 95       	ret

0000086c <uart_getchar>:

char uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0);
 86c:	e0 ec       	ldi	r30, 0xC0	; 192
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	80 81       	ld	r24, Z
 872:	88 23       	and	r24, r24
 874:	ec f7       	brge	.-6      	; 0x870 <uart_getchar+0x4>
	return UDR0;
 876:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 87a:	08 95       	ret

0000087c <uart_init>:
FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);


void uart_init(void) {
	
	UBRR0H = UBRRH_VALUE;
 87c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 880:	87 e6       	ldi	r24, 0x67	; 103
 882:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
 886:	e0 ec       	ldi	r30, 0xC0	; 192
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	80 81       	ld	r24, Z
 88c:	8d 7f       	andi	r24, 0xFD	; 253
 88e:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
 890:	86 e0       	ldi	r24, 0x06	; 6
 892:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
 896:	88 e1       	ldi	r24, 0x18	; 24
 898:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 89c:	08 95       	ret

0000089e <io_redirect>:
}

void io_redirect(void ){
		
		
		stdout = &uart_output;	//redirect standard output to uart
 89e:	e9 e7       	ldi	r30, 0x79	; 121
 8a0:	f1 e0       	ldi	r31, 0x01	; 1
 8a2:	8e e0       	ldi	r24, 0x0E	; 14
 8a4:	91 e0       	ldi	r25, 0x01	; 1
 8a6:	93 83       	std	Z+3, r25	; 0x03
 8a8:	82 83       	std	Z+2, r24	; 0x02
		stdin  = &uart_input;  //redirect standard input to uart
 8aa:	80 e0       	ldi	r24, 0x00	; 0
 8ac:	91 e0       	ldi	r25, 0x01	; 1
 8ae:	91 83       	std	Z+1, r25	; 0x01
 8b0:	80 83       	st	Z, r24
 8b2:	08 95       	ret

000008b4 <__divmodhi4>:
 8b4:	97 fb       	bst	r25, 7
 8b6:	07 2e       	mov	r0, r23
 8b8:	16 f4       	brtc	.+4      	; 0x8be <__divmodhi4+0xa>
 8ba:	00 94       	com	r0
 8bc:	07 d0       	rcall	.+14     	; 0x8cc <__divmodhi4_neg1>
 8be:	77 fd       	sbrc	r23, 7
 8c0:	09 d0       	rcall	.+18     	; 0x8d4 <__divmodhi4_neg2>
 8c2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__udivmodhi4>
 8c6:	07 fc       	sbrc	r0, 7
 8c8:	05 d0       	rcall	.+10     	; 0x8d4 <__divmodhi4_neg2>
 8ca:	3e f4       	brtc	.+14     	; 0x8da <__divmodhi4_exit>

000008cc <__divmodhi4_neg1>:
 8cc:	90 95       	com	r25
 8ce:	81 95       	neg	r24
 8d0:	9f 4f       	sbci	r25, 0xFF	; 255
 8d2:	08 95       	ret

000008d4 <__divmodhi4_neg2>:
 8d4:	70 95       	com	r23
 8d6:	61 95       	neg	r22
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255

000008da <__divmodhi4_exit>:
 8da:	08 95       	ret

000008dc <__udivmodhi4>:
 8dc:	aa 1b       	sub	r26, r26
 8de:	bb 1b       	sub	r27, r27
 8e0:	51 e1       	ldi	r21, 0x11	; 17
 8e2:	07 c0       	rjmp	.+14     	; 0x8f2 <__udivmodhi4_ep>

000008e4 <__udivmodhi4_loop>:
 8e4:	aa 1f       	adc	r26, r26
 8e6:	bb 1f       	adc	r27, r27
 8e8:	a6 17       	cp	r26, r22
 8ea:	b7 07       	cpc	r27, r23
 8ec:	10 f0       	brcs	.+4      	; 0x8f2 <__udivmodhi4_ep>
 8ee:	a6 1b       	sub	r26, r22
 8f0:	b7 0b       	sbc	r27, r23

000008f2 <__udivmodhi4_ep>:
 8f2:	88 1f       	adc	r24, r24
 8f4:	99 1f       	adc	r25, r25
 8f6:	5a 95       	dec	r21
 8f8:	a9 f7       	brne	.-22     	; 0x8e4 <__udivmodhi4_loop>
 8fa:	80 95       	com	r24
 8fc:	90 95       	com	r25
 8fe:	bc 01       	movw	r22, r24
 900:	cd 01       	movw	r24, r26
 902:	08 95       	ret

00000904 <puts>:
 904:	0f 93       	push	r16
 906:	1f 93       	push	r17
 908:	cf 93       	push	r28
 90a:	df 93       	push	r29
 90c:	e0 91 7b 01 	lds	r30, 0x017B	; 0x80017b <__iob+0x2>
 910:	f0 91 7c 01 	lds	r31, 0x017C	; 0x80017c <__iob+0x3>
 914:	23 81       	ldd	r18, Z+3	; 0x03
 916:	21 ff       	sbrs	r18, 1
 918:	1b c0       	rjmp	.+54     	; 0x950 <puts+0x4c>
 91a:	8c 01       	movw	r16, r24
 91c:	d0 e0       	ldi	r29, 0x00	; 0
 91e:	c0 e0       	ldi	r28, 0x00	; 0
 920:	f8 01       	movw	r30, r16
 922:	81 91       	ld	r24, Z+
 924:	8f 01       	movw	r16, r30
 926:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <__iob+0x2>
 92a:	70 91 7c 01 	lds	r23, 0x017C	; 0x80017c <__iob+0x3>
 92e:	db 01       	movw	r26, r22
 930:	18 96       	adiw	r26, 0x08	; 8
 932:	ed 91       	ld	r30, X+
 934:	fc 91       	ld	r31, X
 936:	19 97       	sbiw	r26, 0x09	; 9
 938:	88 23       	and	r24, r24
 93a:	31 f0       	breq	.+12     	; 0x948 <puts+0x44>
 93c:	09 95       	icall
 93e:	89 2b       	or	r24, r25
 940:	79 f3       	breq	.-34     	; 0x920 <puts+0x1c>
 942:	df ef       	ldi	r29, 0xFF	; 255
 944:	cf ef       	ldi	r28, 0xFF	; 255
 946:	ec cf       	rjmp	.-40     	; 0x920 <puts+0x1c>
 948:	8a e0       	ldi	r24, 0x0A	; 10
 94a:	09 95       	icall
 94c:	89 2b       	or	r24, r25
 94e:	19 f0       	breq	.+6      	; 0x956 <puts+0x52>
 950:	8f ef       	ldi	r24, 0xFF	; 255
 952:	9f ef       	ldi	r25, 0xFF	; 255
 954:	02 c0       	rjmp	.+4      	; 0x95a <puts+0x56>
 956:	8d 2f       	mov	r24, r29
 958:	9c 2f       	mov	r25, r28
 95a:	df 91       	pop	r29
 95c:	cf 91       	pop	r28
 95e:	1f 91       	pop	r17
 960:	0f 91       	pop	r16
 962:	08 95       	ret

00000964 <_exit>:
 964:	f8 94       	cli

00000966 <__stop_program>:
 966:	ff cf       	rjmp	.-2      	; 0x966 <__stop_program>
