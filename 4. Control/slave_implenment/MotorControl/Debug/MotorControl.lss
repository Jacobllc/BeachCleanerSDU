
MotorControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  0000111c  000011b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000111c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800142  00800142  000011f2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000153d  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca3  00000000  00000000  00002985  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dfa  00000000  00000000  00003628  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000041c  00000000  00000000  00004424  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000757  00000000  00000000  00004840  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000092c  00000000  00000000  00004f97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000058c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 89 01 	jmp	0x312	; 0x312 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_24>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e1       	ldi	r30, 0x1C	; 28
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 34       	cpi	r26, 0x42	; 66
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a2 e4       	ldi	r26, 0x42	; 66
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 35       	cpi	r26, 0x59	; 89
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
      9e:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Enable_ADC>:
#include <avr/io.h>


void Enable_ADC(void){
	
	ADMUX = (1<<REFS0); // Select Vref = AVcc
      a6:	80 e4       	ldi	r24, 0x40	; 64
      a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADIE)|(1<<ADEN);
      ac:	8f e8       	ldi	r24, 0x8F	; 143
      ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
      b2:	08 95       	ret

000000b4 <adc_read>:
	
}

uint16_t adc_read(uint8_t adc_channel){
	ADMUX &= 0xf0; // clear any prev used channael but keep internal reference
      b4:	ec e7       	ldi	r30, 0x7C	; 124
      b6:	f0 e0       	ldi	r31, 0x00	; 0
      b8:	90 81       	ld	r25, Z
      ba:	90 7f       	andi	r25, 0xF0	; 240
      bc:	90 83       	st	Z, r25
	ADMUX |= adc_channel; // set the desired channel
      be:	90 81       	ld	r25, Z
      c0:	89 2b       	or	r24, r25
      c2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
      c4:	ea e7       	ldi	r30, 0x7A	; 122
      c6:	f0 e0       	ldi	r31, 0x00	; 0
      c8:	80 81       	ld	r24, Z
      ca:	80 64       	ori	r24, 0x40	; 64
      cc:	80 83       	st	Z, r24
	// now wait for the convresion
	//while( (ADCSRA & (1<<ADSC) ) );
	
	// now we have result so return it to the calling function
	return ADC;
      ce:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      d2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
      d6:	08 95       	ret

000000d8 <I2C_recieve>:
		sei();
}

void i2c_transmit_data(uint8_t data)
{		
	TWDR = data;
      d8:	cf 93       	push	r28
      da:	c8 2f       	mov	r28, r24
      dc:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <bytes>
      e0:	81 11       	cpse	r24, r1
      e2:	06 c0       	rjmp	.+12     	; 0xf0 <I2C_recieve+0x18>
      e4:	c0 93 4c 01 	sts	0x014C, r28	; 0x80014c <opcode>
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <bytes>
      ee:	04 c0       	rjmp	.+8      	; 0xf8 <I2C_recieve+0x20>
      f0:	c0 93 49 01 	sts	0x0149, r28	; 0x800149 <data>
      f4:	0e 94 2e 02 	call	0x45c	; 0x45c <i2c_service>
      f8:	c0 93 49 01 	sts	0x0149, r28	; 0x800149 <data>
      fc:	cf 91       	pop	r28
      fe:	08 95       	ret

00000100 <I2C_data_NACK_request>:
     100:	0e 94 2e 02 	call	0x45c	; 0x45c <i2c_service>
     104:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <data>
     108:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     10c:	08 95       	ret

0000010e <i2c_init>:
     10e:	f8 94       	cli
     110:	88 0f       	add	r24, r24
     112:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
     116:	85 ec       	ldi	r24, 0xC5	; 197
     118:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     11c:	78 94       	sei
     11e:	08 95       	ret

00000120 <set_data>:
}

void set_data(uint8_t value)
{
	data = value;
     120:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <data>
     124:	08 95       	ret

00000126 <__vector_24>:
}


 
ISR(TWI_vect)
{
     126:	1f 92       	push	r1
     128:	0f 92       	push	r0
     12a:	0f b6       	in	r0, 0x3f	; 63
     12c:	0f 92       	push	r0
     12e:	11 24       	eor	r1, r1
     130:	2f 93       	push	r18
     132:	3f 93       	push	r19
     134:	4f 93       	push	r20
     136:	5f 93       	push	r21
     138:	6f 93       	push	r22
     13a:	7f 93       	push	r23
     13c:	8f 93       	push	r24
     13e:	9f 93       	push	r25
     140:	af 93       	push	r26
     142:	bf 93       	push	r27
     144:	ef 93       	push	r30
     146:	ff 93       	push	r31
	switch(TW_STATUS)
     148:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     14c:	88 7f       	andi	r24, 0xF8	; 248
     14e:	80 38       	cpi	r24, 0x80	; 128
     150:	49 f0       	breq	.+18     	; 0x164 <__vector_24+0x3e>
     152:	18 f4       	brcc	.+6      	; 0x15a <__vector_24+0x34>
     154:	88 23       	and	r24, r24
     156:	d1 f0       	breq	.+52     	; 0x18c <__vector_24+0x66>
     158:	1f c0       	rjmp	.+62     	; 0x198 <__vector_24+0x72>
     15a:	88 3a       	cpi	r24, 0xA8	; 168
     15c:	59 f0       	breq	.+22     	; 0x174 <__vector_24+0x4e>
     15e:	88 3b       	cpi	r24, 0xB8	; 184
     160:	79 f0       	breq	.+30     	; 0x180 <__vector_24+0x5a>
     162:	1a c0       	rjmp	.+52     	; 0x198 <__vector_24+0x72>
	{
		case TW_SR_DATA_ACK:
		// received data from master, call the receive callback
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     164:	85 ec       	ldi	r24, 0xC5	; 197
     166:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		I2C_recieve(TWDR);
     16a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     16e:	0e 94 6c 00 	call	0xd8	; 0xd8 <I2C_recieve>
		break;
     172:	15 c0       	rjmp	.+42     	; 0x19e <__vector_24+0x78>
		
		case TW_ST_SLA_ACK:
		// master is requesting data using NACK,master expects only one additional byte. call the request callback
		I2C_data_NACK_request();
     174:	0e 94 80 00 	call	0x100	; 0x100 <I2C_data_NACK_request>
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     178:	85 ec       	ldi	r24, 0xC5	; 197
     17a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		
		break;
     17e:	0f c0       	rjmp	.+30     	; 0x19e <__vector_24+0x78>
		
		case TW_ST_DATA_ACK:
		// master is requesting data using ACK, master expects multiple bytes. call the request callback
		I2C_data_NACK_request();
     180:	0e 94 80 00 	call	0x100	; 0x100 <I2C_data_NACK_request>
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     184:	85 ec       	ldi	r24, 0xC5	; 197
     186:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
     18a:	09 c0       	rjmp	.+18     	; 0x19e <__vector_24+0x78>
		
		case TW_BUS_ERROR:
		// some sort of erroneous state, prepare TWI to be readdressed
		TWCR = 0;
     18c:	ec eb       	ldi	r30, 0xBC	; 188
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	10 82       	st	Z, r1
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     192:	85 ec       	ldi	r24, 0xC5	; 197
     194:	80 83       	st	Z, r24
		break;
     196:	03 c0       	rjmp	.+6      	; 0x19e <__vector_24+0x78>
		
		default:
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     198:	85 ec       	ldi	r24, 0xC5	; 197
     19a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
	}
}
     19e:	ff 91       	pop	r31
     1a0:	ef 91       	pop	r30
     1a2:	bf 91       	pop	r27
     1a4:	af 91       	pop	r26
     1a6:	9f 91       	pop	r25
     1a8:	8f 91       	pop	r24
     1aa:	7f 91       	pop	r23
     1ac:	6f 91       	pop	r22
     1ae:	5f 91       	pop	r21
     1b0:	4f 91       	pop	r20
     1b2:	3f 91       	pop	r19
     1b4:	2f 91       	pop	r18
     1b6:	0f 90       	pop	r0
     1b8:	0f be       	out	0x3f, r0	; 63
     1ba:	0f 90       	pop	r0
     1bc:	1f 90       	pop	r1
     1be:	18 95       	reti

000001c0 <IO_init>:


void IO_init(void){	///////////////////////// Initial Pin Setup
	
	// bit order 7 6 5 4 3 2 1 0
	DDRB  = 0b00001011;
     1c0:	8b e0       	ldi	r24, 0x0B	; 11
     1c2:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000000;
     1c4:	15 b8       	out	0x05, r1	; 5
	
	DDRC  = 0b00001111;
     1c6:	8f e0       	ldi	r24, 0x0F	; 15
     1c8:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b00000000;
     1ca:	18 b8       	out	0x08, r1	; 8
	
	DDRD  = 0b11101000;
     1cc:	88 ee       	ldi	r24, 0xE8	; 232
     1ce:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000000;
     1d0:	1b b8       	out	0x0b, r1	; 11
     1d2:	08 95       	ret

000001d4 <main>:
#include "Motor_i2c.h"
//						Global Variables

int main(void)
{
	i2c_init(I2C_ADDR);														//in this we only print the received data and echo it back when data is requested from master
     1d4:	81 e4       	ldi	r24, 0x41	; 65
     1d6:	0e 94 87 00 	call	0x10e	; 0x10e <i2c_init>
	uart_init();   // open the communication to the microcontroller
     1da:	0e 94 da 03 	call	0x7b4	; 0x7b4 <uart_init>
	io_redirect(); // redirect input and output to the uart	
     1de:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <io_redirect>
	IO_init();	   //
     1e2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <IO_init>
	TimersInit();
     1e6:	0e 94 8f 02 	call	0x51e	; 0x51e <TimersInit>
	Enable_ADC();	
     1ea:	0e 94 53 00 	call	0xa6	; 0xa6 <Enable_ADC>
	sei(); // Enable interrupts
     1ee:	78 94       	sei
	
	status = 10;	
     1f0:	8a e0       	ldi	r24, 0x0A	; 10
     1f2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <status>
    {	
		
		while(status == 10){
			
			
			printf("Error %d and zone %d\n",error,zone);
     1f6:	c4 e2       	ldi	r28, 0x24	; 36
     1f8:	d1 e0       	ldi	r29, 0x01	; 1
     1fa:	1c c0       	rjmp	.+56     	; 0x234 <main+0x60>
     1fc:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <zone>
     200:	1f 92       	push	r1
     202:	8f 93       	push	r24
     204:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <error+0x1>
     208:	8f 93       	push	r24
     20a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <error>
     20e:	8f 93       	push	r24
     210:	df 93       	push	r29
     212:	cf 93       	push	r28
     214:	0e 94 7e 05 	call	0xafc	; 0xafc <printf>
			//CalculatePwm(error, zone);	
			//StartDrive();
			//Sorting(sortState);
			

			adc_result = adc_read(ADC_Channel);
     218:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     21c:	0e 94 5a 00 	call	0xb4	; 0xb4 <adc_read>
     220:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <adc_result+0x1>
     224:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <adc_result>
     228:	0f 90       	pop	r0
     22a:	0f 90       	pop	r0
     22c:	0f 90       	pop	r0
     22e:	0f 90       	pop	r0
     230:	0f 90       	pop	r0
     232:	0f 90       	pop	r0
	
	status = 10;	
    while(1) 
    {	
		
		while(status == 10){
     234:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <status>
     238:	8a 30       	cpi	r24, 0x0A	; 10
     23a:	01 f3       	breq	.-64     	; 0x1fc <main+0x28>
			
		}
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 							
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 

		while(status == 20){
     23c:	84 31       	cpi	r24, 0x14	; 20
     23e:	d1 f7       	brne	.-12     	; 0x234 <main+0x60>
			// printf("Not Safe to run!  \n");	
			StopDrive();
     240:	0e 94 9a 03 	call	0x734	; 0x734 <StopDrive>
			
		}
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 							
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 

		while(status == 20){
     244:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <status>
     248:	84 31       	cpi	r24, 0x14	; 20
     24a:	d1 f3       	breq	.-12     	; 0x240 <main+0x6c>
     24c:	f3 cf       	rjmp	.-26     	; 0x234 <main+0x60>

0000024e <__vector_21>:

		
	}
}

ISR(ADC_vect){
     24e:	1f 92       	push	r1
     250:	0f 92       	push	r0
     252:	0f b6       	in	r0, 0x3f	; 63
     254:	0f 92       	push	r0
     256:	11 24       	eor	r1, r1
     258:	2f 93       	push	r18
     25a:	3f 93       	push	r19
     25c:	4f 93       	push	r20
     25e:	5f 93       	push	r21
     260:	6f 93       	push	r22
     262:	7f 93       	push	r23
     264:	8f 93       	push	r24
     266:	9f 93       	push	r25
     268:	af 93       	push	r26
     26a:	bf 93       	push	r27
     26c:	ef 93       	push	r30
     26e:	ff 93       	push	r31
	switch(ADMUX){
     270:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     274:	81 34       	cpi	r24, 0x41	; 65
     276:	81 f0       	breq	.+32     	; 0x298 <__vector_21+0x4a>
     278:	18 f4       	brcc	.+6      	; 0x280 <__vector_21+0x32>
     27a:	80 34       	cpi	r24, 0x40	; 64
     27c:	31 f0       	breq	.+12     	; 0x28a <__vector_21+0x3c>
     27e:	20 c0       	rjmp	.+64     	; 0x2c0 <__vector_21+0x72>
     280:	82 34       	cpi	r24, 0x42	; 66
     282:	89 f0       	breq	.+34     	; 0x2a6 <__vector_21+0x58>
     284:	83 34       	cpi	r24, 0x43	; 67
     286:	b1 f0       	breq	.+44     	; 0x2b4 <__vector_21+0x66>
     288:	1b c0       	rjmp	.+54     	; 0x2c0 <__vector_21+0x72>
			case 0x40:
			//printf("ADC1 RESULT = %d\n",adc_result);
			//printf("ADC CHANNEL 0\n");
			Max_Curren = 31;
     28a:	8f e1       	ldi	r24, 0x1F	; 31
     28c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <Max_Curren>
			ADC_Channel = 1;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
			break;
     296:	18 c0       	rjmp	.+48     	; 0x2c8 <__vector_21+0x7a>
			
			case 0x41:
			//printf("ADC2 RESULT = %d\n",adc_result);
			//printf("ADC CHANNEL 1\n");
			Max_Curren = 32;
     298:	80 e2       	ldi	r24, 0x20	; 32
     29a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <Max_Curren>
			ADC_Channel = 2;
     29e:	82 e0       	ldi	r24, 0x02	; 2
     2a0:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
			break;
     2a4:	11 c0       	rjmp	.+34     	; 0x2c8 <__vector_21+0x7a>
			
			case 0x42:
			//printf("ADC3 RESULT = %d\n",adc_result);
			//printf("ADC CHANNEL 2\n");
			Max_Curren = 33;
     2a6:	81 e2       	ldi	r24, 0x21	; 33
     2a8:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <Max_Curren>
			ADC_Channel = 3;
     2ac:	83 e0       	ldi	r24, 0x03	; 3
     2ae:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
			break;
     2b2:	0a c0       	rjmp	.+20     	; 0x2c8 <__vector_21+0x7a>
			
			case 0x43:
			//printf("ADC4 RESULT = %d\n",adc_result);
			//printf("ADC CHANNEL 3\n");
			Max_Curren = 34;
     2b4:	82 e2       	ldi	r24, 0x22	; 34
     2b6:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <Max_Curren>
			ADC_Channel = 0;
     2ba:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end>
			break;
     2be:	04 c0       	rjmp	.+8      	; 0x2c8 <__vector_21+0x7a>
	default:
		printf("Broken!\n");
     2c0:	8a e3       	ldi	r24, 0x3A	; 58
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	0e 94 94 05 	call	0xb28	; 0xb28 <puts>
		break;
	}
}
     2c8:	ff 91       	pop	r31
     2ca:	ef 91       	pop	r30
     2cc:	bf 91       	pop	r27
     2ce:	af 91       	pop	r26
     2d0:	9f 91       	pop	r25
     2d2:	8f 91       	pop	r24
     2d4:	7f 91       	pop	r23
     2d6:	6f 91       	pop	r22
     2d8:	5f 91       	pop	r21
     2da:	4f 91       	pop	r20
     2dc:	3f 91       	pop	r19
     2de:	2f 91       	pop	r18
     2e0:	0f 90       	pop	r0
     2e2:	0f be       	out	0x3f, r0	; 63
     2e4:	0f 90       	pop	r0
     2e6:	1f 90       	pop	r1
     2e8:	18 95       	reti

000002ea <__vector_16>:
	
ISR(TIMER0_OVF_vect){}
     2ea:	1f 92       	push	r1
     2ec:	0f 92       	push	r0
     2ee:	0f b6       	in	r0, 0x3f	; 63
     2f0:	0f 92       	push	r0
     2f2:	11 24       	eor	r1, r1
     2f4:	0f 90       	pop	r0
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	0f 90       	pop	r0
     2fa:	1f 90       	pop	r1
     2fc:	18 95       	reti

000002fe <__vector_13>:
	
ISR(TIMER1_OVF_vect){}
     2fe:	1f 92       	push	r1
     300:	0f 92       	push	r0
     302:	0f b6       	in	r0, 0x3f	; 63
     304:	0f 92       	push	r0
     306:	11 24       	eor	r1, r1
     308:	0f 90       	pop	r0
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	0f 90       	pop	r0
     30e:	1f 90       	pop	r1
     310:	18 95       	reti

00000312 <__vector_9>:
		
ISR(TIMER2_OVF_vect){}
     312:	1f 92       	push	r1
     314:	0f 92       	push	r0
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	0f 92       	push	r0
     31a:	11 24       	eor	r1, r1
     31c:	0f 90       	pop	r0
     31e:	0f be       	out	0x3f, r0	; 63
     320:	0f 90       	pop	r0
     322:	1f 90       	pop	r1
     324:	18 95       	reti

00000326 <cal_checksum>:


int new_error=0;
char new_zone=0;
int cal_checksum(int value, char length)
{
     326:	fc 01       	movw	r30, r24
	char array[length];
     328:	70 e0       	ldi	r23, 0x00	; 0
     32a:	9b 01       	movw	r18, r22
     32c:	21 50       	subi	r18, 0x01	; 1
     32e:	31 09       	sbc	r19, r1
	char Checksum=0;
	for (int i=0; i<length; i++)
     330:	16 16       	cp	r1, r22
     332:	17 06       	cpc	r1, r23
     334:	74 f4       	brge	.+28     	; 0x352 <cal_checksum+0x2c>
     336:	80 e0       	ldi	r24, 0x00	; 0
	{   array[i] = 0;
		array[i]= (value>>((length-1)-i)) & 1;
		Checksum^=array[i];
     338:	af 01       	movw	r20, r30
     33a:	02 2e       	mov	r0, r18
     33c:	02 c0       	rjmp	.+4      	; 0x342 <cal_checksum+0x1c>
     33e:	55 95       	asr	r21
     340:	47 95       	ror	r20
     342:	0a 94       	dec	r0
     344:	e2 f7       	brpl	.-8      	; 0x33e <cal_checksum+0x18>
     346:	41 70       	andi	r20, 0x01	; 1
     348:	84 27       	eor	r24, r20
     34a:	21 50       	subi	r18, 0x01	; 1
     34c:	31 09       	sbc	r19, r1
     34e:	a0 f7       	brcc	.-24     	; 0x338 <cal_checksum+0x12>
     350:	01 c0       	rjmp	.+2      	; 0x354 <cal_checksum+0x2e>
int new_error=0;
char new_zone=0;
int cal_checksum(int value, char length)
{
	char array[length];
	char Checksum=0;
     352:	80 e0       	ldi	r24, 0x00	; 0
	{   array[i] = 0;
		array[i]= (value>>((length-1)-i)) & 1;
		Checksum^=array[i];
	}
	return Checksum;
}
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	08 95       	ret

00000358 <Motor_Send_Status>:



void Motor_Send_Status(void)
{
	if (bytes==2)
     358:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <bytes>
     35c:	82 30       	cpi	r24, 0x02	; 2
     35e:	59 f4       	brne	.+22     	; 0x376 <Motor_Send_Status+0x1e>
	{
		int checksum;
		
		checksum = cal_checksum(status, 8);
     360:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <status>
     364:	68 e0       	ldi	r22, 0x08	; 8
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	0e 94 93 01 	call	0x326	; 0x326 <cal_checksum>
		set_data(checksum);
     36c:	0e 94 90 00 	call	0x120	; 0x120 <set_data>
		bytes=0;
     370:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <bytes>
     374:	08 95       	ret
	}
	else
	{
		set_data(status);
     376:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <status>
     37a:	0e 94 90 00 	call	0x120	; 0x120 <set_data>
		bytes++;
     37e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <bytes>
     382:	8f 5f       	subi	r24, 0xFF	; 255
     384:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <bytes>
     388:	08 95       	ret

0000038a <Motor_Send_error>:
	}
}

void Motor_Send_error(void)
{
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	cf 93       	push	r28
	
	char received_checksum;
	if (bytes==3)
     390:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <bytes>
     394:	23 30       	cpi	r18, 0x03	; 3
     396:	d1 f4       	brne	.+52     	; 0x3cc <Motor_Send_error+0x42>
	{
		received_checksum = data;
     398:	c0 91 49 01 	lds	r28, 0x0149	; 0x800149 <data>
		int checksum = cal_checksum(new_error, 16);
     39c:	00 91 44 01 	lds	r16, 0x0144	; 0x800144 <new_error>
     3a0:	10 91 45 01 	lds	r17, 0x0145	; 0x800145 <new_error+0x1>
     3a4:	60 e1       	ldi	r22, 0x10	; 16
     3a6:	c8 01       	movw	r24, r16
     3a8:	0e 94 93 01 	call	0x326	; 0x326 <cal_checksum>
		
		if (checksum==received_checksum)
     3ac:	2c 2f       	mov	r18, r28
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	82 17       	cp	r24, r18
     3b2:	93 07       	cpc	r25, r19
     3b4:	21 f4       	brne	.+8      	; 0x3be <Motor_Send_error+0x34>
		{
			error = new_error;
     3b6:	10 93 4b 01 	sts	0x014B, r17	; 0x80014b <error+0x1>
     3ba:	00 93 4a 01 	sts	0x014A, r16	; 0x80014a <error>
			
		}

		new_error=0;
     3be:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <new_error+0x1>
     3c2:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <new_error>
		bytes=0;
     3c6:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <bytes>
     3ca:	1f c0       	rjmp	.+62     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		
	}
	else
	{
		new_error= new_error + (data << (8*(bytes-1)));
     3cc:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <data>
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	42 2f       	mov	r20, r18
     3d4:	50 e0       	ldi	r21, 0x00	; 0
     3d6:	41 50       	subi	r20, 0x01	; 1
     3d8:	51 09       	sbc	r21, r1
     3da:	44 0f       	add	r20, r20
     3dc:	55 1f       	adc	r21, r21
     3de:	44 0f       	add	r20, r20
     3e0:	55 1f       	adc	r21, r21
     3e2:	44 0f       	add	r20, r20
     3e4:	55 1f       	adc	r21, r21
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <Motor_Send_error+0x62>
     3e8:	88 0f       	add	r24, r24
     3ea:	99 1f       	adc	r25, r25
     3ec:	4a 95       	dec	r20
     3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <Motor_Send_error+0x5e>
     3f0:	40 91 44 01 	lds	r20, 0x0144	; 0x800144 <new_error>
     3f4:	50 91 45 01 	lds	r21, 0x0145	; 0x800145 <new_error+0x1>
     3f8:	84 0f       	add	r24, r20
     3fa:	95 1f       	adc	r25, r21
     3fc:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <new_error+0x1>
     400:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <new_error>
		bytes++;
     404:	2f 5f       	subi	r18, 0xFF	; 255
     406:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <bytes>
	}
}
     40a:	cf 91       	pop	r28
     40c:	1f 91       	pop	r17
     40e:	0f 91       	pop	r16
     410:	08 95       	ret

00000412 <Motor_Send_zone>:

void Motor_Send_zone(void)
{
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
	
		char received_checksum;
		if (bytes==2)
     416:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <bytes>
     41a:	82 30       	cpi	r24, 0x02	; 2
     41c:	a9 f4       	brne	.+42     	; 0x448 <Motor_Send_zone+0x36>
		{
			received_checksum = data;
     41e:	c0 91 49 01 	lds	r28, 0x0149	; 0x800149 <data>
			int checksum = cal_checksum(new_zone, 8);
     422:	d0 91 43 01 	lds	r29, 0x0143	; 0x800143 <new_zone>
     426:	68 e0       	ldi	r22, 0x08	; 8
     428:	8d 2f       	mov	r24, r29
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0e 94 93 01 	call	0x326	; 0x326 <cal_checksum>
			
			if (checksum==received_checksum)
     430:	2c 2f       	mov	r18, r28
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	82 17       	cp	r24, r18
     436:	93 07       	cpc	r25, r19
     438:	21 f4       	brne	.+8      	; 0x442 <Motor_Send_zone+0x30>
			{
				zone = new_zone;
     43a:	d0 93 47 01 	sts	0x0147, r29	; 0x800147 <zone>
				new_zone=0;
     43e:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <new_zone>
			}

			bytes=0;
     442:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <bytes>
     446:	07 c0       	rjmp	.+14     	; 0x456 <Motor_Send_zone+0x44>
			
		}
		else
		{
			new_zone = data;
     448:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <data>
     44c:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <new_zone>
			bytes++;
     450:	8f 5f       	subi	r24, 0xFF	; 255
     452:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <bytes>
		}
	
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <i2c_service>:
}


void i2c_service(void)
{
	switch(opcode)
     45c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <opcode>
     460:	81 30       	cpi	r24, 0x01	; 1
     462:	39 f0       	breq	.+14     	; 0x472 <i2c_service+0x16>
     464:	18 f0       	brcs	.+6      	; 0x46c <i2c_service+0x10>
     466:	82 30       	cpi	r24, 0x02	; 2
     468:	39 f0       	breq	.+14     	; 0x478 <i2c_service+0x1c>
     46a:	08 95       	ret
	{
		case 0:
		{
			Motor_Send_Status();
     46c:	0e 94 ac 01 	call	0x358	; 0x358 <Motor_Send_Status>
			break;
     470:	08 95       	ret
		}
		
		case 1:
		{
			Motor_Send_error();
     472:	0e 94 c5 01 	call	0x38a	; 0x38a <Motor_Send_error>
			break;
     476:	08 95       	ret
		}
		
		case 2:
		{
			Motor_Send_zone();
     478:	0e 94 09 02 	call	0x412	; 0x412 <Motor_Send_zone>
     47c:	08 95       	ret

0000047e <T0_init>:
		OCR2A =  (M1_DutyCycle/100)*254;			// DubyCycle Motor 1
		OCR2B =  (M2_DutyCycle/100)*254;			// DutyCycle Motor 2
		_delay_us(1);
	
	}
}
     47e:	84 b5       	in	r24, 0x24	; 36
     480:	80 68       	ori	r24, 0x80	; 128
     482:	84 bd       	out	0x24, r24	; 36
     484:	84 b5       	in	r24, 0x24	; 36
     486:	80 62       	ori	r24, 0x20	; 32
     488:	84 bd       	out	0x24, r24	; 36
     48a:	84 b5       	in	r24, 0x24	; 36
     48c:	8b 60       	ori	r24, 0x0B	; 11
     48e:	84 bd       	out	0x24, r24	; 36
     490:	8f ef       	ldi	r24, 0xFF	; 255
     492:	87 bd       	out	0x27, r24	; 39
     494:	88 bd       	out	0x28, r24	; 40
     496:	85 b5       	in	r24, 0x25	; 37
     498:	82 60       	ori	r24, 0x02	; 2
     49a:	85 bd       	out	0x25, r24	; 37
     49c:	ee e6       	ldi	r30, 0x6E	; 110
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	80 81       	ld	r24, Z
     4a2:	81 60       	ori	r24, 0x01	; 1
     4a4:	80 83       	st	Z, r24
     4a6:	08 95       	ret

000004a8 <T1_init>:
     4a8:	e0 e8       	ldi	r30, 0x80	; 128
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	80 81       	ld	r24, Z
     4ae:	80 68       	ori	r24, 0x80	; 128
     4b0:	80 83       	st	Z, r24
     4b2:	80 81       	ld	r24, Z
     4b4:	80 62       	ori	r24, 0x20	; 32
     4b6:	80 83       	st	Z, r24
     4b8:	80 81       	ld	r24, Z
     4ba:	8b 60       	ori	r24, 0x0B	; 11
     4bc:	80 83       	st	Z, r24
     4be:	88 ee       	ldi	r24, 0xE8	; 232
     4c0:	93 e0       	ldi	r25, 0x03	; 3
     4c2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4c6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     4ca:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     4ce:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     4d2:	e1 e8       	ldi	r30, 0x81	; 129
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	80 81       	ld	r24, Z
     4d8:	81 60       	ori	r24, 0x01	; 1
     4da:	80 83       	st	Z, r24
     4dc:	ef e6       	ldi	r30, 0x6F	; 111
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	80 81       	ld	r24, Z
     4e2:	81 60       	ori	r24, 0x01	; 1
     4e4:	80 83       	st	Z, r24
     4e6:	08 95       	ret

000004e8 <T2_init>:
     4e8:	e0 eb       	ldi	r30, 0xB0	; 176
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	80 81       	ld	r24, Z
     4ee:	80 68       	ori	r24, 0x80	; 128
     4f0:	80 83       	st	Z, r24
     4f2:	80 81       	ld	r24, Z
     4f4:	80 62       	ori	r24, 0x20	; 32
     4f6:	80 83       	st	Z, r24
     4f8:	80 81       	ld	r24, Z
     4fa:	8b 60       	ori	r24, 0x0B	; 11
     4fc:	80 83       	st	Z, r24
     4fe:	80 e8       	ldi	r24, 0x80	; 128
     500:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     504:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     508:	e1 eb       	ldi	r30, 0xB1	; 177
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	80 81       	ld	r24, Z
     50e:	82 60       	ori	r24, 0x02	; 2
     510:	80 83       	st	Z, r24
     512:	e0 e7       	ldi	r30, 0x70	; 112
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	80 81       	ld	r24, Z
     518:	81 60       	ori	r24, 0x01	; 1
     51a:	80 83       	st	Z, r24
     51c:	08 95       	ret

0000051e <TimersInit>:
     51e:	0e 94 3f 02 	call	0x47e	; 0x47e <T0_init>
     522:	0e 94 54 02 	call	0x4a8	; 0x4a8 <T1_init>
     526:	0e 94 74 02 	call	0x4e8	; 0x4e8 <T2_init>
     52a:	08 95       	ret

0000052c <Sorting>:
     52c:	81 30       	cpi	r24, 0x01	; 1
     52e:	51 f4       	brne	.+20     	; 0x544 <Sorting+0x18>
     530:	8f ef       	ldi	r24, 0xFF	; 255
     532:	87 bd       	out	0x27, r24	; 39
     534:	88 bd       	out	0x28, r24	; 40
     536:	8f ef       	ldi	r24, 0xFF	; 255
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     53e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     542:	08 95       	ret
     544:	81 11       	cpse	r24, r1
     546:	06 c0       	rjmp	.+12     	; 0x554 <Sorting+0x28>
     548:	17 bc       	out	0x27, r1	; 39
     54a:	18 bc       	out	0x28, r1	; 40
     54c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     550:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     554:	08 95       	ret

00000556 <SetDrive>:


void SetDrive(double M1_DutyCycle, double M2_DutyCycle){
     556:	8f 92       	push	r8
     558:	9f 92       	push	r9
     55a:	af 92       	push	r10
     55c:	bf 92       	push	r11
     55e:	cf 92       	push	r12
     560:	df 92       	push	r13
     562:	ef 92       	push	r14
     564:	ff 92       	push	r15
     566:	6b 01       	movw	r12, r22
     568:	7c 01       	movw	r14, r24
     56a:	49 01       	movw	r8, r18
     56c:	5a 01       	movw	r10, r20
		
			if(M1_DutyCycle < MPWM_MIN)
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	40 ea       	ldi	r20, 0xA0	; 160
     574:	51 e4       	ldi	r21, 0x41	; 65
     576:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__cmpsf2>
     57a:	88 23       	and	r24, r24
     57c:	44 f4       	brge	.+16     	; 0x58e <SetDrive+0x38>
			{
				M1_DutyCycle = MPWM_MIN;
     57e:	0f 2e       	mov	r0, r31
     580:	c1 2c       	mov	r12, r1
     582:	d1 2c       	mov	r13, r1
     584:	f0 ea       	ldi	r31, 0xA0	; 160
     586:	ef 2e       	mov	r14, r31
     588:	f1 e4       	ldi	r31, 0x41	; 65
     58a:	ff 2e       	mov	r15, r31
     58c:	f0 2d       	mov	r31, r0
			}
			
			if (M2_DutyCycle < MPWM_MIN)
     58e:	20 e0       	ldi	r18, 0x00	; 0
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	40 ea       	ldi	r20, 0xA0	; 160
     594:	51 e4       	ldi	r21, 0x41	; 65
     596:	c5 01       	movw	r24, r10
     598:	b4 01       	movw	r22, r8
     59a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__cmpsf2>
     59e:	88 23       	and	r24, r24
     5a0:	0c f4       	brge	.+2      	; 0x5a4 <SetDrive+0x4e>
     5a2:	a9 c0       	rjmp	.+338    	; 0x6f6 <SetDrive+0x1a0>
			{
				M2_DutyCycle = MPWM_MIN;
			}
			
						if(M1_DutyCycle < 0)
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	a9 01       	movw	r20, r18
     5aa:	c7 01       	movw	r24, r14
     5ac:	b6 01       	movw	r22, r12
     5ae:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__cmpsf2>
     5b2:	88 23       	and	r24, r24
     5b4:	1c f4       	brge	.+6      	; 0x5bc <SetDrive+0x66>
						{
							M1_DutyCycle = 0;
     5b6:	c1 2c       	mov	r12, r1
     5b8:	d1 2c       	mov	r13, r1
     5ba:	76 01       	movw	r14, r12
						}
						
						if (M2_DutyCycle < 0)
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	a9 01       	movw	r20, r18
     5c2:	c5 01       	movw	r24, r10
     5c4:	b4 01       	movw	r22, r8
     5c6:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__cmpsf2>
     5ca:	88 23       	and	r24, r24
     5cc:	64 f4       	brge	.+24     	; 0x5e6 <SetDrive+0x90>
						{
							M2_DutyCycle = 0;
     5ce:	81 2c       	mov	r8, r1
     5d0:	91 2c       	mov	r9, r1
     5d2:	54 01       	movw	r10, r8
     5d4:	08 c0       	rjmp	.+16     	; 0x5e6 <SetDrive+0x90>
				M1_DutyCycle = MPWM_MIN;
			}
			
			if (M2_DutyCycle < MPWM_MIN)
			{
				M2_DutyCycle = MPWM_MIN;
     5d6:	0f 2e       	mov	r0, r31
     5d8:	81 2c       	mov	r8, r1
     5da:	91 2c       	mov	r9, r1
     5dc:	f0 ea       	ldi	r31, 0xA0	; 160
     5de:	af 2e       	mov	r10, r31
     5e0:	f1 e4       	ldi	r31, 0x41	; 65
     5e2:	bf 2e       	mov	r11, r31
     5e4:	f0 2d       	mov	r31, r0
						if (M2_DutyCycle < 0)
						{
							M2_DutyCycle = 0;
						}
						
			if((error > 90) || (error < -90)){
     5e6:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <error>
     5ea:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <error+0x1>
     5ee:	9c 01       	movw	r18, r24
     5f0:	26 5a       	subi	r18, 0xA6	; 166
     5f2:	3f 4f       	sbci	r19, 0xFF	; 255
     5f4:	25 3b       	cpi	r18, 0xB5	; 181
     5f6:	31 05       	cpc	r19, r1
     5f8:	08 f4       	brcc	.+2      	; 0x5fc <SetDrive+0xa6>
     5fa:	56 c0       	rjmp	.+172    	; 0x6a8 <SetDrive+0x152>
//								   Turning ... 				
							if(error > 90){
     5fc:	8b 35       	cpi	r24, 0x5B	; 91
     5fe:	91 05       	cpc	r25, r1
     600:	34 f1       	brlt	.+76     	; 0x64e <SetDrive+0xf8>
								PinState(pd7, low);							 // H-Bridge Enable pin Motor 1
     602:	5f 98       	cbi	0x0b, 7	; 11
								PinState(pb0, low);							 // H-Bridge Enable pin Motor 2
     604:	28 98       	cbi	0x05, 0	; 5
								OCR2A =  (M1_DutyCycle/100)*254;			// DubyCycle Motor 1
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	48 ec       	ldi	r20, 0xC8	; 200
     60c:	52 e4       	ldi	r21, 0x42	; 66
     60e:	c7 01       	movw	r24, r14
     610:	b6 01       	movw	r22, r12
     612:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__divsf3>
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	4e e7       	ldi	r20, 0x7E	; 126
     61c:	53 e4       	ldi	r21, 0x43	; 67
     61e:	0e 94 11 05 	call	0xa22	; 0xa22 <__mulsf3>
     622:	0e 94 6d 04 	call	0x8da	; 0x8da <__fixunssfsi>
     626:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
								OCR2B =  (M2_DutyCycle/100)*254;			// DutyCycle Motor 2
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	48 ec       	ldi	r20, 0xC8	; 200
     630:	52 e4       	ldi	r21, 0x42	; 66
     632:	c5 01       	movw	r24, r10
     634:	b4 01       	movw	r22, r8
     636:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__divsf3>
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	4e e7       	ldi	r20, 0x7E	; 126
     640:	53 e4       	ldi	r21, 0x43	; 67
     642:	0e 94 11 05 	call	0xa22	; 0xa22 <__mulsf3>
     646:	0e 94 6d 04 	call	0x8da	; 0x8da <__fixunssfsi>
     64a:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
							}
//									Turning ... 
									if(error < -90){
     64e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <error>
     652:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <error+0x1>
     656:	86 3a       	cpi	r24, 0xA6	; 166
     658:	9f 4f       	sbci	r25, 0xFF	; 255
     65a:	34 f5       	brge	.+76     	; 0x6a8 <SetDrive+0x152>
									PinState(pd7, high);							 // H-Bridge Enable pin Motor 1
     65c:	5f 9a       	sbi	0x0b, 7	; 11
									PinState(pb0, high);							 // H-Bridge Enable pin Motor 2
     65e:	28 9a       	sbi	0x05, 0	; 5
									OCR2A =  (M1_DutyCycle/100)*254;			// DubyCycle Motor 1
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	48 ec       	ldi	r20, 0xC8	; 200
     666:	52 e4       	ldi	r21, 0x42	; 66
     668:	c7 01       	movw	r24, r14
     66a:	b6 01       	movw	r22, r12
     66c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__divsf3>
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	4e e7       	ldi	r20, 0x7E	; 126
     676:	53 e4       	ldi	r21, 0x43	; 67
     678:	0e 94 11 05 	call	0xa22	; 0xa22 <__mulsf3>
     67c:	0e 94 6d 04 	call	0x8da	; 0x8da <__fixunssfsi>
     680:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
									OCR2B =  (M2_DutyCycle/100)*254;			// DutyCycle Motor 2
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	48 ec       	ldi	r20, 0xC8	; 200
     68a:	52 e4       	ldi	r21, 0x42	; 66
     68c:	c5 01       	movw	r24, r10
     68e:	b4 01       	movw	r22, r8
     690:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__divsf3>
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	4e e7       	ldi	r20, 0x7E	; 126
     69a:	53 e4       	ldi	r21, 0x43	; 67
     69c:	0e 94 11 05 	call	0xa22	; 0xa22 <__mulsf3>
     6a0:	0e 94 6d 04 	call	0x8da	; 0x8da <__fixunssfsi>
     6a4:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>

			}
			

//									Turning ...
								PinState(pd7, low);							 // H-Bridge Enable pin Motor 1
     6a8:	5f 98       	cbi	0x0b, 7	; 11
								PinState(pb0, low);							 // H-Bridge Enable pin Motor 2
     6aa:	28 98       	cbi	0x05, 0	; 5
								OCR2A =  (M1_DutyCycle/100)*254;			// DubyCycle Motor 1
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	48 ec       	ldi	r20, 0xC8	; 200
     6b2:	52 e4       	ldi	r21, 0x42	; 66
     6b4:	c7 01       	movw	r24, r14
     6b6:	b6 01       	movw	r22, r12
     6b8:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__divsf3>
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	4e e7       	ldi	r20, 0x7E	; 126
     6c2:	53 e4       	ldi	r21, 0x43	; 67
     6c4:	0e 94 11 05 	call	0xa22	; 0xa22 <__mulsf3>
     6c8:	0e 94 6d 04 	call	0x8da	; 0x8da <__fixunssfsi>
     6cc:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
								OCR2B =  (M2_DutyCycle/100)*254;			// DutyCycle Motor 2								
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	48 ec       	ldi	r20, 0xC8	; 200
     6d6:	52 e4       	ldi	r21, 0x42	; 66
     6d8:	c5 01       	movw	r24, r10
     6da:	b4 01       	movw	r22, r8
     6dc:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__divsf3>
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	4e e7       	ldi	r20, 0x7E	; 126
     6e6:	53 e4       	ldi	r21, 0x43	; 67
     6e8:	0e 94 11 05 	call	0xa22	; 0xa22 <__mulsf3>
     6ec:	0e 94 6d 04 	call	0x8da	; 0x8da <__fixunssfsi>
     6f0:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
		PinState(pb4, low);  // L298 in4
				printf("Direc Set \n");
		}
		*/

			}
     6f4:	16 c0       	rjmp	.+44     	; 0x722 <SetDrive+0x1cc>
			if (M2_DutyCycle < MPWM_MIN)
			{
				M2_DutyCycle = MPWM_MIN;
			}
			
						if(M1_DutyCycle < 0)
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	a9 01       	movw	r20, r18
     6fc:	c7 01       	movw	r24, r14
     6fe:	b6 01       	movw	r22, r12
     700:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__cmpsf2>
     704:	88 23       	and	r24, r24
     706:	0c f0       	brlt	.+2      	; 0x70a <SetDrive+0x1b4>
     708:	66 cf       	rjmp	.-308    	; 0x5d6 <SetDrive+0x80>
						{
							M1_DutyCycle = 0;
     70a:	c1 2c       	mov	r12, r1
     70c:	d1 2c       	mov	r13, r1
     70e:	76 01       	movw	r14, r12
				M1_DutyCycle = MPWM_MIN;
			}
			
			if (M2_DutyCycle < MPWM_MIN)
			{
				M2_DutyCycle = MPWM_MIN;
     710:	0f 2e       	mov	r0, r31
     712:	81 2c       	mov	r8, r1
     714:	91 2c       	mov	r9, r1
     716:	f0 ea       	ldi	r31, 0xA0	; 160
     718:	af 2e       	mov	r10, r31
     71a:	f1 e4       	ldi	r31, 0x41	; 65
     71c:	bf 2e       	mov	r11, r31
     71e:	f0 2d       	mov	r31, r0
     720:	62 cf       	rjmp	.-316    	; 0x5e6 <SetDrive+0x90>
		PinState(pb4, low);  // L298 in4
				printf("Direc Set \n");
		}
		*/

			}
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	df 90       	pop	r13
     728:	cf 90       	pop	r12
     72a:	bf 90       	pop	r11
     72c:	af 90       	pop	r10
     72e:	9f 90       	pop	r9
     730:	8f 90       	pop	r8
     732:	08 95       	ret

00000734 <StopDrive>:
		
//////////////////////         Motor functions

void StopDrive(void){
	
	M1_DutyCycle = 0;
     734:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <M1_DutyCycle>
     738:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <M1_DutyCycle+0x1>
     73c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <M1_DutyCycle+0x2>
     740:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <M1_DutyCycle+0x3>
	M2_DutyCycle = 0;
     744:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <M2_DutyCycle>
     748:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <M2_DutyCycle+0x1>
     74c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <M2_DutyCycle+0x2>
     750:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <M2_DutyCycle+0x3>
	sortState = 0;
     754:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <sortState>
	Sorting(sortState);
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	0e 94 96 02 	call	0x52c	; 0x52c <Sorting>
	SetDrive(M1_DutyCycle, M2_DutyCycle);
     75e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <M2_DutyCycle>
     762:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <M2_DutyCycle+0x1>
     766:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <M2_DutyCycle+0x2>
     76a:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <M2_DutyCycle+0x3>
     76e:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <M1_DutyCycle>
     772:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <M1_DutyCycle+0x1>
     776:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <M1_DutyCycle+0x2>
     77a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <M1_DutyCycle+0x3>
     77e:	0e 94 ab 02 	call	0x556	; 0x556 <SetDrive>
     782:	08 95       	ret

00000784 <uart_putchar>:
		stdout = &uart_output;	//redirect standard output to uart
		stdin  = &uart_input;  //redirect standard input to uart
}
	

void uart_putchar(char c, FILE *stream) {
     784:	cf 93       	push	r28
     786:	c8 2f       	mov	r28, r24
	if (c == '\n') {
     788:	8a 30       	cpi	r24, 0x0A	; 10
     78a:	19 f4       	brne	.+6      	; 0x792 <uart_putchar+0xe>
		uart_putchar('\r', stream);
     78c:	8d e0       	ldi	r24, 0x0D	; 13
     78e:	0e 94 c2 03 	call	0x784	; 0x784 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
     792:	e0 ec       	ldi	r30, 0xC0	; 192
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	80 81       	ld	r24, Z
     798:	85 ff       	sbrs	r24, 5
     79a:	fd cf       	rjmp	.-6      	; 0x796 <uart_putchar+0x12>
	UDR0 = c;
     79c:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
     7a0:	cf 91       	pop	r28
     7a2:	08 95       	ret

000007a4 <uart_getchar>:

char uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0);
     7a4:	e0 ec       	ldi	r30, 0xC0	; 192
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	80 81       	ld	r24, Z
     7aa:	88 23       	and	r24, r24
     7ac:	ec f7       	brge	.-6      	; 0x7a8 <uart_getchar+0x4>
	return UDR0;
     7ae:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     7b2:	08 95       	ret

000007b4 <uart_init>:
FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);


void uart_init(void) {
	
	UBRR0H = UBRRH_VALUE;
     7b4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
     7b8:	87 e6       	ldi	r24, 0x67	; 103
     7ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
     7be:	e0 ec       	ldi	r30, 0xC0	; 192
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
     7c2:	80 81       	ld	r24, Z
     7c4:	8d 7f       	andi	r24, 0xFD	; 253
     7c6:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
     7c8:	86 e0       	ldi	r24, 0x06	; 6
     7ca:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
     7ce:	88 e1       	ldi	r24, 0x18	; 24
     7d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     7d4:	08 95       	ret

000007d6 <io_redirect>:
}

void io_redirect(void ){
		
		
		stdout = &uart_output;	//redirect standard output to uart
     7d6:	e3 e5       	ldi	r30, 0x53	; 83
     7d8:	f1 e0       	ldi	r31, 0x01	; 1
     7da:	86 e1       	ldi	r24, 0x16	; 22
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	93 83       	std	Z+3, r25	; 0x03
     7e0:	82 83       	std	Z+2, r24	; 0x02
		stdin  = &uart_input;  //redirect standard input to uart
     7e2:	88 e0       	ldi	r24, 0x08	; 8
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	91 83       	std	Z+1, r25	; 0x01
     7e8:	80 83       	st	Z, r24
     7ea:	08 95       	ret

000007ec <__cmpsf2>:
     7ec:	0e 94 9c 04 	call	0x938	; 0x938 <__fp_cmp>
     7f0:	08 f4       	brcc	.+2      	; 0x7f4 <__cmpsf2+0x8>
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	08 95       	ret

000007f6 <__divsf3>:
     7f6:	0e 94 0f 04 	call	0x81e	; 0x81e <__divsf3x>
     7fa:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <__fp_round>
     7fe:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__fp_pscB>
     802:	58 f0       	brcs	.+22     	; 0x81a <__divsf3+0x24>
     804:	0e 94 c9 04 	call	0x992	; 0x992 <__fp_pscA>
     808:	40 f0       	brcs	.+16     	; 0x81a <__divsf3+0x24>
     80a:	29 f4       	brne	.+10     	; 0x816 <__divsf3+0x20>
     80c:	5f 3f       	cpi	r21, 0xFF	; 255
     80e:	29 f0       	breq	.+10     	; 0x81a <__divsf3+0x24>
     810:	0c 94 c0 04 	jmp	0x980	; 0x980 <__fp_inf>
     814:	51 11       	cpse	r21, r1
     816:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__fp_szero>
     81a:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__fp_nan>

0000081e <__divsf3x>:
     81e:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__fp_split3>
     822:	68 f3       	brcs	.-38     	; 0x7fe <__divsf3+0x8>

00000824 <__divsf3_pse>:
     824:	99 23       	and	r25, r25
     826:	b1 f3       	breq	.-20     	; 0x814 <__divsf3+0x1e>
     828:	55 23       	and	r21, r21
     82a:	91 f3       	breq	.-28     	; 0x810 <__divsf3+0x1a>
     82c:	95 1b       	sub	r25, r21
     82e:	55 0b       	sbc	r21, r21
     830:	bb 27       	eor	r27, r27
     832:	aa 27       	eor	r26, r26
     834:	62 17       	cp	r22, r18
     836:	73 07       	cpc	r23, r19
     838:	84 07       	cpc	r24, r20
     83a:	38 f0       	brcs	.+14     	; 0x84a <__divsf3_pse+0x26>
     83c:	9f 5f       	subi	r25, 0xFF	; 255
     83e:	5f 4f       	sbci	r21, 0xFF	; 255
     840:	22 0f       	add	r18, r18
     842:	33 1f       	adc	r19, r19
     844:	44 1f       	adc	r20, r20
     846:	aa 1f       	adc	r26, r26
     848:	a9 f3       	breq	.-22     	; 0x834 <__divsf3_pse+0x10>
     84a:	35 d0       	rcall	.+106    	; 0x8b6 <__divsf3_pse+0x92>
     84c:	0e 2e       	mov	r0, r30
     84e:	3a f0       	brmi	.+14     	; 0x85e <__divsf3_pse+0x3a>
     850:	e0 e8       	ldi	r30, 0x80	; 128
     852:	32 d0       	rcall	.+100    	; 0x8b8 <__divsf3_pse+0x94>
     854:	91 50       	subi	r25, 0x01	; 1
     856:	50 40       	sbci	r21, 0x00	; 0
     858:	e6 95       	lsr	r30
     85a:	00 1c       	adc	r0, r0
     85c:	ca f7       	brpl	.-14     	; 0x850 <__divsf3_pse+0x2c>
     85e:	2b d0       	rcall	.+86     	; 0x8b6 <__divsf3_pse+0x92>
     860:	fe 2f       	mov	r31, r30
     862:	29 d0       	rcall	.+82     	; 0x8b6 <__divsf3_pse+0x92>
     864:	66 0f       	add	r22, r22
     866:	77 1f       	adc	r23, r23
     868:	88 1f       	adc	r24, r24
     86a:	bb 1f       	adc	r27, r27
     86c:	26 17       	cp	r18, r22
     86e:	37 07       	cpc	r19, r23
     870:	48 07       	cpc	r20, r24
     872:	ab 07       	cpc	r26, r27
     874:	b0 e8       	ldi	r27, 0x80	; 128
     876:	09 f0       	breq	.+2      	; 0x87a <__divsf3_pse+0x56>
     878:	bb 0b       	sbc	r27, r27
     87a:	80 2d       	mov	r24, r0
     87c:	bf 01       	movw	r22, r30
     87e:	ff 27       	eor	r31, r31
     880:	93 58       	subi	r25, 0x83	; 131
     882:	5f 4f       	sbci	r21, 0xFF	; 255
     884:	3a f0       	brmi	.+14     	; 0x894 <__divsf3_pse+0x70>
     886:	9e 3f       	cpi	r25, 0xFE	; 254
     888:	51 05       	cpc	r21, r1
     88a:	78 f0       	brcs	.+30     	; 0x8aa <__divsf3_pse+0x86>
     88c:	0c 94 c0 04 	jmp	0x980	; 0x980 <__fp_inf>
     890:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__fp_szero>
     894:	5f 3f       	cpi	r21, 0xFF	; 255
     896:	e4 f3       	brlt	.-8      	; 0x890 <__divsf3_pse+0x6c>
     898:	98 3e       	cpi	r25, 0xE8	; 232
     89a:	d4 f3       	brlt	.-12     	; 0x890 <__divsf3_pse+0x6c>
     89c:	86 95       	lsr	r24
     89e:	77 95       	ror	r23
     8a0:	67 95       	ror	r22
     8a2:	b7 95       	ror	r27
     8a4:	f7 95       	ror	r31
     8a6:	9f 5f       	subi	r25, 0xFF	; 255
     8a8:	c9 f7       	brne	.-14     	; 0x89c <__divsf3_pse+0x78>
     8aa:	88 0f       	add	r24, r24
     8ac:	91 1d       	adc	r25, r1
     8ae:	96 95       	lsr	r25
     8b0:	87 95       	ror	r24
     8b2:	97 f9       	bld	r25, 7
     8b4:	08 95       	ret
     8b6:	e1 e0       	ldi	r30, 0x01	; 1
     8b8:	66 0f       	add	r22, r22
     8ba:	77 1f       	adc	r23, r23
     8bc:	88 1f       	adc	r24, r24
     8be:	bb 1f       	adc	r27, r27
     8c0:	62 17       	cp	r22, r18
     8c2:	73 07       	cpc	r23, r19
     8c4:	84 07       	cpc	r24, r20
     8c6:	ba 07       	cpc	r27, r26
     8c8:	20 f0       	brcs	.+8      	; 0x8d2 <__divsf3_pse+0xae>
     8ca:	62 1b       	sub	r22, r18
     8cc:	73 0b       	sbc	r23, r19
     8ce:	84 0b       	sbc	r24, r20
     8d0:	ba 0b       	sbc	r27, r26
     8d2:	ee 1f       	adc	r30, r30
     8d4:	88 f7       	brcc	.-30     	; 0x8b8 <__divsf3_pse+0x94>
     8d6:	e0 95       	com	r30
     8d8:	08 95       	ret

000008da <__fixunssfsi>:
     8da:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__fp_splitA>
     8de:	88 f0       	brcs	.+34     	; 0x902 <__stack+0x3>
     8e0:	9f 57       	subi	r25, 0x7F	; 127
     8e2:	98 f0       	brcs	.+38     	; 0x90a <__stack+0xb>
     8e4:	b9 2f       	mov	r27, r25
     8e6:	99 27       	eor	r25, r25
     8e8:	b7 51       	subi	r27, 0x17	; 23
     8ea:	b0 f0       	brcs	.+44     	; 0x918 <__stack+0x19>
     8ec:	e1 f0       	breq	.+56     	; 0x926 <__stack+0x27>
     8ee:	66 0f       	add	r22, r22
     8f0:	77 1f       	adc	r23, r23
     8f2:	88 1f       	adc	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	1a f0       	brmi	.+6      	; 0x8fe <__fixunssfsi+0x24>
     8f8:	ba 95       	dec	r27
     8fa:	c9 f7       	brne	.-14     	; 0x8ee <__fixunssfsi+0x14>
     8fc:	14 c0       	rjmp	.+40     	; 0x926 <__stack+0x27>
     8fe:	b1 30       	cpi	r27, 0x01	; 1
     900:	91 f0       	breq	.+36     	; 0x926 <__stack+0x27>
     902:	0e 94 0a 05 	call	0xa14	; 0xa14 <__fp_zero>
     906:	b1 e0       	ldi	r27, 0x01	; 1
     908:	08 95       	ret
     90a:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__fp_zero>
     90e:	67 2f       	mov	r22, r23
     910:	78 2f       	mov	r23, r24
     912:	88 27       	eor	r24, r24
     914:	b8 5f       	subi	r27, 0xF8	; 248
     916:	39 f0       	breq	.+14     	; 0x926 <__stack+0x27>
     918:	b9 3f       	cpi	r27, 0xF9	; 249
     91a:	cc f3       	brlt	.-14     	; 0x90e <__stack+0xf>
     91c:	86 95       	lsr	r24
     91e:	77 95       	ror	r23
     920:	67 95       	ror	r22
     922:	b3 95       	inc	r27
     924:	d9 f7       	brne	.-10     	; 0x91c <__stack+0x1d>
     926:	3e f4       	brtc	.+14     	; 0x936 <__stack+0x37>
     928:	90 95       	com	r25
     92a:	80 95       	com	r24
     92c:	70 95       	com	r23
     92e:	61 95       	neg	r22
     930:	7f 4f       	sbci	r23, 0xFF	; 255
     932:	8f 4f       	sbci	r24, 0xFF	; 255
     934:	9f 4f       	sbci	r25, 0xFF	; 255
     936:	08 95       	ret

00000938 <__fp_cmp>:
     938:	99 0f       	add	r25, r25
     93a:	00 08       	sbc	r0, r0
     93c:	55 0f       	add	r21, r21
     93e:	aa 0b       	sbc	r26, r26
     940:	e0 e8       	ldi	r30, 0x80	; 128
     942:	fe ef       	ldi	r31, 0xFE	; 254
     944:	16 16       	cp	r1, r22
     946:	17 06       	cpc	r1, r23
     948:	e8 07       	cpc	r30, r24
     94a:	f9 07       	cpc	r31, r25
     94c:	c0 f0       	brcs	.+48     	; 0x97e <__fp_cmp+0x46>
     94e:	12 16       	cp	r1, r18
     950:	13 06       	cpc	r1, r19
     952:	e4 07       	cpc	r30, r20
     954:	f5 07       	cpc	r31, r21
     956:	98 f0       	brcs	.+38     	; 0x97e <__fp_cmp+0x46>
     958:	62 1b       	sub	r22, r18
     95a:	73 0b       	sbc	r23, r19
     95c:	84 0b       	sbc	r24, r20
     95e:	95 0b       	sbc	r25, r21
     960:	39 f4       	brne	.+14     	; 0x970 <__fp_cmp+0x38>
     962:	0a 26       	eor	r0, r26
     964:	61 f0       	breq	.+24     	; 0x97e <__fp_cmp+0x46>
     966:	23 2b       	or	r18, r19
     968:	24 2b       	or	r18, r20
     96a:	25 2b       	or	r18, r21
     96c:	21 f4       	brne	.+8      	; 0x976 <__fp_cmp+0x3e>
     96e:	08 95       	ret
     970:	0a 26       	eor	r0, r26
     972:	09 f4       	brne	.+2      	; 0x976 <__fp_cmp+0x3e>
     974:	a1 40       	sbci	r26, 0x01	; 1
     976:	a6 95       	lsr	r26
     978:	8f ef       	ldi	r24, 0xFF	; 255
     97a:	81 1d       	adc	r24, r1
     97c:	81 1d       	adc	r24, r1
     97e:	08 95       	ret

00000980 <__fp_inf>:
     980:	97 f9       	bld	r25, 7
     982:	9f 67       	ori	r25, 0x7F	; 127
     984:	80 e8       	ldi	r24, 0x80	; 128
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	08 95       	ret

0000098c <__fp_nan>:
     98c:	9f ef       	ldi	r25, 0xFF	; 255
     98e:	80 ec       	ldi	r24, 0xC0	; 192
     990:	08 95       	ret

00000992 <__fp_pscA>:
     992:	00 24       	eor	r0, r0
     994:	0a 94       	dec	r0
     996:	16 16       	cp	r1, r22
     998:	17 06       	cpc	r1, r23
     99a:	18 06       	cpc	r1, r24
     99c:	09 06       	cpc	r0, r25
     99e:	08 95       	ret

000009a0 <__fp_pscB>:
     9a0:	00 24       	eor	r0, r0
     9a2:	0a 94       	dec	r0
     9a4:	12 16       	cp	r1, r18
     9a6:	13 06       	cpc	r1, r19
     9a8:	14 06       	cpc	r1, r20
     9aa:	05 06       	cpc	r0, r21
     9ac:	08 95       	ret

000009ae <__fp_round>:
     9ae:	09 2e       	mov	r0, r25
     9b0:	03 94       	inc	r0
     9b2:	00 0c       	add	r0, r0
     9b4:	11 f4       	brne	.+4      	; 0x9ba <__fp_round+0xc>
     9b6:	88 23       	and	r24, r24
     9b8:	52 f0       	brmi	.+20     	; 0x9ce <__fp_round+0x20>
     9ba:	bb 0f       	add	r27, r27
     9bc:	40 f4       	brcc	.+16     	; 0x9ce <__fp_round+0x20>
     9be:	bf 2b       	or	r27, r31
     9c0:	11 f4       	brne	.+4      	; 0x9c6 <__fp_round+0x18>
     9c2:	60 ff       	sbrs	r22, 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fp_round+0x20>
     9c6:	6f 5f       	subi	r22, 0xFF	; 255
     9c8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ca:	8f 4f       	sbci	r24, 0xFF	; 255
     9cc:	9f 4f       	sbci	r25, 0xFF	; 255
     9ce:	08 95       	ret

000009d0 <__fp_split3>:
     9d0:	57 fd       	sbrc	r21, 7
     9d2:	90 58       	subi	r25, 0x80	; 128
     9d4:	44 0f       	add	r20, r20
     9d6:	55 1f       	adc	r21, r21
     9d8:	59 f0       	breq	.+22     	; 0x9f0 <__fp_splitA+0x10>
     9da:	5f 3f       	cpi	r21, 0xFF	; 255
     9dc:	71 f0       	breq	.+28     	; 0x9fa <__fp_splitA+0x1a>
     9de:	47 95       	ror	r20

000009e0 <__fp_splitA>:
     9e0:	88 0f       	add	r24, r24
     9e2:	97 fb       	bst	r25, 7
     9e4:	99 1f       	adc	r25, r25
     9e6:	61 f0       	breq	.+24     	; 0xa00 <__fp_splitA+0x20>
     9e8:	9f 3f       	cpi	r25, 0xFF	; 255
     9ea:	79 f0       	breq	.+30     	; 0xa0a <__fp_splitA+0x2a>
     9ec:	87 95       	ror	r24
     9ee:	08 95       	ret
     9f0:	12 16       	cp	r1, r18
     9f2:	13 06       	cpc	r1, r19
     9f4:	14 06       	cpc	r1, r20
     9f6:	55 1f       	adc	r21, r21
     9f8:	f2 cf       	rjmp	.-28     	; 0x9de <__fp_split3+0xe>
     9fa:	46 95       	lsr	r20
     9fc:	f1 df       	rcall	.-30     	; 0x9e0 <__fp_splitA>
     9fe:	08 c0       	rjmp	.+16     	; 0xa10 <__fp_splitA+0x30>
     a00:	16 16       	cp	r1, r22
     a02:	17 06       	cpc	r1, r23
     a04:	18 06       	cpc	r1, r24
     a06:	99 1f       	adc	r25, r25
     a08:	f1 cf       	rjmp	.-30     	; 0x9ec <__fp_splitA+0xc>
     a0a:	86 95       	lsr	r24
     a0c:	71 05       	cpc	r23, r1
     a0e:	61 05       	cpc	r22, r1
     a10:	08 94       	sec
     a12:	08 95       	ret

00000a14 <__fp_zero>:
     a14:	e8 94       	clt

00000a16 <__fp_szero>:
     a16:	bb 27       	eor	r27, r27
     a18:	66 27       	eor	r22, r22
     a1a:	77 27       	eor	r23, r23
     a1c:	cb 01       	movw	r24, r22
     a1e:	97 f9       	bld	r25, 7
     a20:	08 95       	ret

00000a22 <__mulsf3>:
     a22:	0e 94 24 05 	call	0xa48	; 0xa48 <__mulsf3x>
     a26:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <__fp_round>
     a2a:	0e 94 c9 04 	call	0x992	; 0x992 <__fp_pscA>
     a2e:	38 f0       	brcs	.+14     	; 0xa3e <__mulsf3+0x1c>
     a30:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__fp_pscB>
     a34:	20 f0       	brcs	.+8      	; 0xa3e <__mulsf3+0x1c>
     a36:	95 23       	and	r25, r21
     a38:	11 f0       	breq	.+4      	; 0xa3e <__mulsf3+0x1c>
     a3a:	0c 94 c0 04 	jmp	0x980	; 0x980 <__fp_inf>
     a3e:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__fp_nan>
     a42:	11 24       	eor	r1, r1
     a44:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__fp_szero>

00000a48 <__mulsf3x>:
     a48:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__fp_split3>
     a4c:	70 f3       	brcs	.-36     	; 0xa2a <__mulsf3+0x8>

00000a4e <__mulsf3_pse>:
     a4e:	95 9f       	mul	r25, r21
     a50:	c1 f3       	breq	.-16     	; 0xa42 <__mulsf3+0x20>
     a52:	95 0f       	add	r25, r21
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	55 1f       	adc	r21, r21
     a58:	62 9f       	mul	r22, r18
     a5a:	f0 01       	movw	r30, r0
     a5c:	72 9f       	mul	r23, r18
     a5e:	bb 27       	eor	r27, r27
     a60:	f0 0d       	add	r31, r0
     a62:	b1 1d       	adc	r27, r1
     a64:	63 9f       	mul	r22, r19
     a66:	aa 27       	eor	r26, r26
     a68:	f0 0d       	add	r31, r0
     a6a:	b1 1d       	adc	r27, r1
     a6c:	aa 1f       	adc	r26, r26
     a6e:	64 9f       	mul	r22, r20
     a70:	66 27       	eor	r22, r22
     a72:	b0 0d       	add	r27, r0
     a74:	a1 1d       	adc	r26, r1
     a76:	66 1f       	adc	r22, r22
     a78:	82 9f       	mul	r24, r18
     a7a:	22 27       	eor	r18, r18
     a7c:	b0 0d       	add	r27, r0
     a7e:	a1 1d       	adc	r26, r1
     a80:	62 1f       	adc	r22, r18
     a82:	73 9f       	mul	r23, r19
     a84:	b0 0d       	add	r27, r0
     a86:	a1 1d       	adc	r26, r1
     a88:	62 1f       	adc	r22, r18
     a8a:	83 9f       	mul	r24, r19
     a8c:	a0 0d       	add	r26, r0
     a8e:	61 1d       	adc	r22, r1
     a90:	22 1f       	adc	r18, r18
     a92:	74 9f       	mul	r23, r20
     a94:	33 27       	eor	r19, r19
     a96:	a0 0d       	add	r26, r0
     a98:	61 1d       	adc	r22, r1
     a9a:	23 1f       	adc	r18, r19
     a9c:	84 9f       	mul	r24, r20
     a9e:	60 0d       	add	r22, r0
     aa0:	21 1d       	adc	r18, r1
     aa2:	82 2f       	mov	r24, r18
     aa4:	76 2f       	mov	r23, r22
     aa6:	6a 2f       	mov	r22, r26
     aa8:	11 24       	eor	r1, r1
     aaa:	9f 57       	subi	r25, 0x7F	; 127
     aac:	50 40       	sbci	r21, 0x00	; 0
     aae:	9a f0       	brmi	.+38     	; 0xad6 <__mulsf3_pse+0x88>
     ab0:	f1 f0       	breq	.+60     	; 0xaee <__mulsf3_pse+0xa0>
     ab2:	88 23       	and	r24, r24
     ab4:	4a f0       	brmi	.+18     	; 0xac8 <__mulsf3_pse+0x7a>
     ab6:	ee 0f       	add	r30, r30
     ab8:	ff 1f       	adc	r31, r31
     aba:	bb 1f       	adc	r27, r27
     abc:	66 1f       	adc	r22, r22
     abe:	77 1f       	adc	r23, r23
     ac0:	88 1f       	adc	r24, r24
     ac2:	91 50       	subi	r25, 0x01	; 1
     ac4:	50 40       	sbci	r21, 0x00	; 0
     ac6:	a9 f7       	brne	.-22     	; 0xab2 <__mulsf3_pse+0x64>
     ac8:	9e 3f       	cpi	r25, 0xFE	; 254
     aca:	51 05       	cpc	r21, r1
     acc:	80 f0       	brcs	.+32     	; 0xaee <__mulsf3_pse+0xa0>
     ace:	0c 94 c0 04 	jmp	0x980	; 0x980 <__fp_inf>
     ad2:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__fp_szero>
     ad6:	5f 3f       	cpi	r21, 0xFF	; 255
     ad8:	e4 f3       	brlt	.-8      	; 0xad2 <__mulsf3_pse+0x84>
     ada:	98 3e       	cpi	r25, 0xE8	; 232
     adc:	d4 f3       	brlt	.-12     	; 0xad2 <__mulsf3_pse+0x84>
     ade:	86 95       	lsr	r24
     ae0:	77 95       	ror	r23
     ae2:	67 95       	ror	r22
     ae4:	b7 95       	ror	r27
     ae6:	f7 95       	ror	r31
     ae8:	e7 95       	ror	r30
     aea:	9f 5f       	subi	r25, 0xFF	; 255
     aec:	c1 f7       	brne	.-16     	; 0xade <__mulsf3_pse+0x90>
     aee:	fe 2b       	or	r31, r30
     af0:	88 0f       	add	r24, r24
     af2:	91 1d       	adc	r25, r1
     af4:	96 95       	lsr	r25
     af6:	87 95       	ror	r24
     af8:	97 f9       	bld	r25, 7
     afa:	08 95       	ret

00000afc <printf>:
     afc:	a0 e0       	ldi	r26, 0x00	; 0
     afe:	b0 e0       	ldi	r27, 0x00	; 0
     b00:	e4 e8       	ldi	r30, 0x84	; 132
     b02:	f5 e0       	ldi	r31, 0x05	; 5
     b04:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <__prologue_saves__+0x20>
     b08:	ae 01       	movw	r20, r28
     b0a:	4b 5f       	subi	r20, 0xFB	; 251
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	fa 01       	movw	r30, r20
     b10:	61 91       	ld	r22, Z+
     b12:	71 91       	ld	r23, Z+
     b14:	af 01       	movw	r20, r30
     b16:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <__iob+0x2>
     b1a:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <__iob+0x3>
     b1e:	0e 94 c4 05 	call	0xb88	; 0xb88 <vfprintf>
     b22:	e2 e0       	ldi	r30, 0x02	; 2
     b24:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__epilogue_restores__+0x20>

00000b28 <puts>:
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <__iob+0x2>
     b34:	f0 91 56 01 	lds	r31, 0x0156	; 0x800156 <__iob+0x3>
     b38:	23 81       	ldd	r18, Z+3	; 0x03
     b3a:	21 ff       	sbrs	r18, 1
     b3c:	1b c0       	rjmp	.+54     	; 0xb74 <puts+0x4c>
     b3e:	8c 01       	movw	r16, r24
     b40:	d0 e0       	ldi	r29, 0x00	; 0
     b42:	c0 e0       	ldi	r28, 0x00	; 0
     b44:	f8 01       	movw	r30, r16
     b46:	81 91       	ld	r24, Z+
     b48:	8f 01       	movw	r16, r30
     b4a:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <__iob+0x2>
     b4e:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <__iob+0x3>
     b52:	db 01       	movw	r26, r22
     b54:	18 96       	adiw	r26, 0x08	; 8
     b56:	ed 91       	ld	r30, X+
     b58:	fc 91       	ld	r31, X
     b5a:	19 97       	sbiw	r26, 0x09	; 9
     b5c:	88 23       	and	r24, r24
     b5e:	31 f0       	breq	.+12     	; 0xb6c <puts+0x44>
     b60:	09 95       	icall
     b62:	89 2b       	or	r24, r25
     b64:	79 f3       	breq	.-34     	; 0xb44 <puts+0x1c>
     b66:	df ef       	ldi	r29, 0xFF	; 255
     b68:	cf ef       	ldi	r28, 0xFF	; 255
     b6a:	ec cf       	rjmp	.-40     	; 0xb44 <puts+0x1c>
     b6c:	8a e0       	ldi	r24, 0x0A	; 10
     b6e:	09 95       	icall
     b70:	89 2b       	or	r24, r25
     b72:	19 f0       	breq	.+6      	; 0xb7a <puts+0x52>
     b74:	8f ef       	ldi	r24, 0xFF	; 255
     b76:	9f ef       	ldi	r25, 0xFF	; 255
     b78:	02 c0       	rjmp	.+4      	; 0xb7e <puts+0x56>
     b7a:	8d 2f       	mov	r24, r29
     b7c:	9c 2f       	mov	r25, r28
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	1f 91       	pop	r17
     b84:	0f 91       	pop	r16
     b86:	08 95       	ret

00000b88 <vfprintf>:
     b88:	ab e0       	ldi	r26, 0x0B	; 11
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	ea ec       	ldi	r30, 0xCA	; 202
     b8e:	f5 e0       	ldi	r31, 0x05	; 5
     b90:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__prologue_saves__>
     b94:	6c 01       	movw	r12, r24
     b96:	7b 01       	movw	r14, r22
     b98:	8a 01       	movw	r16, r20
     b9a:	fc 01       	movw	r30, r24
     b9c:	17 82       	std	Z+7, r1	; 0x07
     b9e:	16 82       	std	Z+6, r1	; 0x06
     ba0:	83 81       	ldd	r24, Z+3	; 0x03
     ba2:	81 ff       	sbrs	r24, 1
     ba4:	cc c1       	rjmp	.+920    	; 0xf3e <vfprintf+0x3b6>
     ba6:	ce 01       	movw	r24, r28
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	3c 01       	movw	r6, r24
     bac:	f6 01       	movw	r30, r12
     bae:	93 81       	ldd	r25, Z+3	; 0x03
     bb0:	f7 01       	movw	r30, r14
     bb2:	93 fd       	sbrc	r25, 3
     bb4:	85 91       	lpm	r24, Z+
     bb6:	93 ff       	sbrs	r25, 3
     bb8:	81 91       	ld	r24, Z+
     bba:	7f 01       	movw	r14, r30
     bbc:	88 23       	and	r24, r24
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <vfprintf+0x3a>
     bc0:	ba c1       	rjmp	.+884    	; 0xf36 <vfprintf+0x3ae>
     bc2:	85 32       	cpi	r24, 0x25	; 37
     bc4:	39 f4       	brne	.+14     	; 0xbd4 <vfprintf+0x4c>
     bc6:	93 fd       	sbrc	r25, 3
     bc8:	85 91       	lpm	r24, Z+
     bca:	93 ff       	sbrs	r25, 3
     bcc:	81 91       	ld	r24, Z+
     bce:	7f 01       	movw	r14, r30
     bd0:	85 32       	cpi	r24, 0x25	; 37
     bd2:	29 f4       	brne	.+10     	; 0xbde <vfprintf+0x56>
     bd4:	b6 01       	movw	r22, r12
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0e 94 bb 07 	call	0xf76	; 0xf76 <fputc>
     bdc:	e7 cf       	rjmp	.-50     	; 0xbac <vfprintf+0x24>
     bde:	91 2c       	mov	r9, r1
     be0:	21 2c       	mov	r2, r1
     be2:	31 2c       	mov	r3, r1
     be4:	ff e1       	ldi	r31, 0x1F	; 31
     be6:	f3 15       	cp	r31, r3
     be8:	d8 f0       	brcs	.+54     	; 0xc20 <vfprintf+0x98>
     bea:	8b 32       	cpi	r24, 0x2B	; 43
     bec:	79 f0       	breq	.+30     	; 0xc0c <vfprintf+0x84>
     bee:	38 f4       	brcc	.+14     	; 0xbfe <vfprintf+0x76>
     bf0:	80 32       	cpi	r24, 0x20	; 32
     bf2:	79 f0       	breq	.+30     	; 0xc12 <vfprintf+0x8a>
     bf4:	83 32       	cpi	r24, 0x23	; 35
     bf6:	a1 f4       	brne	.+40     	; 0xc20 <vfprintf+0x98>
     bf8:	23 2d       	mov	r18, r3
     bfa:	20 61       	ori	r18, 0x10	; 16
     bfc:	1d c0       	rjmp	.+58     	; 0xc38 <vfprintf+0xb0>
     bfe:	8d 32       	cpi	r24, 0x2D	; 45
     c00:	61 f0       	breq	.+24     	; 0xc1a <vfprintf+0x92>
     c02:	80 33       	cpi	r24, 0x30	; 48
     c04:	69 f4       	brne	.+26     	; 0xc20 <vfprintf+0x98>
     c06:	23 2d       	mov	r18, r3
     c08:	21 60       	ori	r18, 0x01	; 1
     c0a:	16 c0       	rjmp	.+44     	; 0xc38 <vfprintf+0xb0>
     c0c:	83 2d       	mov	r24, r3
     c0e:	82 60       	ori	r24, 0x02	; 2
     c10:	38 2e       	mov	r3, r24
     c12:	e3 2d       	mov	r30, r3
     c14:	e4 60       	ori	r30, 0x04	; 4
     c16:	3e 2e       	mov	r3, r30
     c18:	2a c0       	rjmp	.+84     	; 0xc6e <vfprintf+0xe6>
     c1a:	f3 2d       	mov	r31, r3
     c1c:	f8 60       	ori	r31, 0x08	; 8
     c1e:	1d c0       	rjmp	.+58     	; 0xc5a <vfprintf+0xd2>
     c20:	37 fc       	sbrc	r3, 7
     c22:	2d c0       	rjmp	.+90     	; 0xc7e <vfprintf+0xf6>
     c24:	20 ed       	ldi	r18, 0xD0	; 208
     c26:	28 0f       	add	r18, r24
     c28:	2a 30       	cpi	r18, 0x0A	; 10
     c2a:	40 f0       	brcs	.+16     	; 0xc3c <vfprintf+0xb4>
     c2c:	8e 32       	cpi	r24, 0x2E	; 46
     c2e:	b9 f4       	brne	.+46     	; 0xc5e <vfprintf+0xd6>
     c30:	36 fc       	sbrc	r3, 6
     c32:	81 c1       	rjmp	.+770    	; 0xf36 <vfprintf+0x3ae>
     c34:	23 2d       	mov	r18, r3
     c36:	20 64       	ori	r18, 0x40	; 64
     c38:	32 2e       	mov	r3, r18
     c3a:	19 c0       	rjmp	.+50     	; 0xc6e <vfprintf+0xe6>
     c3c:	36 fe       	sbrs	r3, 6
     c3e:	06 c0       	rjmp	.+12     	; 0xc4c <vfprintf+0xc4>
     c40:	8a e0       	ldi	r24, 0x0A	; 10
     c42:	98 9e       	mul	r9, r24
     c44:	20 0d       	add	r18, r0
     c46:	11 24       	eor	r1, r1
     c48:	92 2e       	mov	r9, r18
     c4a:	11 c0       	rjmp	.+34     	; 0xc6e <vfprintf+0xe6>
     c4c:	ea e0       	ldi	r30, 0x0A	; 10
     c4e:	2e 9e       	mul	r2, r30
     c50:	20 0d       	add	r18, r0
     c52:	11 24       	eor	r1, r1
     c54:	22 2e       	mov	r2, r18
     c56:	f3 2d       	mov	r31, r3
     c58:	f0 62       	ori	r31, 0x20	; 32
     c5a:	3f 2e       	mov	r3, r31
     c5c:	08 c0       	rjmp	.+16     	; 0xc6e <vfprintf+0xe6>
     c5e:	8c 36       	cpi	r24, 0x6C	; 108
     c60:	21 f4       	brne	.+8      	; 0xc6a <vfprintf+0xe2>
     c62:	83 2d       	mov	r24, r3
     c64:	80 68       	ori	r24, 0x80	; 128
     c66:	38 2e       	mov	r3, r24
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <vfprintf+0xe6>
     c6a:	88 36       	cpi	r24, 0x68	; 104
     c6c:	41 f4       	brne	.+16     	; 0xc7e <vfprintf+0xf6>
     c6e:	f7 01       	movw	r30, r14
     c70:	93 fd       	sbrc	r25, 3
     c72:	85 91       	lpm	r24, Z+
     c74:	93 ff       	sbrs	r25, 3
     c76:	81 91       	ld	r24, Z+
     c78:	7f 01       	movw	r14, r30
     c7a:	81 11       	cpse	r24, r1
     c7c:	b3 cf       	rjmp	.-154    	; 0xbe4 <vfprintf+0x5c>
     c7e:	98 2f       	mov	r25, r24
     c80:	9f 7d       	andi	r25, 0xDF	; 223
     c82:	95 54       	subi	r25, 0x45	; 69
     c84:	93 30       	cpi	r25, 0x03	; 3
     c86:	28 f4       	brcc	.+10     	; 0xc92 <vfprintf+0x10a>
     c88:	0c 5f       	subi	r16, 0xFC	; 252
     c8a:	1f 4f       	sbci	r17, 0xFF	; 255
     c8c:	9f e3       	ldi	r25, 0x3F	; 63
     c8e:	99 83       	std	Y+1, r25	; 0x01
     c90:	0d c0       	rjmp	.+26     	; 0xcac <vfprintf+0x124>
     c92:	83 36       	cpi	r24, 0x63	; 99
     c94:	31 f0       	breq	.+12     	; 0xca2 <vfprintf+0x11a>
     c96:	83 37       	cpi	r24, 0x73	; 115
     c98:	71 f0       	breq	.+28     	; 0xcb6 <vfprintf+0x12e>
     c9a:	83 35       	cpi	r24, 0x53	; 83
     c9c:	09 f0       	breq	.+2      	; 0xca0 <vfprintf+0x118>
     c9e:	59 c0       	rjmp	.+178    	; 0xd52 <vfprintf+0x1ca>
     ca0:	21 c0       	rjmp	.+66     	; 0xce4 <vfprintf+0x15c>
     ca2:	f8 01       	movw	r30, r16
     ca4:	80 81       	ld	r24, Z
     ca6:	89 83       	std	Y+1, r24	; 0x01
     ca8:	0e 5f       	subi	r16, 0xFE	; 254
     caa:	1f 4f       	sbci	r17, 0xFF	; 255
     cac:	88 24       	eor	r8, r8
     cae:	83 94       	inc	r8
     cb0:	91 2c       	mov	r9, r1
     cb2:	53 01       	movw	r10, r6
     cb4:	13 c0       	rjmp	.+38     	; 0xcdc <vfprintf+0x154>
     cb6:	28 01       	movw	r4, r16
     cb8:	f2 e0       	ldi	r31, 0x02	; 2
     cba:	4f 0e       	add	r4, r31
     cbc:	51 1c       	adc	r5, r1
     cbe:	f8 01       	movw	r30, r16
     cc0:	a0 80       	ld	r10, Z
     cc2:	b1 80       	ldd	r11, Z+1	; 0x01
     cc4:	36 fe       	sbrs	r3, 6
     cc6:	03 c0       	rjmp	.+6      	; 0xcce <vfprintf+0x146>
     cc8:	69 2d       	mov	r22, r9
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <vfprintf+0x14a>
     cce:	6f ef       	ldi	r22, 0xFF	; 255
     cd0:	7f ef       	ldi	r23, 0xFF	; 255
     cd2:	c5 01       	movw	r24, r10
     cd4:	0e 94 b0 07 	call	0xf60	; 0xf60 <strnlen>
     cd8:	4c 01       	movw	r8, r24
     cda:	82 01       	movw	r16, r4
     cdc:	f3 2d       	mov	r31, r3
     cde:	ff 77       	andi	r31, 0x7F	; 127
     ce0:	3f 2e       	mov	r3, r31
     ce2:	16 c0       	rjmp	.+44     	; 0xd10 <vfprintf+0x188>
     ce4:	28 01       	movw	r4, r16
     ce6:	22 e0       	ldi	r18, 0x02	; 2
     ce8:	42 0e       	add	r4, r18
     cea:	51 1c       	adc	r5, r1
     cec:	f8 01       	movw	r30, r16
     cee:	a0 80       	ld	r10, Z
     cf0:	b1 80       	ldd	r11, Z+1	; 0x01
     cf2:	36 fe       	sbrs	r3, 6
     cf4:	03 c0       	rjmp	.+6      	; 0xcfc <vfprintf+0x174>
     cf6:	69 2d       	mov	r22, r9
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <vfprintf+0x178>
     cfc:	6f ef       	ldi	r22, 0xFF	; 255
     cfe:	7f ef       	ldi	r23, 0xFF	; 255
     d00:	c5 01       	movw	r24, r10
     d02:	0e 94 a5 07 	call	0xf4a	; 0xf4a <strnlen_P>
     d06:	4c 01       	movw	r8, r24
     d08:	f3 2d       	mov	r31, r3
     d0a:	f0 68       	ori	r31, 0x80	; 128
     d0c:	3f 2e       	mov	r3, r31
     d0e:	82 01       	movw	r16, r4
     d10:	33 fc       	sbrc	r3, 3
     d12:	1b c0       	rjmp	.+54     	; 0xd4a <vfprintf+0x1c2>
     d14:	82 2d       	mov	r24, r2
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	88 16       	cp	r8, r24
     d1a:	99 06       	cpc	r9, r25
     d1c:	b0 f4       	brcc	.+44     	; 0xd4a <vfprintf+0x1c2>
     d1e:	b6 01       	movw	r22, r12
     d20:	80 e2       	ldi	r24, 0x20	; 32
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 bb 07 	call	0xf76	; 0xf76 <fputc>
     d28:	2a 94       	dec	r2
     d2a:	f4 cf       	rjmp	.-24     	; 0xd14 <vfprintf+0x18c>
     d2c:	f5 01       	movw	r30, r10
     d2e:	37 fc       	sbrc	r3, 7
     d30:	85 91       	lpm	r24, Z+
     d32:	37 fe       	sbrs	r3, 7
     d34:	81 91       	ld	r24, Z+
     d36:	5f 01       	movw	r10, r30
     d38:	b6 01       	movw	r22, r12
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 bb 07 	call	0xf76	; 0xf76 <fputc>
     d40:	21 10       	cpse	r2, r1
     d42:	2a 94       	dec	r2
     d44:	21 e0       	ldi	r18, 0x01	; 1
     d46:	82 1a       	sub	r8, r18
     d48:	91 08       	sbc	r9, r1
     d4a:	81 14       	cp	r8, r1
     d4c:	91 04       	cpc	r9, r1
     d4e:	71 f7       	brne	.-36     	; 0xd2c <vfprintf+0x1a4>
     d50:	e8 c0       	rjmp	.+464    	; 0xf22 <vfprintf+0x39a>
     d52:	84 36       	cpi	r24, 0x64	; 100
     d54:	11 f0       	breq	.+4      	; 0xd5a <vfprintf+0x1d2>
     d56:	89 36       	cpi	r24, 0x69	; 105
     d58:	41 f5       	brne	.+80     	; 0xdaa <vfprintf+0x222>
     d5a:	f8 01       	movw	r30, r16
     d5c:	37 fe       	sbrs	r3, 7
     d5e:	07 c0       	rjmp	.+14     	; 0xd6e <vfprintf+0x1e6>
     d60:	60 81       	ld	r22, Z
     d62:	71 81       	ldd	r23, Z+1	; 0x01
     d64:	82 81       	ldd	r24, Z+2	; 0x02
     d66:	93 81       	ldd	r25, Z+3	; 0x03
     d68:	0c 5f       	subi	r16, 0xFC	; 252
     d6a:	1f 4f       	sbci	r17, 0xFF	; 255
     d6c:	08 c0       	rjmp	.+16     	; 0xd7e <vfprintf+0x1f6>
     d6e:	60 81       	ld	r22, Z
     d70:	71 81       	ldd	r23, Z+1	; 0x01
     d72:	07 2e       	mov	r0, r23
     d74:	00 0c       	add	r0, r0
     d76:	88 0b       	sbc	r24, r24
     d78:	99 0b       	sbc	r25, r25
     d7a:	0e 5f       	subi	r16, 0xFE	; 254
     d7c:	1f 4f       	sbci	r17, 0xFF	; 255
     d7e:	f3 2d       	mov	r31, r3
     d80:	ff 76       	andi	r31, 0x6F	; 111
     d82:	3f 2e       	mov	r3, r31
     d84:	97 ff       	sbrs	r25, 7
     d86:	09 c0       	rjmp	.+18     	; 0xd9a <vfprintf+0x212>
     d88:	90 95       	com	r25
     d8a:	80 95       	com	r24
     d8c:	70 95       	com	r23
     d8e:	61 95       	neg	r22
     d90:	7f 4f       	sbci	r23, 0xFF	; 255
     d92:	8f 4f       	sbci	r24, 0xFF	; 255
     d94:	9f 4f       	sbci	r25, 0xFF	; 255
     d96:	f0 68       	ori	r31, 0x80	; 128
     d98:	3f 2e       	mov	r3, r31
     d9a:	2a e0       	ldi	r18, 0x0A	; 10
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	a3 01       	movw	r20, r6
     da0:	0e 94 f7 07 	call	0xfee	; 0xfee <__ultoa_invert>
     da4:	88 2e       	mov	r8, r24
     da6:	86 18       	sub	r8, r6
     da8:	45 c0       	rjmp	.+138    	; 0xe34 <vfprintf+0x2ac>
     daa:	85 37       	cpi	r24, 0x75	; 117
     dac:	31 f4       	brne	.+12     	; 0xdba <vfprintf+0x232>
     dae:	23 2d       	mov	r18, r3
     db0:	2f 7e       	andi	r18, 0xEF	; 239
     db2:	b2 2e       	mov	r11, r18
     db4:	2a e0       	ldi	r18, 0x0A	; 10
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	25 c0       	rjmp	.+74     	; 0xe04 <vfprintf+0x27c>
     dba:	93 2d       	mov	r25, r3
     dbc:	99 7f       	andi	r25, 0xF9	; 249
     dbe:	b9 2e       	mov	r11, r25
     dc0:	8f 36       	cpi	r24, 0x6F	; 111
     dc2:	c1 f0       	breq	.+48     	; 0xdf4 <vfprintf+0x26c>
     dc4:	18 f4       	brcc	.+6      	; 0xdcc <vfprintf+0x244>
     dc6:	88 35       	cpi	r24, 0x58	; 88
     dc8:	79 f0       	breq	.+30     	; 0xde8 <vfprintf+0x260>
     dca:	b5 c0       	rjmp	.+362    	; 0xf36 <vfprintf+0x3ae>
     dcc:	80 37       	cpi	r24, 0x70	; 112
     dce:	19 f0       	breq	.+6      	; 0xdd6 <vfprintf+0x24e>
     dd0:	88 37       	cpi	r24, 0x78	; 120
     dd2:	21 f0       	breq	.+8      	; 0xddc <vfprintf+0x254>
     dd4:	b0 c0       	rjmp	.+352    	; 0xf36 <vfprintf+0x3ae>
     dd6:	e9 2f       	mov	r30, r25
     dd8:	e0 61       	ori	r30, 0x10	; 16
     dda:	be 2e       	mov	r11, r30
     ddc:	b4 fe       	sbrs	r11, 4
     dde:	0d c0       	rjmp	.+26     	; 0xdfa <vfprintf+0x272>
     de0:	fb 2d       	mov	r31, r11
     de2:	f4 60       	ori	r31, 0x04	; 4
     de4:	bf 2e       	mov	r11, r31
     de6:	09 c0       	rjmp	.+18     	; 0xdfa <vfprintf+0x272>
     de8:	34 fe       	sbrs	r3, 4
     dea:	0a c0       	rjmp	.+20     	; 0xe00 <vfprintf+0x278>
     dec:	29 2f       	mov	r18, r25
     dee:	26 60       	ori	r18, 0x06	; 6
     df0:	b2 2e       	mov	r11, r18
     df2:	06 c0       	rjmp	.+12     	; 0xe00 <vfprintf+0x278>
     df4:	28 e0       	ldi	r18, 0x08	; 8
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	05 c0       	rjmp	.+10     	; 0xe04 <vfprintf+0x27c>
     dfa:	20 e1       	ldi	r18, 0x10	; 16
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <vfprintf+0x27c>
     e00:	20 e1       	ldi	r18, 0x10	; 16
     e02:	32 e0       	ldi	r19, 0x02	; 2
     e04:	f8 01       	movw	r30, r16
     e06:	b7 fe       	sbrs	r11, 7
     e08:	07 c0       	rjmp	.+14     	; 0xe18 <vfprintf+0x290>
     e0a:	60 81       	ld	r22, Z
     e0c:	71 81       	ldd	r23, Z+1	; 0x01
     e0e:	82 81       	ldd	r24, Z+2	; 0x02
     e10:	93 81       	ldd	r25, Z+3	; 0x03
     e12:	0c 5f       	subi	r16, 0xFC	; 252
     e14:	1f 4f       	sbci	r17, 0xFF	; 255
     e16:	06 c0       	rjmp	.+12     	; 0xe24 <vfprintf+0x29c>
     e18:	60 81       	ld	r22, Z
     e1a:	71 81       	ldd	r23, Z+1	; 0x01
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 5f       	subi	r16, 0xFE	; 254
     e22:	1f 4f       	sbci	r17, 0xFF	; 255
     e24:	a3 01       	movw	r20, r6
     e26:	0e 94 f7 07 	call	0xfee	; 0xfee <__ultoa_invert>
     e2a:	88 2e       	mov	r8, r24
     e2c:	86 18       	sub	r8, r6
     e2e:	fb 2d       	mov	r31, r11
     e30:	ff 77       	andi	r31, 0x7F	; 127
     e32:	3f 2e       	mov	r3, r31
     e34:	36 fe       	sbrs	r3, 6
     e36:	0d c0       	rjmp	.+26     	; 0xe52 <vfprintf+0x2ca>
     e38:	23 2d       	mov	r18, r3
     e3a:	2e 7f       	andi	r18, 0xFE	; 254
     e3c:	a2 2e       	mov	r10, r18
     e3e:	89 14       	cp	r8, r9
     e40:	58 f4       	brcc	.+22     	; 0xe58 <vfprintf+0x2d0>
     e42:	34 fe       	sbrs	r3, 4
     e44:	0b c0       	rjmp	.+22     	; 0xe5c <vfprintf+0x2d4>
     e46:	32 fc       	sbrc	r3, 2
     e48:	09 c0       	rjmp	.+18     	; 0xe5c <vfprintf+0x2d4>
     e4a:	83 2d       	mov	r24, r3
     e4c:	8e 7e       	andi	r24, 0xEE	; 238
     e4e:	a8 2e       	mov	r10, r24
     e50:	05 c0       	rjmp	.+10     	; 0xe5c <vfprintf+0x2d4>
     e52:	b8 2c       	mov	r11, r8
     e54:	a3 2c       	mov	r10, r3
     e56:	03 c0       	rjmp	.+6      	; 0xe5e <vfprintf+0x2d6>
     e58:	b8 2c       	mov	r11, r8
     e5a:	01 c0       	rjmp	.+2      	; 0xe5e <vfprintf+0x2d6>
     e5c:	b9 2c       	mov	r11, r9
     e5e:	a4 fe       	sbrs	r10, 4
     e60:	0f c0       	rjmp	.+30     	; 0xe80 <vfprintf+0x2f8>
     e62:	fe 01       	movw	r30, r28
     e64:	e8 0d       	add	r30, r8
     e66:	f1 1d       	adc	r31, r1
     e68:	80 81       	ld	r24, Z
     e6a:	80 33       	cpi	r24, 0x30	; 48
     e6c:	21 f4       	brne	.+8      	; 0xe76 <vfprintf+0x2ee>
     e6e:	9a 2d       	mov	r25, r10
     e70:	99 7e       	andi	r25, 0xE9	; 233
     e72:	a9 2e       	mov	r10, r25
     e74:	09 c0       	rjmp	.+18     	; 0xe88 <vfprintf+0x300>
     e76:	a2 fe       	sbrs	r10, 2
     e78:	06 c0       	rjmp	.+12     	; 0xe86 <vfprintf+0x2fe>
     e7a:	b3 94       	inc	r11
     e7c:	b3 94       	inc	r11
     e7e:	04 c0       	rjmp	.+8      	; 0xe88 <vfprintf+0x300>
     e80:	8a 2d       	mov	r24, r10
     e82:	86 78       	andi	r24, 0x86	; 134
     e84:	09 f0       	breq	.+2      	; 0xe88 <vfprintf+0x300>
     e86:	b3 94       	inc	r11
     e88:	a3 fc       	sbrc	r10, 3
     e8a:	11 c0       	rjmp	.+34     	; 0xeae <vfprintf+0x326>
     e8c:	a0 fe       	sbrs	r10, 0
     e8e:	06 c0       	rjmp	.+12     	; 0xe9c <vfprintf+0x314>
     e90:	b2 14       	cp	r11, r2
     e92:	88 f4       	brcc	.+34     	; 0xeb6 <vfprintf+0x32e>
     e94:	28 0c       	add	r2, r8
     e96:	92 2c       	mov	r9, r2
     e98:	9b 18       	sub	r9, r11
     e9a:	0e c0       	rjmp	.+28     	; 0xeb8 <vfprintf+0x330>
     e9c:	b2 14       	cp	r11, r2
     e9e:	60 f4       	brcc	.+24     	; 0xeb8 <vfprintf+0x330>
     ea0:	b6 01       	movw	r22, r12
     ea2:	80 e2       	ldi	r24, 0x20	; 32
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	0e 94 bb 07 	call	0xf76	; 0xf76 <fputc>
     eaa:	b3 94       	inc	r11
     eac:	f7 cf       	rjmp	.-18     	; 0xe9c <vfprintf+0x314>
     eae:	b2 14       	cp	r11, r2
     eb0:	18 f4       	brcc	.+6      	; 0xeb8 <vfprintf+0x330>
     eb2:	2b 18       	sub	r2, r11
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <vfprintf+0x332>
     eb6:	98 2c       	mov	r9, r8
     eb8:	21 2c       	mov	r2, r1
     eba:	a4 fe       	sbrs	r10, 4
     ebc:	10 c0       	rjmp	.+32     	; 0xede <vfprintf+0x356>
     ebe:	b6 01       	movw	r22, r12
     ec0:	80 e3       	ldi	r24, 0x30	; 48
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 bb 07 	call	0xf76	; 0xf76 <fputc>
     ec8:	a2 fe       	sbrs	r10, 2
     eca:	17 c0       	rjmp	.+46     	; 0xefa <vfprintf+0x372>
     ecc:	a1 fc       	sbrc	r10, 1
     ece:	03 c0       	rjmp	.+6      	; 0xed6 <vfprintf+0x34e>
     ed0:	88 e7       	ldi	r24, 0x78	; 120
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <vfprintf+0x352>
     ed6:	88 e5       	ldi	r24, 0x58	; 88
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	b6 01       	movw	r22, r12
     edc:	0c c0       	rjmp	.+24     	; 0xef6 <vfprintf+0x36e>
     ede:	8a 2d       	mov	r24, r10
     ee0:	86 78       	andi	r24, 0x86	; 134
     ee2:	59 f0       	breq	.+22     	; 0xefa <vfprintf+0x372>
     ee4:	a1 fe       	sbrs	r10, 1
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <vfprintf+0x364>
     ee8:	8b e2       	ldi	r24, 0x2B	; 43
     eea:	01 c0       	rjmp	.+2      	; 0xeee <vfprintf+0x366>
     eec:	80 e2       	ldi	r24, 0x20	; 32
     eee:	a7 fc       	sbrc	r10, 7
     ef0:	8d e2       	ldi	r24, 0x2D	; 45
     ef2:	b6 01       	movw	r22, r12
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 bb 07 	call	0xf76	; 0xf76 <fputc>
     efa:	89 14       	cp	r8, r9
     efc:	38 f4       	brcc	.+14     	; 0xf0c <vfprintf+0x384>
     efe:	b6 01       	movw	r22, r12
     f00:	80 e3       	ldi	r24, 0x30	; 48
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 bb 07 	call	0xf76	; 0xf76 <fputc>
     f08:	9a 94       	dec	r9
     f0a:	f7 cf       	rjmp	.-18     	; 0xefa <vfprintf+0x372>
     f0c:	8a 94       	dec	r8
     f0e:	f3 01       	movw	r30, r6
     f10:	e8 0d       	add	r30, r8
     f12:	f1 1d       	adc	r31, r1
     f14:	80 81       	ld	r24, Z
     f16:	b6 01       	movw	r22, r12
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 bb 07 	call	0xf76	; 0xf76 <fputc>
     f1e:	81 10       	cpse	r8, r1
     f20:	f5 cf       	rjmp	.-22     	; 0xf0c <vfprintf+0x384>
     f22:	22 20       	and	r2, r2
     f24:	09 f4       	brne	.+2      	; 0xf28 <vfprintf+0x3a0>
     f26:	42 ce       	rjmp	.-892    	; 0xbac <vfprintf+0x24>
     f28:	b6 01       	movw	r22, r12
     f2a:	80 e2       	ldi	r24, 0x20	; 32
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 bb 07 	call	0xf76	; 0xf76 <fputc>
     f32:	2a 94       	dec	r2
     f34:	f6 cf       	rjmp	.-20     	; 0xf22 <vfprintf+0x39a>
     f36:	f6 01       	movw	r30, r12
     f38:	86 81       	ldd	r24, Z+6	; 0x06
     f3a:	97 81       	ldd	r25, Z+7	; 0x07
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <vfprintf+0x3ba>
     f3e:	8f ef       	ldi	r24, 0xFF	; 255
     f40:	9f ef       	ldi	r25, 0xFF	; 255
     f42:	2b 96       	adiw	r28, 0x0b	; 11
     f44:	e2 e1       	ldi	r30, 0x12	; 18
     f46:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <__epilogue_restores__>

00000f4a <strnlen_P>:
     f4a:	fc 01       	movw	r30, r24
     f4c:	05 90       	lpm	r0, Z+
     f4e:	61 50       	subi	r22, 0x01	; 1
     f50:	70 40       	sbci	r23, 0x00	; 0
     f52:	01 10       	cpse	r0, r1
     f54:	d8 f7       	brcc	.-10     	; 0xf4c <strnlen_P+0x2>
     f56:	80 95       	com	r24
     f58:	90 95       	com	r25
     f5a:	8e 0f       	add	r24, r30
     f5c:	9f 1f       	adc	r25, r31
     f5e:	08 95       	ret

00000f60 <strnlen>:
     f60:	fc 01       	movw	r30, r24
     f62:	61 50       	subi	r22, 0x01	; 1
     f64:	70 40       	sbci	r23, 0x00	; 0
     f66:	01 90       	ld	r0, Z+
     f68:	01 10       	cpse	r0, r1
     f6a:	d8 f7       	brcc	.-10     	; 0xf62 <strnlen+0x2>
     f6c:	80 95       	com	r24
     f6e:	90 95       	com	r25
     f70:	8e 0f       	add	r24, r30
     f72:	9f 1f       	adc	r25, r31
     f74:	08 95       	ret

00000f76 <fputc>:
     f76:	0f 93       	push	r16
     f78:	1f 93       	push	r17
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	fb 01       	movw	r30, r22
     f80:	23 81       	ldd	r18, Z+3	; 0x03
     f82:	21 fd       	sbrc	r18, 1
     f84:	03 c0       	rjmp	.+6      	; 0xf8c <fputc+0x16>
     f86:	8f ef       	ldi	r24, 0xFF	; 255
     f88:	9f ef       	ldi	r25, 0xFF	; 255
     f8a:	2c c0       	rjmp	.+88     	; 0xfe4 <fputc+0x6e>
     f8c:	22 ff       	sbrs	r18, 2
     f8e:	16 c0       	rjmp	.+44     	; 0xfbc <fputc+0x46>
     f90:	46 81       	ldd	r20, Z+6	; 0x06
     f92:	57 81       	ldd	r21, Z+7	; 0x07
     f94:	24 81       	ldd	r18, Z+4	; 0x04
     f96:	35 81       	ldd	r19, Z+5	; 0x05
     f98:	42 17       	cp	r20, r18
     f9a:	53 07       	cpc	r21, r19
     f9c:	44 f4       	brge	.+16     	; 0xfae <fputc+0x38>
     f9e:	a0 81       	ld	r26, Z
     fa0:	b1 81       	ldd	r27, Z+1	; 0x01
     fa2:	9d 01       	movw	r18, r26
     fa4:	2f 5f       	subi	r18, 0xFF	; 255
     fa6:	3f 4f       	sbci	r19, 0xFF	; 255
     fa8:	31 83       	std	Z+1, r19	; 0x01
     faa:	20 83       	st	Z, r18
     fac:	8c 93       	st	X, r24
     fae:	26 81       	ldd	r18, Z+6	; 0x06
     fb0:	37 81       	ldd	r19, Z+7	; 0x07
     fb2:	2f 5f       	subi	r18, 0xFF	; 255
     fb4:	3f 4f       	sbci	r19, 0xFF	; 255
     fb6:	37 83       	std	Z+7, r19	; 0x07
     fb8:	26 83       	std	Z+6, r18	; 0x06
     fba:	14 c0       	rjmp	.+40     	; 0xfe4 <fputc+0x6e>
     fbc:	8b 01       	movw	r16, r22
     fbe:	ec 01       	movw	r28, r24
     fc0:	fb 01       	movw	r30, r22
     fc2:	00 84       	ldd	r0, Z+8	; 0x08
     fc4:	f1 85       	ldd	r31, Z+9	; 0x09
     fc6:	e0 2d       	mov	r30, r0
     fc8:	09 95       	icall
     fca:	89 2b       	or	r24, r25
     fcc:	e1 f6       	brne	.-72     	; 0xf86 <fputc+0x10>
     fce:	d8 01       	movw	r26, r16
     fd0:	16 96       	adiw	r26, 0x06	; 6
     fd2:	8d 91       	ld	r24, X+
     fd4:	9c 91       	ld	r25, X
     fd6:	17 97       	sbiw	r26, 0x07	; 7
     fd8:	01 96       	adiw	r24, 0x01	; 1
     fda:	17 96       	adiw	r26, 0x07	; 7
     fdc:	9c 93       	st	X, r25
     fde:	8e 93       	st	-X, r24
     fe0:	16 97       	sbiw	r26, 0x06	; 6
     fe2:	ce 01       	movw	r24, r28
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	08 95       	ret

00000fee <__ultoa_invert>:
     fee:	fa 01       	movw	r30, r20
     ff0:	aa 27       	eor	r26, r26
     ff2:	28 30       	cpi	r18, 0x08	; 8
     ff4:	51 f1       	breq	.+84     	; 0x104a <__ultoa_invert+0x5c>
     ff6:	20 31       	cpi	r18, 0x10	; 16
     ff8:	81 f1       	breq	.+96     	; 0x105a <__ultoa_invert+0x6c>
     ffa:	e8 94       	clt
     ffc:	6f 93       	push	r22
     ffe:	6e 7f       	andi	r22, 0xFE	; 254
    1000:	6e 5f       	subi	r22, 0xFE	; 254
    1002:	7f 4f       	sbci	r23, 0xFF	; 255
    1004:	8f 4f       	sbci	r24, 0xFF	; 255
    1006:	9f 4f       	sbci	r25, 0xFF	; 255
    1008:	af 4f       	sbci	r26, 0xFF	; 255
    100a:	b1 e0       	ldi	r27, 0x01	; 1
    100c:	3e d0       	rcall	.+124    	; 0x108a <__ultoa_invert+0x9c>
    100e:	b4 e0       	ldi	r27, 0x04	; 4
    1010:	3c d0       	rcall	.+120    	; 0x108a <__ultoa_invert+0x9c>
    1012:	67 0f       	add	r22, r23
    1014:	78 1f       	adc	r23, r24
    1016:	89 1f       	adc	r24, r25
    1018:	9a 1f       	adc	r25, r26
    101a:	a1 1d       	adc	r26, r1
    101c:	68 0f       	add	r22, r24
    101e:	79 1f       	adc	r23, r25
    1020:	8a 1f       	adc	r24, r26
    1022:	91 1d       	adc	r25, r1
    1024:	a1 1d       	adc	r26, r1
    1026:	6a 0f       	add	r22, r26
    1028:	71 1d       	adc	r23, r1
    102a:	81 1d       	adc	r24, r1
    102c:	91 1d       	adc	r25, r1
    102e:	a1 1d       	adc	r26, r1
    1030:	20 d0       	rcall	.+64     	; 0x1072 <__ultoa_invert+0x84>
    1032:	09 f4       	brne	.+2      	; 0x1036 <__ultoa_invert+0x48>
    1034:	68 94       	set
    1036:	3f 91       	pop	r19
    1038:	2a e0       	ldi	r18, 0x0A	; 10
    103a:	26 9f       	mul	r18, r22
    103c:	11 24       	eor	r1, r1
    103e:	30 19       	sub	r19, r0
    1040:	30 5d       	subi	r19, 0xD0	; 208
    1042:	31 93       	st	Z+, r19
    1044:	de f6       	brtc	.-74     	; 0xffc <__ultoa_invert+0xe>
    1046:	cf 01       	movw	r24, r30
    1048:	08 95       	ret
    104a:	46 2f       	mov	r20, r22
    104c:	47 70       	andi	r20, 0x07	; 7
    104e:	40 5d       	subi	r20, 0xD0	; 208
    1050:	41 93       	st	Z+, r20
    1052:	b3 e0       	ldi	r27, 0x03	; 3
    1054:	0f d0       	rcall	.+30     	; 0x1074 <__ultoa_invert+0x86>
    1056:	c9 f7       	brne	.-14     	; 0x104a <__ultoa_invert+0x5c>
    1058:	f6 cf       	rjmp	.-20     	; 0x1046 <__ultoa_invert+0x58>
    105a:	46 2f       	mov	r20, r22
    105c:	4f 70       	andi	r20, 0x0F	; 15
    105e:	40 5d       	subi	r20, 0xD0	; 208
    1060:	4a 33       	cpi	r20, 0x3A	; 58
    1062:	18 f0       	brcs	.+6      	; 0x106a <__ultoa_invert+0x7c>
    1064:	49 5d       	subi	r20, 0xD9	; 217
    1066:	31 fd       	sbrc	r19, 1
    1068:	40 52       	subi	r20, 0x20	; 32
    106a:	41 93       	st	Z+, r20
    106c:	02 d0       	rcall	.+4      	; 0x1072 <__ultoa_invert+0x84>
    106e:	a9 f7       	brne	.-22     	; 0x105a <__ultoa_invert+0x6c>
    1070:	ea cf       	rjmp	.-44     	; 0x1046 <__ultoa_invert+0x58>
    1072:	b4 e0       	ldi	r27, 0x04	; 4
    1074:	a6 95       	lsr	r26
    1076:	97 95       	ror	r25
    1078:	87 95       	ror	r24
    107a:	77 95       	ror	r23
    107c:	67 95       	ror	r22
    107e:	ba 95       	dec	r27
    1080:	c9 f7       	brne	.-14     	; 0x1074 <__ultoa_invert+0x86>
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	61 05       	cpc	r22, r1
    1086:	71 05       	cpc	r23, r1
    1088:	08 95       	ret
    108a:	9b 01       	movw	r18, r22
    108c:	ac 01       	movw	r20, r24
    108e:	0a 2e       	mov	r0, r26
    1090:	06 94       	lsr	r0
    1092:	57 95       	ror	r21
    1094:	47 95       	ror	r20
    1096:	37 95       	ror	r19
    1098:	27 95       	ror	r18
    109a:	ba 95       	dec	r27
    109c:	c9 f7       	brne	.-14     	; 0x1090 <__ultoa_invert+0xa2>
    109e:	62 0f       	add	r22, r18
    10a0:	73 1f       	adc	r23, r19
    10a2:	84 1f       	adc	r24, r20
    10a4:	95 1f       	adc	r25, r21
    10a6:	a0 1d       	adc	r26, r0
    10a8:	08 95       	ret

000010aa <__prologue_saves__>:
    10aa:	2f 92       	push	r2
    10ac:	3f 92       	push	r3
    10ae:	4f 92       	push	r4
    10b0:	5f 92       	push	r5
    10b2:	6f 92       	push	r6
    10b4:	7f 92       	push	r7
    10b6:	8f 92       	push	r8
    10b8:	9f 92       	push	r9
    10ba:	af 92       	push	r10
    10bc:	bf 92       	push	r11
    10be:	cf 92       	push	r12
    10c0:	df 92       	push	r13
    10c2:	ef 92       	push	r14
    10c4:	ff 92       	push	r15
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	ca 1b       	sub	r28, r26
    10d4:	db 0b       	sbc	r29, r27
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	09 94       	ijmp

000010e2 <__epilogue_restores__>:
    10e2:	2a 88       	ldd	r2, Y+18	; 0x12
    10e4:	39 88       	ldd	r3, Y+17	; 0x11
    10e6:	48 88       	ldd	r4, Y+16	; 0x10
    10e8:	5f 84       	ldd	r5, Y+15	; 0x0f
    10ea:	6e 84       	ldd	r6, Y+14	; 0x0e
    10ec:	7d 84       	ldd	r7, Y+13	; 0x0d
    10ee:	8c 84       	ldd	r8, Y+12	; 0x0c
    10f0:	9b 84       	ldd	r9, Y+11	; 0x0b
    10f2:	aa 84       	ldd	r10, Y+10	; 0x0a
    10f4:	b9 84       	ldd	r11, Y+9	; 0x09
    10f6:	c8 84       	ldd	r12, Y+8	; 0x08
    10f8:	df 80       	ldd	r13, Y+7	; 0x07
    10fa:	ee 80       	ldd	r14, Y+6	; 0x06
    10fc:	fd 80       	ldd	r15, Y+5	; 0x05
    10fe:	0c 81       	ldd	r16, Y+4	; 0x04
    1100:	1b 81       	ldd	r17, Y+3	; 0x03
    1102:	aa 81       	ldd	r26, Y+2	; 0x02
    1104:	b9 81       	ldd	r27, Y+1	; 0x01
    1106:	ce 0f       	add	r28, r30
    1108:	d1 1d       	adc	r29, r1
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	f8 94       	cli
    110e:	de bf       	out	0x3e, r29	; 62
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	cd bf       	out	0x3d, r28	; 61
    1114:	ed 01       	movw	r28, r26
    1116:	08 95       	ret

00001118 <_exit>:
    1118:	f8 94       	cli

0000111a <__stop_program>:
    111a:	ff cf       	rjmp	.-2      	; 0x111a <__stop_program>
