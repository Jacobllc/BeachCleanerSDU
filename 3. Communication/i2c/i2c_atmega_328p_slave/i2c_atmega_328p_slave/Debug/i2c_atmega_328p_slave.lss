
i2c_atmega_328p_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000007f4  00000888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800120  00800120  000008a8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000904  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b75  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008df  00000000  00000000  00001569  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052e  00000000  00000000  00001e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00002378  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f3  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020a  00000000  00000000  000029d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002be1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ef       	ldi	r30, 0xF4	; 244
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 32       	cpi	r26, 0x2C	; 44
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 df 00 	call	0x1be	; 0x1be <main>
  9e:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_setCallbacks>:
{
		
		cli();
		TWCR = 0;			// clear acknowledge and enable bits
		TWAR = 0;
		sei();
  a6:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <I2C_recieve+0x1>
  aa:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <I2C_recieve>
  ae:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <__data_end+0x1>
  b2:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <__data_end>
  b6:	08 95       	ret

000000b8 <i2c_init>:
  b8:	f8 94       	cli
  ba:	88 0f       	add	r24, r24
  bc:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
  c0:	85 ec       	ldi	r24, 0xC5	; 197
  c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  c6:	78 94       	sei
  c8:	08 95       	ret

000000ca <i2c_transmit_data>:


void i2c_transmit_data(int data)
{	
	
	TWDR = data;
  ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  ce:	08 95       	ret

000000d0 <__vector_24>:

// TWI Interrupt!! 


ISR(TWI_vect)
{
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	2f 93       	push	r18
  dc:	3f 93       	push	r19
  de:	4f 93       	push	r20
  e0:	5f 93       	push	r21
  e2:	6f 93       	push	r22
  e4:	7f 93       	push	r23
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	af 93       	push	r26
  ec:	bf 93       	push	r27
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
	switch(TW_STATUS)
  f2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  f6:	88 7f       	andi	r24, 0xF8	; 248
  f8:	80 38       	cpi	r24, 0x80	; 128
  fa:	49 f0       	breq	.+18     	; 0x10e <__vector_24+0x3e>
  fc:	18 f4       	brcc	.+6      	; 0x104 <__vector_24+0x34>
  fe:	88 23       	and	r24, r24
 100:	f1 f0       	breq	.+60     	; 0x13e <__vector_24+0x6e>
 102:	23 c0       	rjmp	.+70     	; 0x14a <__vector_24+0x7a>
 104:	88 3a       	cpi	r24, 0xA8	; 168
 106:	71 f0       	breq	.+28     	; 0x124 <__vector_24+0x54>
 108:	88 3b       	cpi	r24, 0xB8	; 184
 10a:	a9 f0       	breq	.+42     	; 0x136 <__vector_24+0x66>
 10c:	1e c0       	rjmp	.+60     	; 0x14a <__vector_24+0x7a>
	{
		case TW_SR_DATA_ACK:
		// received data from master, call the receive callback
		I2C_recieve(TWDR);
 10e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 112:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <I2C_recieve>
 116:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <I2C_recieve+0x1>
 11a:	09 95       	icall
		
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 11c:	85 ec       	ldi	r24, 0xC5	; 197
 11e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
 122:	16 c0       	rjmp	.+44     	; 0x150 <__vector_24+0x80>
		
		case TW_ST_SLA_ACK:
		// master is requesting data, call the request callback
		I2C_data_request();
 124:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <__data_end>
 128:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <__data_end+0x1>
 12c:	09 95       	icall
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 12e:	85 ec       	ldi	r24, 0xC5	; 197
 130:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
 134:	0d c0       	rjmp	.+26     	; 0x150 <__vector_24+0x80>
		
		case TW_ST_DATA_ACK:
		// master is requesting data, call the request callback
	
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 136:	85 ec       	ldi	r24, 0xC5	; 197
 138:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		
		break;
 13c:	09 c0       	rjmp	.+18     	; 0x150 <__vector_24+0x80>
		
		case TW_BUS_ERROR:
		// some sort of erroneous state, prepare TWI to be readdressed
		TWCR = 0;
 13e:	ec eb       	ldi	r30, 0xBC	; 188
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	10 82       	st	Z, r1
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 144:	85 ec       	ldi	r24, 0xC5	; 197
 146:	80 83       	st	Z, r24
		break;
 148:	03 c0       	rjmp	.+6      	; 0x150 <__vector_24+0x80>
		
		default:
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 14a:	85 ec       	ldi	r24, 0xC5	; 197
 14c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
	}
}
 150:	ff 91       	pop	r31
 152:	ef 91       	pop	r30
 154:	bf 91       	pop	r27
 156:	af 91       	pop	r26
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	7f 91       	pop	r23
 15e:	6f 91       	pop	r22
 160:	5f 91       	pop	r21
 162:	4f 91       	pop	r20
 164:	3f 91       	pop	r19
 166:	2f 91       	pop	r18
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <I2C_received>:
 volatile uint8_t data2;												//declare volatile variable to use in isr routines

 void I2C_received(uint8_t received_data)							//isr on receiving a byte on i2c
 {

 data = received_data;
 172:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <data>
 data2=2+data;													//received data
 176:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <data>
 17a:	8e 5f       	subi	r24, 0xFE	; 254
 17c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <data2>
 printf("%d\n",data);											//printing to lcd
 180:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <data>
 184:	1f 92       	push	r1
 186:	8f 93       	push	r24
 188:	8c e1       	ldi	r24, 0x1C	; 28
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	9f 93       	push	r25
 18e:	8f 93       	push	r24
 190:	0e 94 1a 01 	call	0x234	; 0x234 <printf>
 }
 194:	0f 90       	pop	r0
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	08 95       	ret

0000019e <I2C_requested>:

 void I2C_requested()												//if master request data from slave
 {
 
 i2c_transmit_data(data2);
 19e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <data2>
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 65 00 	call	0xca	; 0xca <i2c_transmit_data>
 1a8:	08 95       	ret

000001aa <setup>:
 }

 void setup()
 {
	 
 I2C_setCallbacks(I2C_received, I2C_requested);					// set received/requested callbacks
 1aa:	6f ec       	ldi	r22, 0xCF	; 207
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	89 eb       	ldi	r24, 0xB9	; 185
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_setCallbacks>
 i2c_init(I2C_ADDR);
 1b6:	80 e1       	ldi	r24, 0x10	; 16
 1b8:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_init>
 1bc:	08 95       	ret

000001be <main>:
 }

 int main()
 {
 setup();														//in this we only print the received data and echo it back when data is requested from master
 1be:	0e 94 d5 00 	call	0x1aa	; 0x1aa <setup>
 uart_init();
 1c2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <uart_init>
 io_redirect();
 1c6:	0e 94 0f 01 	call	0x21e	; 0x21e <io_redirect>
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <main+0xc>

000001cc <uart_putchar>:
		stdout = &uart_output;	//redirect standard output to uart
		stdin  = &uart_input;  //redirect standard input to uart
}
	

void uart_putchar(char c, FILE *stream) {
 1cc:	cf 93       	push	r28
 1ce:	c8 2f       	mov	r28, r24
	if (c == '\n') {
 1d0:	8a 30       	cpi	r24, 0x0A	; 10
 1d2:	19 f4       	brne	.+6      	; 0x1da <uart_putchar+0xe>
		uart_putchar('\r', stream);
 1d4:	8d e0       	ldi	r24, 0x0D	; 13
 1d6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
 1da:	e0 ec       	ldi	r30, 0xC0	; 192
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	85 ff       	sbrs	r24, 5
 1e2:	fd cf       	rjmp	.-6      	; 0x1de <uart_putchar+0x12>
	UDR0 = c;
 1e4:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <uart_getchar>:

char uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0);
 1ec:	e0 ec       	ldi	r30, 0xC0	; 192
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	88 23       	and	r24, r24
 1f4:	ec f7       	brge	.-6      	; 0x1f0 <uart_getchar+0x4>
	return UDR0;
 1f6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1fa:	08 95       	ret

000001fc <uart_init>:
FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);


void uart_init(void) {
	
	UBRR0H = UBRRH_VALUE;
 1fc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 200:	87 e6       	ldi	r24, 0x67	; 103
 202:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
 206:	e0 ec       	ldi	r30, 0xC0	; 192
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	8d 7f       	andi	r24, 0xFD	; 253
 20e:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
 210:	86 e0       	ldi	r24, 0x06	; 6
 212:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
 216:	88 e1       	ldi	r24, 0x18	; 24
 218:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 21c:	08 95       	ret

0000021e <io_redirect>:
}

void io_redirect(void ){
		
		
		stdout = &uart_output;	//redirect standard output to uart
 21e:	e6 e2       	ldi	r30, 0x26	; 38
 220:	f1 e0       	ldi	r31, 0x01	; 1
 222:	8e e0       	ldi	r24, 0x0E	; 14
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	93 83       	std	Z+3, r25	; 0x03
 228:	82 83       	std	Z+2, r24	; 0x02
		stdin  = &uart_input;  //redirect standard input to uart
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	91 83       	std	Z+1, r25	; 0x01
 230:	80 83       	st	Z, r24
 232:	08 95       	ret

00000234 <printf>:
 234:	a0 e0       	ldi	r26, 0x00	; 0
 236:	b0 e0       	ldi	r27, 0x00	; 0
 238:	e0 e2       	ldi	r30, 0x20	; 32
 23a:	f1 e0       	ldi	r31, 0x01	; 1
 23c:	0c 94 d1 03 	jmp	0x7a2	; 0x7a2 <__prologue_saves__+0x20>
 240:	ae 01       	movw	r20, r28
 242:	4b 5f       	subi	r20, 0xFB	; 251
 244:	5f 4f       	sbci	r21, 0xFF	; 255
 246:	fa 01       	movw	r30, r20
 248:	61 91       	ld	r22, Z+
 24a:	71 91       	ld	r23, Z+
 24c:	af 01       	movw	r20, r30
 24e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__iob+0x2>
 252:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__iob+0x3>
 256:	0e 94 30 01 	call	0x260	; 0x260 <vfprintf>
 25a:	e2 e0       	ldi	r30, 0x02	; 2
 25c:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__epilogue_restores__+0x20>

00000260 <vfprintf>:
 260:	ab e0       	ldi	r26, 0x0B	; 11
 262:	b0 e0       	ldi	r27, 0x00	; 0
 264:	e6 e3       	ldi	r30, 0x36	; 54
 266:	f1 e0       	ldi	r31, 0x01	; 1
 268:	0c 94 c1 03 	jmp	0x782	; 0x782 <__prologue_saves__>
 26c:	6c 01       	movw	r12, r24
 26e:	7b 01       	movw	r14, r22
 270:	8a 01       	movw	r16, r20
 272:	fc 01       	movw	r30, r24
 274:	17 82       	std	Z+7, r1	; 0x07
 276:	16 82       	std	Z+6, r1	; 0x06
 278:	83 81       	ldd	r24, Z+3	; 0x03
 27a:	81 ff       	sbrs	r24, 1
 27c:	cc c1       	rjmp	.+920    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 27e:	ce 01       	movw	r24, r28
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	3c 01       	movw	r6, r24
 284:	f6 01       	movw	r30, r12
 286:	93 81       	ldd	r25, Z+3	; 0x03
 288:	f7 01       	movw	r30, r14
 28a:	93 fd       	sbrc	r25, 3
 28c:	85 91       	lpm	r24, Z+
 28e:	93 ff       	sbrs	r25, 3
 290:	81 91       	ld	r24, Z+
 292:	7f 01       	movw	r14, r30
 294:	88 23       	and	r24, r24
 296:	09 f4       	brne	.+2      	; 0x29a <vfprintf+0x3a>
 298:	ba c1       	rjmp	.+884    	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 29a:	85 32       	cpi	r24, 0x25	; 37
 29c:	39 f4       	brne	.+14     	; 0x2ac <vfprintf+0x4c>
 29e:	93 fd       	sbrc	r25, 3
 2a0:	85 91       	lpm	r24, Z+
 2a2:	93 ff       	sbrs	r25, 3
 2a4:	81 91       	ld	r24, Z+
 2a6:	7f 01       	movw	r14, r30
 2a8:	85 32       	cpi	r24, 0x25	; 37
 2aa:	29 f4       	brne	.+10     	; 0x2b6 <vfprintf+0x56>
 2ac:	b6 01       	movw	r22, r12
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 27 03 	call	0x64e	; 0x64e <fputc>
 2b4:	e7 cf       	rjmp	.-50     	; 0x284 <vfprintf+0x24>
 2b6:	91 2c       	mov	r9, r1
 2b8:	21 2c       	mov	r2, r1
 2ba:	31 2c       	mov	r3, r1
 2bc:	ff e1       	ldi	r31, 0x1F	; 31
 2be:	f3 15       	cp	r31, r3
 2c0:	d8 f0       	brcs	.+54     	; 0x2f8 <vfprintf+0x98>
 2c2:	8b 32       	cpi	r24, 0x2B	; 43
 2c4:	79 f0       	breq	.+30     	; 0x2e4 <vfprintf+0x84>
 2c6:	38 f4       	brcc	.+14     	; 0x2d6 <vfprintf+0x76>
 2c8:	80 32       	cpi	r24, 0x20	; 32
 2ca:	79 f0       	breq	.+30     	; 0x2ea <vfprintf+0x8a>
 2cc:	83 32       	cpi	r24, 0x23	; 35
 2ce:	a1 f4       	brne	.+40     	; 0x2f8 <vfprintf+0x98>
 2d0:	23 2d       	mov	r18, r3
 2d2:	20 61       	ori	r18, 0x10	; 16
 2d4:	1d c0       	rjmp	.+58     	; 0x310 <vfprintf+0xb0>
 2d6:	8d 32       	cpi	r24, 0x2D	; 45
 2d8:	61 f0       	breq	.+24     	; 0x2f2 <vfprintf+0x92>
 2da:	80 33       	cpi	r24, 0x30	; 48
 2dc:	69 f4       	brne	.+26     	; 0x2f8 <vfprintf+0x98>
 2de:	23 2d       	mov	r18, r3
 2e0:	21 60       	ori	r18, 0x01	; 1
 2e2:	16 c0       	rjmp	.+44     	; 0x310 <vfprintf+0xb0>
 2e4:	83 2d       	mov	r24, r3
 2e6:	82 60       	ori	r24, 0x02	; 2
 2e8:	38 2e       	mov	r3, r24
 2ea:	e3 2d       	mov	r30, r3
 2ec:	e4 60       	ori	r30, 0x04	; 4
 2ee:	3e 2e       	mov	r3, r30
 2f0:	2a c0       	rjmp	.+84     	; 0x346 <vfprintf+0xe6>
 2f2:	f3 2d       	mov	r31, r3
 2f4:	f8 60       	ori	r31, 0x08	; 8
 2f6:	1d c0       	rjmp	.+58     	; 0x332 <vfprintf+0xd2>
 2f8:	37 fc       	sbrc	r3, 7
 2fa:	2d c0       	rjmp	.+90     	; 0x356 <vfprintf+0xf6>
 2fc:	20 ed       	ldi	r18, 0xD0	; 208
 2fe:	28 0f       	add	r18, r24
 300:	2a 30       	cpi	r18, 0x0A	; 10
 302:	40 f0       	brcs	.+16     	; 0x314 <vfprintf+0xb4>
 304:	8e 32       	cpi	r24, 0x2E	; 46
 306:	b9 f4       	brne	.+46     	; 0x336 <vfprintf+0xd6>
 308:	36 fc       	sbrc	r3, 6
 30a:	81 c1       	rjmp	.+770    	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 30c:	23 2d       	mov	r18, r3
 30e:	20 64       	ori	r18, 0x40	; 64
 310:	32 2e       	mov	r3, r18
 312:	19 c0       	rjmp	.+50     	; 0x346 <vfprintf+0xe6>
 314:	36 fe       	sbrs	r3, 6
 316:	06 c0       	rjmp	.+12     	; 0x324 <vfprintf+0xc4>
 318:	8a e0       	ldi	r24, 0x0A	; 10
 31a:	98 9e       	mul	r9, r24
 31c:	20 0d       	add	r18, r0
 31e:	11 24       	eor	r1, r1
 320:	92 2e       	mov	r9, r18
 322:	11 c0       	rjmp	.+34     	; 0x346 <vfprintf+0xe6>
 324:	ea e0       	ldi	r30, 0x0A	; 10
 326:	2e 9e       	mul	r2, r30
 328:	20 0d       	add	r18, r0
 32a:	11 24       	eor	r1, r1
 32c:	22 2e       	mov	r2, r18
 32e:	f3 2d       	mov	r31, r3
 330:	f0 62       	ori	r31, 0x20	; 32
 332:	3f 2e       	mov	r3, r31
 334:	08 c0       	rjmp	.+16     	; 0x346 <vfprintf+0xe6>
 336:	8c 36       	cpi	r24, 0x6C	; 108
 338:	21 f4       	brne	.+8      	; 0x342 <vfprintf+0xe2>
 33a:	83 2d       	mov	r24, r3
 33c:	80 68       	ori	r24, 0x80	; 128
 33e:	38 2e       	mov	r3, r24
 340:	02 c0       	rjmp	.+4      	; 0x346 <vfprintf+0xe6>
 342:	88 36       	cpi	r24, 0x68	; 104
 344:	41 f4       	brne	.+16     	; 0x356 <vfprintf+0xf6>
 346:	f7 01       	movw	r30, r14
 348:	93 fd       	sbrc	r25, 3
 34a:	85 91       	lpm	r24, Z+
 34c:	93 ff       	sbrs	r25, 3
 34e:	81 91       	ld	r24, Z+
 350:	7f 01       	movw	r14, r30
 352:	81 11       	cpse	r24, r1
 354:	b3 cf       	rjmp	.-154    	; 0x2bc <vfprintf+0x5c>
 356:	98 2f       	mov	r25, r24
 358:	9f 7d       	andi	r25, 0xDF	; 223
 35a:	95 54       	subi	r25, 0x45	; 69
 35c:	93 30       	cpi	r25, 0x03	; 3
 35e:	28 f4       	brcc	.+10     	; 0x36a <vfprintf+0x10a>
 360:	0c 5f       	subi	r16, 0xFC	; 252
 362:	1f 4f       	sbci	r17, 0xFF	; 255
 364:	9f e3       	ldi	r25, 0x3F	; 63
 366:	99 83       	std	Y+1, r25	; 0x01
 368:	0d c0       	rjmp	.+26     	; 0x384 <vfprintf+0x124>
 36a:	83 36       	cpi	r24, 0x63	; 99
 36c:	31 f0       	breq	.+12     	; 0x37a <vfprintf+0x11a>
 36e:	83 37       	cpi	r24, 0x73	; 115
 370:	71 f0       	breq	.+28     	; 0x38e <vfprintf+0x12e>
 372:	83 35       	cpi	r24, 0x53	; 83
 374:	09 f0       	breq	.+2      	; 0x378 <vfprintf+0x118>
 376:	59 c0       	rjmp	.+178    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 378:	21 c0       	rjmp	.+66     	; 0x3bc <vfprintf+0x15c>
 37a:	f8 01       	movw	r30, r16
 37c:	80 81       	ld	r24, Z
 37e:	89 83       	std	Y+1, r24	; 0x01
 380:	0e 5f       	subi	r16, 0xFE	; 254
 382:	1f 4f       	sbci	r17, 0xFF	; 255
 384:	88 24       	eor	r8, r8
 386:	83 94       	inc	r8
 388:	91 2c       	mov	r9, r1
 38a:	53 01       	movw	r10, r6
 38c:	13 c0       	rjmp	.+38     	; 0x3b4 <vfprintf+0x154>
 38e:	28 01       	movw	r4, r16
 390:	f2 e0       	ldi	r31, 0x02	; 2
 392:	4f 0e       	add	r4, r31
 394:	51 1c       	adc	r5, r1
 396:	f8 01       	movw	r30, r16
 398:	a0 80       	ld	r10, Z
 39a:	b1 80       	ldd	r11, Z+1	; 0x01
 39c:	36 fe       	sbrs	r3, 6
 39e:	03 c0       	rjmp	.+6      	; 0x3a6 <vfprintf+0x146>
 3a0:	69 2d       	mov	r22, r9
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <vfprintf+0x14a>
 3a6:	6f ef       	ldi	r22, 0xFF	; 255
 3a8:	7f ef       	ldi	r23, 0xFF	; 255
 3aa:	c5 01       	movw	r24, r10
 3ac:	0e 94 1c 03 	call	0x638	; 0x638 <strnlen>
 3b0:	4c 01       	movw	r8, r24
 3b2:	82 01       	movw	r16, r4
 3b4:	f3 2d       	mov	r31, r3
 3b6:	ff 77       	andi	r31, 0x7F	; 127
 3b8:	3f 2e       	mov	r3, r31
 3ba:	16 c0       	rjmp	.+44     	; 0x3e8 <vfprintf+0x188>
 3bc:	28 01       	movw	r4, r16
 3be:	22 e0       	ldi	r18, 0x02	; 2
 3c0:	42 0e       	add	r4, r18
 3c2:	51 1c       	adc	r5, r1
 3c4:	f8 01       	movw	r30, r16
 3c6:	a0 80       	ld	r10, Z
 3c8:	b1 80       	ldd	r11, Z+1	; 0x01
 3ca:	36 fe       	sbrs	r3, 6
 3cc:	03 c0       	rjmp	.+6      	; 0x3d4 <vfprintf+0x174>
 3ce:	69 2d       	mov	r22, r9
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <vfprintf+0x178>
 3d4:	6f ef       	ldi	r22, 0xFF	; 255
 3d6:	7f ef       	ldi	r23, 0xFF	; 255
 3d8:	c5 01       	movw	r24, r10
 3da:	0e 94 11 03 	call	0x622	; 0x622 <strnlen_P>
 3de:	4c 01       	movw	r8, r24
 3e0:	f3 2d       	mov	r31, r3
 3e2:	f0 68       	ori	r31, 0x80	; 128
 3e4:	3f 2e       	mov	r3, r31
 3e6:	82 01       	movw	r16, r4
 3e8:	33 fc       	sbrc	r3, 3
 3ea:	1b c0       	rjmp	.+54     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 3ec:	82 2d       	mov	r24, r2
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	88 16       	cp	r8, r24
 3f2:	99 06       	cpc	r9, r25
 3f4:	b0 f4       	brcc	.+44     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 3f6:	b6 01       	movw	r22, r12
 3f8:	80 e2       	ldi	r24, 0x20	; 32
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 27 03 	call	0x64e	; 0x64e <fputc>
 400:	2a 94       	dec	r2
 402:	f4 cf       	rjmp	.-24     	; 0x3ec <vfprintf+0x18c>
 404:	f5 01       	movw	r30, r10
 406:	37 fc       	sbrc	r3, 7
 408:	85 91       	lpm	r24, Z+
 40a:	37 fe       	sbrs	r3, 7
 40c:	81 91       	ld	r24, Z+
 40e:	5f 01       	movw	r10, r30
 410:	b6 01       	movw	r22, r12
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 27 03 	call	0x64e	; 0x64e <fputc>
 418:	21 10       	cpse	r2, r1
 41a:	2a 94       	dec	r2
 41c:	21 e0       	ldi	r18, 0x01	; 1
 41e:	82 1a       	sub	r8, r18
 420:	91 08       	sbc	r9, r1
 422:	81 14       	cp	r8, r1
 424:	91 04       	cpc	r9, r1
 426:	71 f7       	brne	.-36     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 428:	e8 c0       	rjmp	.+464    	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
 42a:	84 36       	cpi	r24, 0x64	; 100
 42c:	11 f0       	breq	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42e:	89 36       	cpi	r24, 0x69	; 105
 430:	41 f5       	brne	.+80     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 432:	f8 01       	movw	r30, r16
 434:	37 fe       	sbrs	r3, 7
 436:	07 c0       	rjmp	.+14     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 438:	60 81       	ld	r22, Z
 43a:	71 81       	ldd	r23, Z+1	; 0x01
 43c:	82 81       	ldd	r24, Z+2	; 0x02
 43e:	93 81       	ldd	r25, Z+3	; 0x03
 440:	0c 5f       	subi	r16, 0xFC	; 252
 442:	1f 4f       	sbci	r17, 0xFF	; 255
 444:	08 c0       	rjmp	.+16     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 446:	60 81       	ld	r22, Z
 448:	71 81       	ldd	r23, Z+1	; 0x01
 44a:	07 2e       	mov	r0, r23
 44c:	00 0c       	add	r0, r0
 44e:	88 0b       	sbc	r24, r24
 450:	99 0b       	sbc	r25, r25
 452:	0e 5f       	subi	r16, 0xFE	; 254
 454:	1f 4f       	sbci	r17, 0xFF	; 255
 456:	f3 2d       	mov	r31, r3
 458:	ff 76       	andi	r31, 0x6F	; 111
 45a:	3f 2e       	mov	r3, r31
 45c:	97 ff       	sbrs	r25, 7
 45e:	09 c0       	rjmp	.+18     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 460:	90 95       	com	r25
 462:	80 95       	com	r24
 464:	70 95       	com	r23
 466:	61 95       	neg	r22
 468:	7f 4f       	sbci	r23, 0xFF	; 255
 46a:	8f 4f       	sbci	r24, 0xFF	; 255
 46c:	9f 4f       	sbci	r25, 0xFF	; 255
 46e:	f0 68       	ori	r31, 0x80	; 128
 470:	3f 2e       	mov	r3, r31
 472:	2a e0       	ldi	r18, 0x0A	; 10
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	a3 01       	movw	r20, r6
 478:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__ultoa_invert>
 47c:	88 2e       	mov	r8, r24
 47e:	86 18       	sub	r8, r6
 480:	45 c0       	rjmp	.+138    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 482:	85 37       	cpi	r24, 0x75	; 117
 484:	31 f4       	brne	.+12     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 486:	23 2d       	mov	r18, r3
 488:	2f 7e       	andi	r18, 0xEF	; 239
 48a:	b2 2e       	mov	r11, r18
 48c:	2a e0       	ldi	r18, 0x0A	; 10
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	25 c0       	rjmp	.+74     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 492:	93 2d       	mov	r25, r3
 494:	99 7f       	andi	r25, 0xF9	; 249
 496:	b9 2e       	mov	r11, r25
 498:	8f 36       	cpi	r24, 0x6F	; 111
 49a:	c1 f0       	breq	.+48     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 49c:	18 f4       	brcc	.+6      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 49e:	88 35       	cpi	r24, 0x58	; 88
 4a0:	79 f0       	breq	.+30     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4a2:	b5 c0       	rjmp	.+362    	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 4a4:	80 37       	cpi	r24, 0x70	; 112
 4a6:	19 f0       	breq	.+6      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4a8:	88 37       	cpi	r24, 0x78	; 120
 4aa:	21 f0       	breq	.+8      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4ac:	b0 c0       	rjmp	.+352    	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 4ae:	e9 2f       	mov	r30, r25
 4b0:	e0 61       	ori	r30, 0x10	; 16
 4b2:	be 2e       	mov	r11, r30
 4b4:	b4 fe       	sbrs	r11, 4
 4b6:	0d c0       	rjmp	.+26     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4b8:	fb 2d       	mov	r31, r11
 4ba:	f4 60       	ori	r31, 0x04	; 4
 4bc:	bf 2e       	mov	r11, r31
 4be:	09 c0       	rjmp	.+18     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4c0:	34 fe       	sbrs	r3, 4
 4c2:	0a c0       	rjmp	.+20     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4c4:	29 2f       	mov	r18, r25
 4c6:	26 60       	ori	r18, 0x06	; 6
 4c8:	b2 2e       	mov	r11, r18
 4ca:	06 c0       	rjmp	.+12     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4cc:	28 e0       	ldi	r18, 0x08	; 8
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	05 c0       	rjmp	.+10     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4d2:	20 e1       	ldi	r18, 0x10	; 16
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4d8:	20 e1       	ldi	r18, 0x10	; 16
 4da:	32 e0       	ldi	r19, 0x02	; 2
 4dc:	f8 01       	movw	r30, r16
 4de:	b7 fe       	sbrs	r11, 7
 4e0:	07 c0       	rjmp	.+14     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4e2:	60 81       	ld	r22, Z
 4e4:	71 81       	ldd	r23, Z+1	; 0x01
 4e6:	82 81       	ldd	r24, Z+2	; 0x02
 4e8:	93 81       	ldd	r25, Z+3	; 0x03
 4ea:	0c 5f       	subi	r16, 0xFC	; 252
 4ec:	1f 4f       	sbci	r17, 0xFF	; 255
 4ee:	06 c0       	rjmp	.+12     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4f0:	60 81       	ld	r22, Z
 4f2:	71 81       	ldd	r23, Z+1	; 0x01
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 5f       	subi	r16, 0xFE	; 254
 4fa:	1f 4f       	sbci	r17, 0xFF	; 255
 4fc:	a3 01       	movw	r20, r6
 4fe:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__ultoa_invert>
 502:	88 2e       	mov	r8, r24
 504:	86 18       	sub	r8, r6
 506:	fb 2d       	mov	r31, r11
 508:	ff 77       	andi	r31, 0x7F	; 127
 50a:	3f 2e       	mov	r3, r31
 50c:	36 fe       	sbrs	r3, 6
 50e:	0d c0       	rjmp	.+26     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 510:	23 2d       	mov	r18, r3
 512:	2e 7f       	andi	r18, 0xFE	; 254
 514:	a2 2e       	mov	r10, r18
 516:	89 14       	cp	r8, r9
 518:	58 f4       	brcc	.+22     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 51a:	34 fe       	sbrs	r3, 4
 51c:	0b c0       	rjmp	.+22     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 51e:	32 fc       	sbrc	r3, 2
 520:	09 c0       	rjmp	.+18     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 522:	83 2d       	mov	r24, r3
 524:	8e 7e       	andi	r24, 0xEE	; 238
 526:	a8 2e       	mov	r10, r24
 528:	05 c0       	rjmp	.+10     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 52a:	b8 2c       	mov	r11, r8
 52c:	a3 2c       	mov	r10, r3
 52e:	03 c0       	rjmp	.+6      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 530:	b8 2c       	mov	r11, r8
 532:	01 c0       	rjmp	.+2      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 534:	b9 2c       	mov	r11, r9
 536:	a4 fe       	sbrs	r10, 4
 538:	0f c0       	rjmp	.+30     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 53a:	fe 01       	movw	r30, r28
 53c:	e8 0d       	add	r30, r8
 53e:	f1 1d       	adc	r31, r1
 540:	80 81       	ld	r24, Z
 542:	80 33       	cpi	r24, 0x30	; 48
 544:	21 f4       	brne	.+8      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 546:	9a 2d       	mov	r25, r10
 548:	99 7e       	andi	r25, 0xE9	; 233
 54a:	a9 2e       	mov	r10, r25
 54c:	09 c0       	rjmp	.+18     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 54e:	a2 fe       	sbrs	r10, 2
 550:	06 c0       	rjmp	.+12     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 552:	b3 94       	inc	r11
 554:	b3 94       	inc	r11
 556:	04 c0       	rjmp	.+8      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 558:	8a 2d       	mov	r24, r10
 55a:	86 78       	andi	r24, 0x86	; 134
 55c:	09 f0       	breq	.+2      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 55e:	b3 94       	inc	r11
 560:	a3 fc       	sbrc	r10, 3
 562:	11 c0       	rjmp	.+34     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 564:	a0 fe       	sbrs	r10, 0
 566:	06 c0       	rjmp	.+12     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 568:	b2 14       	cp	r11, r2
 56a:	88 f4       	brcc	.+34     	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
 56c:	28 0c       	add	r2, r8
 56e:	92 2c       	mov	r9, r2
 570:	9b 18       	sub	r9, r11
 572:	0e c0       	rjmp	.+28     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
 574:	b2 14       	cp	r11, r2
 576:	60 f4       	brcc	.+24     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
 578:	b6 01       	movw	r22, r12
 57a:	80 e2       	ldi	r24, 0x20	; 32
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 27 03 	call	0x64e	; 0x64e <fputc>
 582:	b3 94       	inc	r11
 584:	f7 cf       	rjmp	.-18     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 586:	b2 14       	cp	r11, r2
 588:	18 f4       	brcc	.+6      	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
 58a:	2b 18       	sub	r2, r11
 58c:	02 c0       	rjmp	.+4      	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 58e:	98 2c       	mov	r9, r8
 590:	21 2c       	mov	r2, r1
 592:	a4 fe       	sbrs	r10, 4
 594:	10 c0       	rjmp	.+32     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 596:	b6 01       	movw	r22, r12
 598:	80 e3       	ldi	r24, 0x30	; 48
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	0e 94 27 03 	call	0x64e	; 0x64e <fputc>
 5a0:	a2 fe       	sbrs	r10, 2
 5a2:	17 c0       	rjmp	.+46     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5a4:	a1 fc       	sbrc	r10, 1
 5a6:	03 c0       	rjmp	.+6      	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
 5a8:	88 e7       	ldi	r24, 0x78	; 120
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5ae:	88 e5       	ldi	r24, 0x58	; 88
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	b6 01       	movw	r22, r12
 5b4:	0c c0       	rjmp	.+24     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5b6:	8a 2d       	mov	r24, r10
 5b8:	86 78       	andi	r24, 0x86	; 134
 5ba:	59 f0       	breq	.+22     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5bc:	a1 fe       	sbrs	r10, 1
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
 5c0:	8b e2       	ldi	r24, 0x2B	; 43
 5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
 5c4:	80 e2       	ldi	r24, 0x20	; 32
 5c6:	a7 fc       	sbrc	r10, 7
 5c8:	8d e2       	ldi	r24, 0x2D	; 45
 5ca:	b6 01       	movw	r22, r12
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 27 03 	call	0x64e	; 0x64e <fputc>
 5d2:	89 14       	cp	r8, r9
 5d4:	38 f4       	brcc	.+14     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5d6:	b6 01       	movw	r22, r12
 5d8:	80 e3       	ldi	r24, 0x30	; 48
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0e 94 27 03 	call	0x64e	; 0x64e <fputc>
 5e0:	9a 94       	dec	r9
 5e2:	f7 cf       	rjmp	.-18     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5e4:	8a 94       	dec	r8
 5e6:	f3 01       	movw	r30, r6
 5e8:	e8 0d       	add	r30, r8
 5ea:	f1 1d       	adc	r31, r1
 5ec:	80 81       	ld	r24, Z
 5ee:	b6 01       	movw	r22, r12
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	0e 94 27 03 	call	0x64e	; 0x64e <fputc>
 5f6:	81 10       	cpse	r8, r1
 5f8:	f5 cf       	rjmp	.-22     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5fa:	22 20       	and	r2, r2
 5fc:	09 f4       	brne	.+2      	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
 5fe:	42 ce       	rjmp	.-892    	; 0x284 <vfprintf+0x24>
 600:	b6 01       	movw	r22, r12
 602:	80 e2       	ldi	r24, 0x20	; 32
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 27 03 	call	0x64e	; 0x64e <fputc>
 60a:	2a 94       	dec	r2
 60c:	f6 cf       	rjmp	.-20     	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
 60e:	f6 01       	movw	r30, r12
 610:	86 81       	ldd	r24, Z+6	; 0x06
 612:	97 81       	ldd	r25, Z+7	; 0x07
 614:	02 c0       	rjmp	.+4      	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 616:	8f ef       	ldi	r24, 0xFF	; 255
 618:	9f ef       	ldi	r25, 0xFF	; 255
 61a:	2b 96       	adiw	r28, 0x0b	; 11
 61c:	e2 e1       	ldi	r30, 0x12	; 18
 61e:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__epilogue_restores__>

00000622 <strnlen_P>:
 622:	fc 01       	movw	r30, r24
 624:	05 90       	lpm	r0, Z+
 626:	61 50       	subi	r22, 0x01	; 1
 628:	70 40       	sbci	r23, 0x00	; 0
 62a:	01 10       	cpse	r0, r1
 62c:	d8 f7       	brcc	.-10     	; 0x624 <strnlen_P+0x2>
 62e:	80 95       	com	r24
 630:	90 95       	com	r25
 632:	8e 0f       	add	r24, r30
 634:	9f 1f       	adc	r25, r31
 636:	08 95       	ret

00000638 <strnlen>:
 638:	fc 01       	movw	r30, r24
 63a:	61 50       	subi	r22, 0x01	; 1
 63c:	70 40       	sbci	r23, 0x00	; 0
 63e:	01 90       	ld	r0, Z+
 640:	01 10       	cpse	r0, r1
 642:	d8 f7       	brcc	.-10     	; 0x63a <strnlen+0x2>
 644:	80 95       	com	r24
 646:	90 95       	com	r25
 648:	8e 0f       	add	r24, r30
 64a:	9f 1f       	adc	r25, r31
 64c:	08 95       	ret

0000064e <fputc>:
 64e:	0f 93       	push	r16
 650:	1f 93       	push	r17
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	fb 01       	movw	r30, r22
 658:	23 81       	ldd	r18, Z+3	; 0x03
 65a:	21 fd       	sbrc	r18, 1
 65c:	03 c0       	rjmp	.+6      	; 0x664 <fputc+0x16>
 65e:	8f ef       	ldi	r24, 0xFF	; 255
 660:	9f ef       	ldi	r25, 0xFF	; 255
 662:	2c c0       	rjmp	.+88     	; 0x6bc <fputc+0x6e>
 664:	22 ff       	sbrs	r18, 2
 666:	16 c0       	rjmp	.+44     	; 0x694 <fputc+0x46>
 668:	46 81       	ldd	r20, Z+6	; 0x06
 66a:	57 81       	ldd	r21, Z+7	; 0x07
 66c:	24 81       	ldd	r18, Z+4	; 0x04
 66e:	35 81       	ldd	r19, Z+5	; 0x05
 670:	42 17       	cp	r20, r18
 672:	53 07       	cpc	r21, r19
 674:	44 f4       	brge	.+16     	; 0x686 <fputc+0x38>
 676:	a0 81       	ld	r26, Z
 678:	b1 81       	ldd	r27, Z+1	; 0x01
 67a:	9d 01       	movw	r18, r26
 67c:	2f 5f       	subi	r18, 0xFF	; 255
 67e:	3f 4f       	sbci	r19, 0xFF	; 255
 680:	31 83       	std	Z+1, r19	; 0x01
 682:	20 83       	st	Z, r18
 684:	8c 93       	st	X, r24
 686:	26 81       	ldd	r18, Z+6	; 0x06
 688:	37 81       	ldd	r19, Z+7	; 0x07
 68a:	2f 5f       	subi	r18, 0xFF	; 255
 68c:	3f 4f       	sbci	r19, 0xFF	; 255
 68e:	37 83       	std	Z+7, r19	; 0x07
 690:	26 83       	std	Z+6, r18	; 0x06
 692:	14 c0       	rjmp	.+40     	; 0x6bc <fputc+0x6e>
 694:	8b 01       	movw	r16, r22
 696:	ec 01       	movw	r28, r24
 698:	fb 01       	movw	r30, r22
 69a:	00 84       	ldd	r0, Z+8	; 0x08
 69c:	f1 85       	ldd	r31, Z+9	; 0x09
 69e:	e0 2d       	mov	r30, r0
 6a0:	09 95       	icall
 6a2:	89 2b       	or	r24, r25
 6a4:	e1 f6       	brne	.-72     	; 0x65e <fputc+0x10>
 6a6:	d8 01       	movw	r26, r16
 6a8:	16 96       	adiw	r26, 0x06	; 6
 6aa:	8d 91       	ld	r24, X+
 6ac:	9c 91       	ld	r25, X
 6ae:	17 97       	sbiw	r26, 0x07	; 7
 6b0:	01 96       	adiw	r24, 0x01	; 1
 6b2:	17 96       	adiw	r26, 0x07	; 7
 6b4:	9c 93       	st	X, r25
 6b6:	8e 93       	st	-X, r24
 6b8:	16 97       	sbiw	r26, 0x06	; 6
 6ba:	ce 01       	movw	r24, r28
 6bc:	df 91       	pop	r29
 6be:	cf 91       	pop	r28
 6c0:	1f 91       	pop	r17
 6c2:	0f 91       	pop	r16
 6c4:	08 95       	ret

000006c6 <__ultoa_invert>:
 6c6:	fa 01       	movw	r30, r20
 6c8:	aa 27       	eor	r26, r26
 6ca:	28 30       	cpi	r18, 0x08	; 8
 6cc:	51 f1       	breq	.+84     	; 0x722 <__ultoa_invert+0x5c>
 6ce:	20 31       	cpi	r18, 0x10	; 16
 6d0:	81 f1       	breq	.+96     	; 0x732 <__ultoa_invert+0x6c>
 6d2:	e8 94       	clt
 6d4:	6f 93       	push	r22
 6d6:	6e 7f       	andi	r22, 0xFE	; 254
 6d8:	6e 5f       	subi	r22, 0xFE	; 254
 6da:	7f 4f       	sbci	r23, 0xFF	; 255
 6dc:	8f 4f       	sbci	r24, 0xFF	; 255
 6de:	9f 4f       	sbci	r25, 0xFF	; 255
 6e0:	af 4f       	sbci	r26, 0xFF	; 255
 6e2:	b1 e0       	ldi	r27, 0x01	; 1
 6e4:	3e d0       	rcall	.+124    	; 0x762 <__ultoa_invert+0x9c>
 6e6:	b4 e0       	ldi	r27, 0x04	; 4
 6e8:	3c d0       	rcall	.+120    	; 0x762 <__ultoa_invert+0x9c>
 6ea:	67 0f       	add	r22, r23
 6ec:	78 1f       	adc	r23, r24
 6ee:	89 1f       	adc	r24, r25
 6f0:	9a 1f       	adc	r25, r26
 6f2:	a1 1d       	adc	r26, r1
 6f4:	68 0f       	add	r22, r24
 6f6:	79 1f       	adc	r23, r25
 6f8:	8a 1f       	adc	r24, r26
 6fa:	91 1d       	adc	r25, r1
 6fc:	a1 1d       	adc	r26, r1
 6fe:	6a 0f       	add	r22, r26
 700:	71 1d       	adc	r23, r1
 702:	81 1d       	adc	r24, r1
 704:	91 1d       	adc	r25, r1
 706:	a1 1d       	adc	r26, r1
 708:	20 d0       	rcall	.+64     	; 0x74a <__ultoa_invert+0x84>
 70a:	09 f4       	brne	.+2      	; 0x70e <__ultoa_invert+0x48>
 70c:	68 94       	set
 70e:	3f 91       	pop	r19
 710:	2a e0       	ldi	r18, 0x0A	; 10
 712:	26 9f       	mul	r18, r22
 714:	11 24       	eor	r1, r1
 716:	30 19       	sub	r19, r0
 718:	30 5d       	subi	r19, 0xD0	; 208
 71a:	31 93       	st	Z+, r19
 71c:	de f6       	brtc	.-74     	; 0x6d4 <__ultoa_invert+0xe>
 71e:	cf 01       	movw	r24, r30
 720:	08 95       	ret
 722:	46 2f       	mov	r20, r22
 724:	47 70       	andi	r20, 0x07	; 7
 726:	40 5d       	subi	r20, 0xD0	; 208
 728:	41 93       	st	Z+, r20
 72a:	b3 e0       	ldi	r27, 0x03	; 3
 72c:	0f d0       	rcall	.+30     	; 0x74c <__ultoa_invert+0x86>
 72e:	c9 f7       	brne	.-14     	; 0x722 <__ultoa_invert+0x5c>
 730:	f6 cf       	rjmp	.-20     	; 0x71e <__ultoa_invert+0x58>
 732:	46 2f       	mov	r20, r22
 734:	4f 70       	andi	r20, 0x0F	; 15
 736:	40 5d       	subi	r20, 0xD0	; 208
 738:	4a 33       	cpi	r20, 0x3A	; 58
 73a:	18 f0       	brcs	.+6      	; 0x742 <__ultoa_invert+0x7c>
 73c:	49 5d       	subi	r20, 0xD9	; 217
 73e:	31 fd       	sbrc	r19, 1
 740:	40 52       	subi	r20, 0x20	; 32
 742:	41 93       	st	Z+, r20
 744:	02 d0       	rcall	.+4      	; 0x74a <__ultoa_invert+0x84>
 746:	a9 f7       	brne	.-22     	; 0x732 <__ultoa_invert+0x6c>
 748:	ea cf       	rjmp	.-44     	; 0x71e <__ultoa_invert+0x58>
 74a:	b4 e0       	ldi	r27, 0x04	; 4
 74c:	a6 95       	lsr	r26
 74e:	97 95       	ror	r25
 750:	87 95       	ror	r24
 752:	77 95       	ror	r23
 754:	67 95       	ror	r22
 756:	ba 95       	dec	r27
 758:	c9 f7       	brne	.-14     	; 0x74c <__ultoa_invert+0x86>
 75a:	00 97       	sbiw	r24, 0x00	; 0
 75c:	61 05       	cpc	r22, r1
 75e:	71 05       	cpc	r23, r1
 760:	08 95       	ret
 762:	9b 01       	movw	r18, r22
 764:	ac 01       	movw	r20, r24
 766:	0a 2e       	mov	r0, r26
 768:	06 94       	lsr	r0
 76a:	57 95       	ror	r21
 76c:	47 95       	ror	r20
 76e:	37 95       	ror	r19
 770:	27 95       	ror	r18
 772:	ba 95       	dec	r27
 774:	c9 f7       	brne	.-14     	; 0x768 <__ultoa_invert+0xa2>
 776:	62 0f       	add	r22, r18
 778:	73 1f       	adc	r23, r19
 77a:	84 1f       	adc	r24, r20
 77c:	95 1f       	adc	r25, r21
 77e:	a0 1d       	adc	r26, r0
 780:	08 95       	ret

00000782 <__prologue_saves__>:
 782:	2f 92       	push	r2
 784:	3f 92       	push	r3
 786:	4f 92       	push	r4
 788:	5f 92       	push	r5
 78a:	6f 92       	push	r6
 78c:	7f 92       	push	r7
 78e:	8f 92       	push	r8
 790:	9f 92       	push	r9
 792:	af 92       	push	r10
 794:	bf 92       	push	r11
 796:	cf 92       	push	r12
 798:	df 92       	push	r13
 79a:	ef 92       	push	r14
 79c:	ff 92       	push	r15
 79e:	0f 93       	push	r16
 7a0:	1f 93       	push	r17
 7a2:	cf 93       	push	r28
 7a4:	df 93       	push	r29
 7a6:	cd b7       	in	r28, 0x3d	; 61
 7a8:	de b7       	in	r29, 0x3e	; 62
 7aa:	ca 1b       	sub	r28, r26
 7ac:	db 0b       	sbc	r29, r27
 7ae:	0f b6       	in	r0, 0x3f	; 63
 7b0:	f8 94       	cli
 7b2:	de bf       	out	0x3e, r29	; 62
 7b4:	0f be       	out	0x3f, r0	; 63
 7b6:	cd bf       	out	0x3d, r28	; 61
 7b8:	09 94       	ijmp

000007ba <__epilogue_restores__>:
 7ba:	2a 88       	ldd	r2, Y+18	; 0x12
 7bc:	39 88       	ldd	r3, Y+17	; 0x11
 7be:	48 88       	ldd	r4, Y+16	; 0x10
 7c0:	5f 84       	ldd	r5, Y+15	; 0x0f
 7c2:	6e 84       	ldd	r6, Y+14	; 0x0e
 7c4:	7d 84       	ldd	r7, Y+13	; 0x0d
 7c6:	8c 84       	ldd	r8, Y+12	; 0x0c
 7c8:	9b 84       	ldd	r9, Y+11	; 0x0b
 7ca:	aa 84       	ldd	r10, Y+10	; 0x0a
 7cc:	b9 84       	ldd	r11, Y+9	; 0x09
 7ce:	c8 84       	ldd	r12, Y+8	; 0x08
 7d0:	df 80       	ldd	r13, Y+7	; 0x07
 7d2:	ee 80       	ldd	r14, Y+6	; 0x06
 7d4:	fd 80       	ldd	r15, Y+5	; 0x05
 7d6:	0c 81       	ldd	r16, Y+4	; 0x04
 7d8:	1b 81       	ldd	r17, Y+3	; 0x03
 7da:	aa 81       	ldd	r26, Y+2	; 0x02
 7dc:	b9 81       	ldd	r27, Y+1	; 0x01
 7de:	ce 0f       	add	r28, r30
 7e0:	d1 1d       	adc	r29, r1
 7e2:	0f b6       	in	r0, 0x3f	; 63
 7e4:	f8 94       	cli
 7e6:	de bf       	out	0x3e, r29	; 62
 7e8:	0f be       	out	0x3f, r0	; 63
 7ea:	cd bf       	out	0x3d, r28	; 61
 7ec:	ed 01       	movw	r28, r26
 7ee:	08 95       	ret

000007f0 <_exit>:
 7f0:	f8 94       	cli

000007f2 <__stop_program>:
 7f2:	ff cf       	rjmp	.-2      	; 0x7f2 <__stop_program>
