
i2c_atmega_328p_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000346  000003da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000346  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800124  00800124  000003fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e65  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a13  00000000  00000000  000013cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c1  00000000  00000000  00001de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  000023a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058e  00000000  00000000  0000257c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c4  00000000  00000000  00002b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00002ece  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 32       	cpi	r26, 0x2E	; 46
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 65 01 	call	0x2ca	; 0x2ca <main>
  9e:	0c 94 a1 01 	jmp	0x342	; 0x342 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <cal_checksum>:
char status =255;
int dir = 10;
long dist = 30000;

int cal_checksum(int value, char length)
{
  a6:	fc 01       	movw	r30, r24
	char array[length];
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	9b 01       	movw	r18, r22
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	31 09       	sbc	r19, r1
	char Checksum=0;
	for (int i=0; i<length; i++)
  b0:	16 16       	cp	r1, r22
  b2:	17 06       	cpc	r1, r23
  b4:	74 f4       	brge	.+28     	; 0xd2 <cal_checksum+0x2c>
  b6:	80 e0       	ldi	r24, 0x00	; 0
	{   array[i] = 0;
		array[i]= (value>>((length-1)-i)) & 1;
		Checksum^=array[i];
  b8:	af 01       	movw	r20, r30
  ba:	02 2e       	mov	r0, r18
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <cal_checksum+0x1c>
  be:	55 95       	asr	r21
  c0:	47 95       	ror	r20
  c2:	0a 94       	dec	r0
  c4:	e2 f7       	brpl	.-8      	; 0xbe <cal_checksum+0x18>
  c6:	41 70       	andi	r20, 0x01	; 1
  c8:	84 27       	eor	r24, r20
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	31 09       	sbc	r19, r1
  ce:	a0 f7       	brcc	.-24     	; 0xb8 <cal_checksum+0x12>
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <cal_checksum+0x2e>
long dist = 30000;

int cal_checksum(int value, char length)
{
	char array[length];
	char Checksum=0;
  d2:	80 e0       	ldi	r24, 0x00	; 0
	{   array[i] = 0;
		array[i]= (value>>((length-1)-i)) & 1;
		Checksum^=array[i];
	}
	return Checksum;
}
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	08 95       	ret

000000d8 <set_opcode>:


void set_opcode(uint8_t value)
{	
	if (value == 0)
  d8:	81 11       	cpse	r24, r1
  da:	04 c0       	rjmp	.+8      	; 0xe4 <set_opcode+0xc>
	{
		return_checksum = 1;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
  e2:	08 95       	ret
	}
	else
	{
	opcode = value;
  e4:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <opcode>
  e8:	08 95       	ret

000000ea <Gps_send_status>:
}


void Gps_send_status(void)
{
	if (return_checksum==1)
  ea:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	59 f4       	brne	.+22     	; 0x108 <Gps_send_status+0x1e>
	{
		int checksum;
		
	    checksum = cal_checksum(status, 8);
  f2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <status>
  f6:	68 e0       	ldi	r22, 0x08	; 8
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <cal_checksum>
		set_data(checksum);		
  fe:	0e 94 15 01 	call	0x22a	; 0x22a <set_data>
		return_checksum=0;
 102:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
 106:	08 95       	ret
	}
	else
	{	
		set_data(status);
 108:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <status>
 10c:	0e 94 15 01 	call	0x22a	; 0x22a <set_data>
 110:	08 95       	ret

00000112 <Gps_send_Direction>:

void Gps_send_Direction(void)
{
	char data;
	
	if (return_checksum==1)
 112:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	61 f4       	brne	.+24     	; 0x132 <Gps_send_Direction+0x20>
	{
		char checksum;
		
		checksum = cal_checksum(dir, 16);
 11a:	60 e1       	ldi	r22, 0x10	; 16
 11c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dir>
 120:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <dir+0x1>
 124:	0e 94 53 00 	call	0xa6	; 0xa6 <cal_checksum>
		set_data(checksum);
 128:	0e 94 15 01 	call	0x22a	; 0x22a <set_data>
		return_checksum=0;
 12c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
 130:	08 95       	ret
	}
	else
	{
		data= dir>> 8*bytes;
		set_data(data);	
 132:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <bytes>
 136:	22 0f       	add	r18, r18
 138:	22 0f       	add	r18, r18
 13a:	22 0f       	add	r18, r18
 13c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dir>
 140:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <dir+0x1>
 144:	02 c0       	rjmp	.+4      	; 0x14a <Gps_send_Direction+0x38>
 146:	95 95       	asr	r25
 148:	87 95       	ror	r24
 14a:	2a 95       	dec	r18
 14c:	e2 f7       	brpl	.-8      	; 0x146 <Gps_send_Direction+0x34>
 14e:	0e 94 15 01 	call	0x22a	; 0x22a <set_data>
		bytes++;
 152:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <bytes>
 156:	8f 5f       	subi	r24, 0xFF	; 255
		if (bytes==2)
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	19 f0       	breq	.+6      	; 0x162 <Gps_send_Direction+0x50>
	}
	else
	{
		data= dir>> 8*bytes;
		set_data(data);	
		bytes++;
 15c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <bytes>
 160:	08 95       	ret
		if (bytes==2)
		bytes=0;
 162:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <bytes>
 166:	08 95       	ret

00000168 <Gps_send_Distance>:

void Gps_send_Distance(void)
{
	char data;
	
	if (return_checksum==1)
 168:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	61 f4       	brne	.+24     	; 0x188 <Gps_send_Distance+0x20>
	{
		char checksum;
		
		checksum = cal_checksum(dist, 32);
 170:	60 e2       	ldi	r22, 0x20	; 32
 172:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 176:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 17a:	0e 94 53 00 	call	0xa6	; 0xa6 <cal_checksum>
		set_data(checksum);
 17e:	0e 94 15 01 	call	0x22a	; 0x22a <set_data>
		return_checksum=0;
 182:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
 186:	08 95       	ret
	}
	else
	{
		data= dist>> 8*bytes;
		set_data(data);
 188:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <bytes>
 18c:	22 0f       	add	r18, r18
 18e:	22 0f       	add	r18, r18
 190:	22 0f       	add	r18, r18
 192:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 196:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 19a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 19e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1a2:	04 c0       	rjmp	.+8      	; 0x1ac <Gps_send_Distance+0x44>
 1a4:	b5 95       	asr	r27
 1a6:	a7 95       	ror	r26
 1a8:	97 95       	ror	r25
 1aa:	87 95       	ror	r24
 1ac:	2a 95       	dec	r18
 1ae:	d2 f7       	brpl	.-12     	; 0x1a4 <Gps_send_Distance+0x3c>
 1b0:	0e 94 15 01 	call	0x22a	; 0x22a <set_data>
		bytes++;
 1b4:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <bytes>
 1b8:	8f 5f       	subi	r24, 0xFF	; 255
		if (bytes==4)
 1ba:	84 30       	cpi	r24, 0x04	; 4
 1bc:	19 f0       	breq	.+6      	; 0x1c4 <Gps_send_Distance+0x5c>
	}
	else
	{
		data= dist>> 8*bytes;
		set_data(data);
		bytes++;
 1be:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <bytes>
 1c2:	08 95       	ret
		if (bytes==4)
		bytes=0;
 1c4:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <bytes>
 1c8:	08 95       	ret

000001ca <i2c_service>:
}


void i2c_service(void)
{
	switch(opcode)
 1ca:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <opcode>
 1ce:	82 30       	cpi	r24, 0x02	; 2
 1d0:	39 f0       	breq	.+14     	; 0x1e0 <i2c_service+0x16>
 1d2:	83 30       	cpi	r24, 0x03	; 3
 1d4:	41 f0       	breq	.+16     	; 0x1e6 <i2c_service+0x1c>
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	41 f4       	brne	.+16     	; 0x1ea <i2c_service+0x20>
{	
	case 1: 
	{
		Gps_send_status();
 1da:	0e 94 75 00 	call	0xea	; 0xea <Gps_send_status>
		break;	
 1de:	08 95       	ret
	}	
	
	case 2:
	{
		Gps_send_Direction();
 1e0:	0e 94 89 00 	call	0x112	; 0x112 <Gps_send_Direction>
		break;
 1e4:	08 95       	ret
	}
	
	case 3:
	 {
		 Gps_send_Distance();
 1e6:	0e 94 b4 00 	call	0x168	; 0x168 <Gps_send_Distance>
 1ea:	08 95       	ret

000001ec <I2C_recieve>:
		sei();
}

void i2c_transmit_data(uint8_t data)
{		
	TWDR = data;
 1ec:	cf 93       	push	r28
 1ee:	c8 2f       	mov	r28, r24
 1f0:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_opcode>
 1f4:	c0 93 27 01 	sts	0x0127, r28	; 0x800127 <data>
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <I2C_data_ACK_request>:
 1fc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <i2c_service>
 200:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <data>
 204:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 208:	08 95       	ret

0000020a <I2C_data_NACK_request>:
 20a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <i2c_service>
 20e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <data>
 212:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 216:	08 95       	ret

00000218 <i2c_init>:
 218:	f8 94       	cli
 21a:	88 0f       	add	r24, r24
 21c:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
 220:	85 ec       	ldi	r24, 0xC5	; 197
 222:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 226:	78 94       	sei
 228:	08 95       	ret

0000022a <set_data>:
}

void set_data(uint8_t value)
{
	data = value;
 22a:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <data>
 22e:	08 95       	ret

00000230 <__vector_24>:
}


 
ISR(TWI_vect)
{
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	2f 93       	push	r18
 23c:	3f 93       	push	r19
 23e:	4f 93       	push	r20
 240:	5f 93       	push	r21
 242:	6f 93       	push	r22
 244:	7f 93       	push	r23
 246:	8f 93       	push	r24
 248:	9f 93       	push	r25
 24a:	af 93       	push	r26
 24c:	bf 93       	push	r27
 24e:	ef 93       	push	r30
 250:	ff 93       	push	r31
	switch(TW_STATUS)
 252:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 256:	88 7f       	andi	r24, 0xF8	; 248
 258:	80 38       	cpi	r24, 0x80	; 128
 25a:	49 f0       	breq	.+18     	; 0x26e <__vector_24+0x3e>
 25c:	18 f4       	brcc	.+6      	; 0x264 <__vector_24+0x34>
 25e:	88 23       	and	r24, r24
 260:	d1 f0       	breq	.+52     	; 0x296 <__vector_24+0x66>
 262:	1f c0       	rjmp	.+62     	; 0x2a2 <__vector_24+0x72>
 264:	88 3a       	cpi	r24, 0xA8	; 168
 266:	59 f0       	breq	.+22     	; 0x27e <__vector_24+0x4e>
 268:	88 3b       	cpi	r24, 0xB8	; 184
 26a:	79 f0       	breq	.+30     	; 0x28a <__vector_24+0x5a>
 26c:	1a c0       	rjmp	.+52     	; 0x2a2 <__vector_24+0x72>
	{
		case TW_SR_DATA_ACK:
		// received data from master, call the receive callback
		I2C_recieve(TWDR);
 26e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 272:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_recieve>
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 276:	85 ec       	ldi	r24, 0xC5	; 197
 278:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
 27c:	15 c0       	rjmp	.+42     	; 0x2a8 <__vector_24+0x78>
		
		case TW_ST_SLA_ACK:
		// master is requesting data using NACK,master expects only one additional byte. call the request callback
		I2C_data_NACK_request();
 27e:	0e 94 05 01 	call	0x20a	; 0x20a <I2C_data_NACK_request>
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 282:	85 ec       	ldi	r24, 0xC5	; 197
 284:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
 288:	0f c0       	rjmp	.+30     	; 0x2a8 <__vector_24+0x78>
		
		case TW_ST_DATA_ACK:
		// master is requesting data using ACK, master expects multiple bytes. call the request callback
		I2C_data_ACK_request();
 28a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_data_ACK_request>
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 28e:	85 ec       	ldi	r24, 0xC5	; 197
 290:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
 294:	09 c0       	rjmp	.+18     	; 0x2a8 <__vector_24+0x78>
		
		case TW_BUS_ERROR:
		// some sort of erroneous state, prepare TWI to be readdressed
		TWCR = 0;
 296:	ec eb       	ldi	r30, 0xBC	; 188
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	10 82       	st	Z, r1
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 29c:	85 ec       	ldi	r24, 0xC5	; 197
 29e:	80 83       	st	Z, r24
		break;
 2a0:	03 c0       	rjmp	.+6      	; 0x2a8 <__vector_24+0x78>
		
		default:
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 2a2:	85 ec       	ldi	r24, 0xC5	; 197
 2a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
	}
}
 2a8:	ff 91       	pop	r31
 2aa:	ef 91       	pop	r30
 2ac:	bf 91       	pop	r27
 2ae:	af 91       	pop	r26
 2b0:	9f 91       	pop	r25
 2b2:	8f 91       	pop	r24
 2b4:	7f 91       	pop	r23
 2b6:	6f 91       	pop	r22
 2b8:	5f 91       	pop	r21
 2ba:	4f 91       	pop	r20
 2bc:	3f 91       	pop	r19
 2be:	2f 91       	pop	r18
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <main>:


 int main()
 {
	 
 i2c_init(I2C_ADDR);														//in this we only print the received data and echo it back when data is requested from master
 2ca:	80 e4       	ldi	r24, 0x40	; 64
 2cc:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_init>
 uart_init();
 2d0:	0e 94 85 01 	call	0x30a	; 0x30a <uart_init>
 io_redirect();
 2d4:	0e 94 96 01 	call	0x32c	; 0x32c <io_redirect>
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <main+0xe>

000002da <uart_putchar>:
		stdout = &uart_output;	//redirect standard output to uart
		stdin  = &uart_input;  //redirect standard input to uart
}
	

void uart_putchar(char c, FILE *stream) {
 2da:	cf 93       	push	r28
 2dc:	c8 2f       	mov	r28, r24
	if (c == '\n') {
 2de:	8a 30       	cpi	r24, 0x0A	; 10
 2e0:	19 f4       	brne	.+6      	; 0x2e8 <uart_putchar+0xe>
		uart_putchar('\r', stream);
 2e2:	8d e0       	ldi	r24, 0x0D	; 13
 2e4:	0e 94 6d 01 	call	0x2da	; 0x2da <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
 2e8:	e0 ec       	ldi	r30, 0xC0	; 192
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	85 ff       	sbrs	r24, 5
 2f0:	fd cf       	rjmp	.-6      	; 0x2ec <uart_putchar+0x12>
	UDR0 = c;
 2f2:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <uart_getchar>:

char uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0);
 2fa:	e0 ec       	ldi	r30, 0xC0	; 192
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	88 23       	and	r24, r24
 302:	ec f7       	brge	.-6      	; 0x2fe <uart_getchar+0x4>
	return UDR0;
 304:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 308:	08 95       	ret

0000030a <uart_init>:
FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);


void uart_init(void) {
	
	UBRR0H = UBRRH_VALUE;
 30a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 30e:	87 e6       	ldi	r24, 0x67	; 103
 310:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
 314:	e0 ec       	ldi	r30, 0xC0	; 192
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	8d 7f       	andi	r24, 0xFD	; 253
 31c:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
 31e:	86 e0       	ldi	r24, 0x06	; 6
 320:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
 324:	88 e1       	ldi	r24, 0x18	; 24
 326:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 32a:	08 95       	ret

0000032c <io_redirect>:
}

void io_redirect(void ){
		
		
		stdout = &uart_output;	//redirect standard output to uart
 32c:	e8 e2       	ldi	r30, 0x28	; 40
 32e:	f1 e0       	ldi	r31, 0x01	; 1
 330:	85 e1       	ldi	r24, 0x15	; 21
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	93 83       	std	Z+3, r25	; 0x03
 336:	82 83       	std	Z+2, r24	; 0x02
		stdin  = &uart_input;  //redirect standard input to uart
 338:	87 e0       	ldi	r24, 0x07	; 7
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	91 83       	std	Z+1, r25	; 0x01
 33e:	80 83       	st	Z, r24
 340:	08 95       	ret

00000342 <_exit>:
 342:	f8 94       	cli

00000344 <__stop_program>:
 344:	ff cf       	rjmp	.-2      	; 0x344 <__stop_program>
