
decoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  000025fa  0000268e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000069  00800164  00800164  000026f2  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  000026f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002780  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  000027c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000287f  00000000  00000000  00002a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012e7  00000000  00000000  000052e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013ec  00000000  00000000  000065ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000062c  00000000  00000000  000079bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b2f  00000000  00000000  00007fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000127a  00000000  00000000  00008b17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  00009d91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__ctors_end>
       4:	0c 94 4c 01 	jmp	0x298	; 0x298 <__vector_1>
       8:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
       c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      10:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      14:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      18:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      1c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      20:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      24:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      28:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      2c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      30:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      34:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      38:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      3c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      40:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      44:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      48:	0c 94 9d 09 	jmp	0x133a	; 0x133a <__vector_18>
      4c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      50:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      54:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      58:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      5c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      60:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__vector_24>
      64:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 05       	cpc	r19, r15
      96:	a8 4c       	sbci	r26, 0xC8	; 200
      98:	cd b2       	in	r12, 0x1d	; 29
      9a:	d4 4e       	sbci	r29, 0xE4	; 228
      9c:	b9 38       	cpi	r27, 0x89	; 137
      9e:	36 a9       	ldd	r19, Z+54	; 0x36
      a0:	02 0c       	add	r0, r2
      a2:	50 b9       	out	0x00, r21	; 0
      a4:	91 86       	std	Z+9, r9	; 0x09
      a6:	88 08       	sbc	r8, r8
      a8:	3c a6       	std	Y+44, r3	; 0x2c
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	2a be       	out	0x3a, r2	; 58
      ae:	00 00       	nop
      b0:	00 80       	ld	r0, Z
      b2:	3f 00       	.word	0x003f	; ????

000000b4 <__trampolines_end>:
      b4:	6e 61       	ori	r22, 0x1E	; 30
      b6:	6e 00       	.word	0x006e	; ????

000000b8 <__c.2332>:
      b8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      c8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      d8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      e8:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      f8:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     108:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     118:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     128:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     138:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     148:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     158:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     168:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     178:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     188:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     198:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1a8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001b6 <__ctors_end>:
     1b6:	11 24       	eor	r1, r1
     1b8:	1f be       	out	0x3f, r1	; 63
     1ba:	cf ef       	ldi	r28, 0xFF	; 255
     1bc:	d8 e0       	ldi	r29, 0x08	; 8
     1be:	de bf       	out	0x3e, r29	; 62
     1c0:	cd bf       	out	0x3d, r28	; 61

000001c2 <__do_copy_data>:
     1c2:	11 e0       	ldi	r17, 0x01	; 1
     1c4:	a0 e0       	ldi	r26, 0x00	; 0
     1c6:	b1 e0       	ldi	r27, 0x01	; 1
     1c8:	ea ef       	ldi	r30, 0xFA	; 250
     1ca:	f5 e2       	ldi	r31, 0x25	; 37
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <__do_copy_data+0x10>
     1ce:	05 90       	lpm	r0, Z+
     1d0:	0d 92       	st	X+, r0
     1d2:	a4 36       	cpi	r26, 0x64	; 100
     1d4:	b1 07       	cpc	r27, r17
     1d6:	d9 f7       	brne	.-10     	; 0x1ce <__do_copy_data+0xc>

000001d8 <__do_clear_bss>:
     1d8:	21 e0       	ldi	r18, 0x01	; 1
     1da:	a4 e6       	ldi	r26, 0x64	; 100
     1dc:	b1 e0       	ldi	r27, 0x01	; 1
     1de:	01 c0       	rjmp	.+2      	; 0x1e2 <.do_clear_bss_start>

000001e0 <.do_clear_bss_loop>:
     1e0:	1d 92       	st	X+, r1

000001e2 <.do_clear_bss_start>:
     1e2:	ad 3c       	cpi	r26, 0xCD	; 205
     1e4:	b2 07       	cpc	r27, r18
     1e6:	e1 f7       	brne	.-8      	; 0x1e0 <.do_clear_bss_loop>
     1e8:	0e 94 9c 05 	call	0xb38	; 0xb38 <main>
     1ec:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <_exit>

000001f0 <__bad_interrupt>:
     1f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f4 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     1f4:	0e 94 49 09 	call	0x1292	; 0x1292 <system_init>
     1f8:	08 95       	ret

000001fa <GPS_init>:

			usart_send('\r');
			usart_send('\n');
	}
	print_flag=1;
}
     1fa:	52 98       	cbi	0x0a, 2	; 10
     1fc:	8b b1       	in	r24, 0x0b	; 11
     1fe:	8b b9       	out	0x0b, r24	; 11
     200:	e8 9a       	sbi	0x1d, 0	; 29
     202:	e9 e6       	ldi	r30, 0x69	; 105
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	80 81       	ld	r24, Z
     208:	83 60       	ori	r24, 0x03	; 3
     20a:	80 83       	st	Z, r24
     20c:	78 94       	sei
     20e:	08 95       	ret

00000210 <get_gps_message>:
     210:	dc 01       	movw	r26, r24
     212:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <Gps_data+0x51>
     216:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <Gps_data+0x52>
     21a:	81 30       	cpi	r24, 0x01	; 1
     21c:	91 05       	cpc	r25, r1
     21e:	61 f4       	brne	.+24     	; 0x238 <get_gps_message+0x28>
     220:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <Gps_data+0x52>
     224:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <Gps_data+0x51>
     228:	20 e5       	ldi	r18, 0x50	; 80
     22a:	e9 e6       	ldi	r30, 0x69	; 105
     22c:	f1 e0       	ldi	r31, 0x01	; 1
     22e:	01 90       	ld	r0, Z+
     230:	0d 92       	st	X+, r0
     232:	2a 95       	dec	r18
     234:	e1 f7       	brne	.-8      	; 0x22e <get_gps_message+0x1e>
     236:	08 95       	ret
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	08 95       	ret

0000023e <stop_gps_sample>:
     23e:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <process>
     242:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <print_flag>
     246:	08 95       	ret

00000248 <read_gps_data>:
     248:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <process>
     24c:	81 30       	cpi	r24, 0x01	; 1
     24e:	19 f5       	brne	.+70     	; 0x296 <read_gps_data+0x4e>
     250:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <print_flag>
     254:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     258:	8a 30       	cpi	r24, 0x0A	; 10
     25a:	81 f4       	brne	.+32     	; 0x27c <read_gps_data+0x34>
     25c:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <byte>
     260:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <Gps_data>
     264:	8f ef       	ldi	r24, 0xFF	; 255
     266:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <byte>
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <Gps_data+0x52>
     272:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <Gps_data+0x51>
     276:	0e 94 1f 01 	call	0x23e	; 0x23e <stop_gps_sample>
     27a:	08 95       	ret
     27c:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <byte>
     280:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	e8 59       	subi	r30, 0x98	; 152
     288:	fe 4f       	sbci	r31, 0xFE	; 254
     28a:	81 83       	std	Z+1, r24	; 0x01
     28c:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <byte>
     290:	8f 5f       	subi	r24, 0xFF	; 255
     292:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <byte>
     296:	08 95       	ret

00000298 <__vector_1>:


ISR(INT0_vect) //Interrupt every data package start "Blue light" 
{
     298:	1f 92       	push	r1
     29a:	0f 92       	push	r0
     29c:	0f b6       	in	r0, 0x3f	; 63
     29e:	0f 92       	push	r0
     2a0:	11 24       	eor	r1, r1
     2a2:	8f 93       	push	r24
	process=1;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <process>
	byte=-1;
     2aa:	8f ef       	ldi	r24, 0xFF	; 255
     2ac:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <byte>
}
     2b0:	8f 91       	pop	r24
     2b2:	0f 90       	pop	r0
     2b4:	0f be       	out	0x3f, r0	; 63
     2b6:	0f 90       	pop	r0
     2b8:	1f 90       	pop	r1
     2ba:	18 95       	reti

000002bc <dist_to_wp>:
	float rad;
	rad = ((deg * PI)/180.0);
	return rad;
}

void dist_to_wp(struct DATA *GPS_Data, coor_t WP){
     2bc:	4f 92       	push	r4
     2be:	5f 92       	push	r5
     2c0:	6f 92       	push	r6
     2c2:	7f 92       	push	r7
     2c4:	8f 92       	push	r8
     2c6:	9f 92       	push	r9
     2c8:	af 92       	push	r10
     2ca:	bf 92       	push	r11
     2cc:	cf 92       	push	r12
     2ce:	df 92       	push	r13
     2d0:	ef 92       	push	r14
     2d2:	ff 92       	push	r15
     2d4:	0f 93       	push	r16
     2d6:	1f 93       	push	r17
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
     2e0:	68 97       	sbiw	r28, 0x18	; 24
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	f8 94       	cli
     2e6:	de bf       	out	0x3e, r29	; 62
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	cd bf       	out	0x3d, r28	; 61
     2ec:	8c 01       	movw	r16, r24
     2ee:	89 82       	std	Y+1, r8	; 0x01
     2f0:	9a 82       	std	Y+2, r9	; 0x02
     2f2:	ab 82       	std	Y+3, r10	; 0x03
     2f4:	bc 82       	std	Y+4, r11	; 0x04
     2f6:	cd 82       	std	Y+5, r12	; 0x05
     2f8:	de 82       	std	Y+6, r13	; 0x06
     2fa:	ef 82       	std	Y+7, r14	; 0x07
     2fc:	f8 86       	std	Y+8, r15	; 0x08
     2fe:	4d 87       	std	Y+13, r20	; 0x0d
     300:	5e 87       	std	Y+14, r21	; 0x0e
     302:	6f 87       	std	Y+15, r22	; 0x0f
     304:	78 8b       	std	Y+16, r23	; 0x10

	int32_t a=  (WP.LAT_int - ( GPS_Data->LAT_FINAL ));
     306:	4d 81       	ldd	r20, Y+5	; 0x05
     308:	5e 81       	ldd	r21, Y+6	; 0x06
     30a:	6f 81       	ldd	r22, Y+7	; 0x07
     30c:	78 85       	ldd	r23, Y+8	; 0x08
     30e:	fc 01       	movw	r30, r24
     310:	82 85       	ldd	r24, Z+10	; 0x0a
     312:	93 85       	ldd	r25, Z+11	; 0x0b
     314:	a4 85       	ldd	r26, Z+12	; 0x0c
     316:	b5 85       	ldd	r27, Z+13	; 0x0d
     318:	4a 01       	movw	r8, r20
     31a:	5b 01       	movw	r10, r22
     31c:	88 1a       	sub	r8, r24
     31e:	99 0a       	sbc	r9, r25
     320:	aa 0a       	sbc	r10, r26
     322:	bb 0a       	sbc	r11, r27
	int32_t b=  (WP.LON_int - ( GPS_Data->LON_FINAL )); 
     324:	4d 85       	ldd	r20, Y+13	; 0x0d
     326:	5e 85       	ldd	r21, Y+14	; 0x0e
     328:	6f 85       	ldd	r22, Y+15	; 0x0f
     32a:	78 89       	ldd	r23, Y+16	; 0x10
     32c:	81 8d       	ldd	r24, Z+25	; 0x19
     32e:	92 8d       	ldd	r25, Z+26	; 0x1a
     330:	a3 8d       	ldd	r26, Z+27	; 0x1b
     332:	b4 8d       	ldd	r27, Z+28	; 0x1c
     334:	2a 01       	movw	r4, r20
     336:	3b 01       	movw	r6, r22
     338:	48 1a       	sub	r4, r24
     33a:	59 0a       	sbc	r5, r25
     33c:	6a 0a       	sbc	r6, r26
     33e:	7b 0a       	sbc	r7, r27
	
	//converting a b to dist in meters using formula for 1deg in m:
	if(first_dist==0){
     340:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <first_dist>
     344:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <first_dist+0x1>
     348:	89 2b       	or	r24, r25
     34a:	09 f0       	breq	.+2      	; 0x34e <dist_to_wp+0x92>
     34c:	8c c0       	rjmp	.+280    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     34e:	c9 80       	ldd	r12, Y+1	; 0x01
     350:	da 80       	ldd	r13, Y+2	; 0x02
     352:	eb 80       	ldd	r14, Y+3	; 0x03
     354:	fc 80       	ldd	r15, Y+4	; 0x04
	m_pr_deg_lon = ((111.41288*cos( deg_to_rad(WP.LAT) ) ) - (0.09350*cos( deg_to_rad(3*WP.LAT) ) ) + (0.00012*cos( deg_to_rad(5*WP.LAT) ) )  );//*1000;
     356:	2b ed       	ldi	r18, 0xDB	; 219
     358:	3f e0       	ldi	r19, 0x0F	; 15
     35a:	49 e4       	ldi	r20, 0x49	; 73
     35c:	50 e4       	ldi	r21, 0x40	; 64
     35e:	c7 01       	movw	r24, r14
     360:	b6 01       	movw	r22, r12
     362:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     366:	20 e0       	ldi	r18, 0x00	; 0
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	44 e3       	ldi	r20, 0x34	; 52
     36c:	53 e4       	ldi	r21, 0x43	; 67
     36e:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__divsf3>
     372:	0e 94 a5 0a 	call	0x154a	; 0x154a <cos>
     376:	69 8b       	std	Y+17, r22	; 0x11
     378:	7a 8b       	std	Y+18, r23	; 0x12
     37a:	8b 8b       	std	Y+19, r24	; 0x13
     37c:	9c 8b       	std	Y+20, r25	; 0x14
     37e:	20 e0       	ldi	r18, 0x00	; 0
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	40 e4       	ldi	r20, 0x40	; 64
     384:	50 e4       	ldi	r21, 0x40	; 64
     386:	c7 01       	movw	r24, r14
     388:	b6 01       	movw	r22, r12
     38a:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     38e:	2b ed       	ldi	r18, 0xDB	; 219
     390:	3f e0       	ldi	r19, 0x0F	; 15
     392:	49 e4       	ldi	r20, 0x49	; 73
     394:	50 e4       	ldi	r21, 0x40	; 64
     396:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	44 e3       	ldi	r20, 0x34	; 52
     3a0:	53 e4       	ldi	r21, 0x43	; 67
     3a2:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__divsf3>
     3a6:	0e 94 a5 0a 	call	0x154a	; 0x154a <cos>
     3aa:	6d 8b       	std	Y+21, r22	; 0x15
     3ac:	7e 8b       	std	Y+22, r23	; 0x16
     3ae:	8f 8b       	std	Y+23, r24	; 0x17
     3b0:	98 8f       	std	Y+24, r25	; 0x18
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	40 ea       	ldi	r20, 0xA0	; 160
     3b8:	50 e4       	ldi	r21, 0x40	; 64
     3ba:	c7 01       	movw	r24, r14
     3bc:	b6 01       	movw	r22, r12
     3be:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     3c2:	2b ed       	ldi	r18, 0xDB	; 219
     3c4:	3f e0       	ldi	r19, 0x0F	; 15
     3c6:	49 e4       	ldi	r20, 0x49	; 73
     3c8:	50 e4       	ldi	r21, 0x40	; 64
     3ca:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     3ce:	20 e0       	ldi	r18, 0x00	; 0
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	44 e3       	ldi	r20, 0x34	; 52
     3d4:	53 e4       	ldi	r21, 0x43	; 67
     3d6:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__divsf3>
     3da:	0e 94 a5 0a 	call	0x154a	; 0x154a <cos>
     3de:	6b 01       	movw	r12, r22
     3e0:	7c 01       	movw	r14, r24
     3e2:	25 e6       	ldi	r18, 0x65	; 101
     3e4:	33 ed       	ldi	r19, 0xD3	; 211
     3e6:	4e ed       	ldi	r20, 0xDE	; 222
     3e8:	52 e4       	ldi	r21, 0x42	; 66
     3ea:	69 89       	ldd	r22, Y+17	; 0x11
     3ec:	7a 89       	ldd	r23, Y+18	; 0x12
     3ee:	8b 89       	ldd	r24, Y+19	; 0x13
     3f0:	9c 89       	ldd	r25, Y+20	; 0x14
     3f2:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     3f6:	69 8b       	std	Y+17, r22	; 0x11
     3f8:	7a 8b       	std	Y+18, r23	; 0x12
     3fa:	8b 8b       	std	Y+19, r24	; 0x13
     3fc:	9c 8b       	std	Y+20, r25	; 0x14
     3fe:	2e ee       	ldi	r18, 0xEE	; 238
     400:	3c e7       	ldi	r19, 0x7C	; 124
     402:	4f eb       	ldi	r20, 0xBF	; 191
     404:	5d e3       	ldi	r21, 0x3D	; 61
     406:	6d 89       	ldd	r22, Y+21	; 0x15
     408:	7e 89       	ldd	r23, Y+22	; 0x16
     40a:	8f 89       	ldd	r24, Y+23	; 0x17
     40c:	98 8d       	ldd	r25, Y+24	; 0x18
     40e:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     412:	9b 01       	movw	r18, r22
     414:	ac 01       	movw	r20, r24
     416:	69 89       	ldd	r22, Y+17	; 0x11
     418:	7a 89       	ldd	r23, Y+18	; 0x12
     41a:	8b 89       	ldd	r24, Y+19	; 0x13
     41c:	9c 89       	ldd	r25, Y+20	; 0x14
     41e:	0e 94 c1 09 	call	0x1382	; 0x1382 <__subsf3>
     422:	69 8b       	std	Y+17, r22	; 0x11
     424:	7a 8b       	std	Y+18, r23	; 0x12
     426:	8b 8b       	std	Y+19, r24	; 0x13
     428:	9c 8b       	std	Y+20, r25	; 0x14
     42a:	22 e8       	ldi	r18, 0x82	; 130
     42c:	38 ea       	ldi	r19, 0xA8	; 168
     42e:	4b ef       	ldi	r20, 0xFB	; 251
     430:	58 e3       	ldi	r21, 0x38	; 56
     432:	c7 01       	movw	r24, r14
     434:	b6 01       	movw	r22, r12
     436:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     43a:	9b 01       	movw	r18, r22
     43c:	ac 01       	movw	r20, r24
     43e:	69 89       	ldd	r22, Y+17	; 0x11
     440:	7a 89       	ldd	r23, Y+18	; 0x12
     442:	8b 89       	ldd	r24, Y+19	; 0x13
     444:	9c 89       	ldd	r25, Y+20	; 0x14
     446:	0e 94 c2 09 	call	0x1384	; 0x1384 <__addsf3>
     44a:	60 93 be 01 	sts	0x01BE, r22	; 0x8001be <m_pr_deg_lon>
     44e:	70 93 bf 01 	sts	0x01BF, r23	; 0x8001bf <m_pr_deg_lon+0x1>
     452:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <m_pr_deg_lon+0x2>
     456:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <m_pr_deg_lon+0x3>
	first_dist++;
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <first_dist+0x1>
     462:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <first_dist>
	}
	
	float c = a * m_pr_deg_lat;
     466:	c5 01       	movw	r24, r10
     468:	b4 01       	movw	r22, r8
     46a:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__floatsisf>
     46e:	23 e7       	ldi	r18, 0x73	; 115
     470:	3e e0       	ldi	r19, 0x0E	; 14
     472:	49 ed       	ldi	r20, 0xD9	; 217
     474:	57 e4       	ldi	r21, 0x47	; 71
     476:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     47a:	4b 01       	movw	r8, r22
     47c:	5c 01       	movw	r10, r24
	float d = b * m_pr_deg_lon;
     47e:	c3 01       	movw	r24, r6
     480:	b2 01       	movw	r22, r4
     482:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__floatsisf>
     486:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <m_pr_deg_lon>
     48a:	30 91 bf 01 	lds	r19, 0x01BF	; 0x8001bf <m_pr_deg_lon+0x1>
     48e:	40 91 c0 01 	lds	r20, 0x01C0	; 0x8001c0 <m_pr_deg_lon+0x2>
     492:	50 91 c1 01 	lds	r21, 0x01C1	; 0x8001c1 <m_pr_deg_lon+0x3>
     496:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     49a:	6b 01       	movw	r12, r22
     49c:	7c 01       	movw	r14, r24
	
	//finding dist between pos and wp
	float dist = (sqrt(pow(c,2) + pow(d,2)))/100000 ;
     49e:	a5 01       	movw	r20, r10
     4a0:	94 01       	movw	r18, r8
     4a2:	c5 01       	movw	r24, r10
     4a4:	b4 01       	movw	r22, r8
     4a6:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     4aa:	4b 01       	movw	r8, r22
     4ac:	5c 01       	movw	r10, r24
     4ae:	a7 01       	movw	r20, r14
     4b0:	96 01       	movw	r18, r12
     4b2:	c7 01       	movw	r24, r14
     4b4:	b6 01       	movw	r22, r12
     4b6:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     4ba:	9b 01       	movw	r18, r22
     4bc:	ac 01       	movw	r20, r24
     4be:	c5 01       	movw	r24, r10
     4c0:	b4 01       	movw	r22, r8
     4c2:	0e 94 c2 09 	call	0x1384	; 0x1384 <__addsf3>
     4c6:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <sqrt>
	
	GPS_Data->dist_wp = dist; 
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e5       	ldi	r19, 0x50	; 80
     4ce:	43 ec       	ldi	r20, 0xC3	; 195
     4d0:	57 e4       	ldi	r21, 0x47	; 71
     4d2:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__divsf3>
     4d6:	f8 01       	movw	r30, r16
     4d8:	60 a7       	std	Z+40, r22	; 0x28
     4da:	71 a7       	std	Z+41, r23	; 0x29
     4dc:	82 a7       	std	Z+42, r24	; 0x2a
     4de:	93 a7       	std	Z+43, r25	; 0x2b
}
     4e0:	68 96       	adiw	r28, 0x18	; 24
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	f8 94       	cli
     4e6:	de bf       	out	0x3e, r29	; 62
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	cd bf       	out	0x3d, r28	; 61
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	ff 90       	pop	r15
     4f6:	ef 90       	pop	r14
     4f8:	df 90       	pop	r13
     4fa:	cf 90       	pop	r12
     4fc:	bf 90       	pop	r11
     4fe:	af 90       	pop	r10
     500:	9f 90       	pop	r9
     502:	8f 90       	pop	r8
     504:	7f 90       	pop	r7
     506:	6f 90       	pop	r6
     508:	5f 90       	pop	r5
     50a:	4f 90       	pop	r4
     50c:	08 95       	ret

0000050e <bearing_to_wp>:

void bearing_to_wp(struct DATA *GPS_Data, coor_t WP){
     50e:	4f 92       	push	r4
     510:	5f 92       	push	r5
     512:	6f 92       	push	r6
     514:	7f 92       	push	r7
     516:	8f 92       	push	r8
     518:	9f 92       	push	r9
     51a:	af 92       	push	r10
     51c:	bf 92       	push	r11
     51e:	cf 92       	push	r12
     520:	df 92       	push	r13
     522:	ef 92       	push	r14
     524:	ff 92       	push	r15
     526:	0f 93       	push	r16
     528:	1f 93       	push	r17
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
     532:	a0 97       	sbiw	r28, 0x20	; 32
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	f8 94       	cli
     538:	de bf       	out	0x3e, r29	; 62
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	cd bf       	out	0x3d, r28	; 61
     53e:	8c 01       	movw	r16, r24
     540:	89 82       	std	Y+1, r8	; 0x01
     542:	9a 82       	std	Y+2, r9	; 0x02
     544:	ab 82       	std	Y+3, r10	; 0x03
     546:	bc 82       	std	Y+4, r11	; 0x04
     548:	cd 82       	std	Y+5, r12	; 0x05
     54a:	de 82       	std	Y+6, r13	; 0x06
     54c:	ef 82       	std	Y+7, r14	; 0x07
     54e:	f8 86       	std	Y+8, r15	; 0x08
     550:	4d 87       	std	Y+13, r20	; 0x0d
     552:	5e 87       	std	Y+14, r21	; 0x0e
     554:	6f 87       	std	Y+15, r22	; 0x0f
     556:	78 8b       	std	Y+16, r23	; 0x10
	
	int32_t a=  (WP.LAT_int - ( GPS_Data->LAT_FINAL ));
     558:	8d 80       	ldd	r8, Y+5	; 0x05
     55a:	9e 80       	ldd	r9, Y+6	; 0x06
     55c:	af 80       	ldd	r10, Y+7	; 0x07
     55e:	b8 84       	ldd	r11, Y+8	; 0x08
     560:	fc 01       	movw	r30, r24
     562:	82 85       	ldd	r24, Z+10	; 0x0a
     564:	93 85       	ldd	r25, Z+11	; 0x0b
     566:	a4 85       	ldd	r26, Z+12	; 0x0c
     568:	b5 85       	ldd	r27, Z+13	; 0x0d
     56a:	88 1a       	sub	r8, r24
     56c:	99 0a       	sbc	r9, r25
     56e:	aa 0a       	sbc	r10, r26
     570:	bb 0a       	sbc	r11, r27
	int32_t b=  (WP.LON_int - ( GPS_Data->LON_FINAL ));
     572:	cd 84       	ldd	r12, Y+13	; 0x0d
     574:	de 84       	ldd	r13, Y+14	; 0x0e
     576:	ef 84       	ldd	r14, Y+15	; 0x0f
     578:	f8 88       	ldd	r15, Y+16	; 0x10
     57a:	81 8d       	ldd	r24, Z+25	; 0x19
     57c:	92 8d       	ldd	r25, Z+26	; 0x1a
     57e:	a3 8d       	ldd	r26, Z+27	; 0x1b
     580:	b4 8d       	ldd	r27, Z+28	; 0x1c
     582:	c8 1a       	sub	r12, r24
     584:	d9 0a       	sbc	r13, r25
     586:	ea 0a       	sbc	r14, r26
     588:	fb 0a       	sbc	r15, r27
	
	//converting a b to dist in meters using formula for 1deg in m:
	if(first_bearing==0){
     58a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <__data_end>
     58e:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <__data_end+0x1>
     592:	89 2b       	or	r24, r25
     594:	09 f0       	breq	.+2      	; 0x598 <bearing_to_wp+0x8a>
     596:	96 c0       	rjmp	.+300    	; 0x6c4 <bearing_to_wp+0x1b6>
     598:	49 80       	ldd	r4, Y+1	; 0x01
     59a:	5a 80       	ldd	r5, Y+2	; 0x02
     59c:	6b 80       	ldd	r6, Y+3	; 0x03
     59e:	7c 80       	ldd	r7, Y+4	; 0x04
	m_pr_deg_lon = ((111.41288*cos(deg_to_rad(WP.LAT) ) ) - (0.09350*cos( deg_to_rad(3*WP.LAT) ) ) + (0.00012*cos( deg_to_rad(5*WP.LAT) ) )  )*1000;
     5a0:	2b ed       	ldi	r18, 0xDB	; 219
     5a2:	3f e0       	ldi	r19, 0x0F	; 15
     5a4:	49 e4       	ldi	r20, 0x49	; 73
     5a6:	50 e4       	ldi	r21, 0x40	; 64
     5a8:	c3 01       	movw	r24, r6
     5aa:	b2 01       	movw	r22, r4
     5ac:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     5b0:	20 e0       	ldi	r18, 0x00	; 0
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	44 e3       	ldi	r20, 0x34	; 52
     5b6:	53 e4       	ldi	r21, 0x43	; 67
     5b8:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__divsf3>
     5bc:	0e 94 a5 0a 	call	0x154a	; 0x154a <cos>
     5c0:	69 8b       	std	Y+17, r22	; 0x11
     5c2:	7a 8b       	std	Y+18, r23	; 0x12
     5c4:	8b 8b       	std	Y+19, r24	; 0x13
     5c6:	9c 8b       	std	Y+20, r25	; 0x14
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	40 e4       	ldi	r20, 0x40	; 64
     5ce:	50 e4       	ldi	r21, 0x40	; 64
     5d0:	c3 01       	movw	r24, r6
     5d2:	b2 01       	movw	r22, r4
     5d4:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     5d8:	2b ed       	ldi	r18, 0xDB	; 219
     5da:	3f e0       	ldi	r19, 0x0F	; 15
     5dc:	49 e4       	ldi	r20, 0x49	; 73
     5de:	50 e4       	ldi	r21, 0x40	; 64
     5e0:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	44 e3       	ldi	r20, 0x34	; 52
     5ea:	53 e4       	ldi	r21, 0x43	; 67
     5ec:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__divsf3>
     5f0:	0e 94 a5 0a 	call	0x154a	; 0x154a <cos>
     5f4:	69 8f       	std	Y+25, r22	; 0x19
     5f6:	7a 8f       	std	Y+26, r23	; 0x1a
     5f8:	8b 8f       	std	Y+27, r24	; 0x1b
     5fa:	9c 8f       	std	Y+28, r25	; 0x1c
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	40 ea       	ldi	r20, 0xA0	; 160
     602:	50 e4       	ldi	r21, 0x40	; 64
     604:	c3 01       	movw	r24, r6
     606:	b2 01       	movw	r22, r4
     608:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     60c:	2b ed       	ldi	r18, 0xDB	; 219
     60e:	3f e0       	ldi	r19, 0x0F	; 15
     610:	49 e4       	ldi	r20, 0x49	; 73
     612:	50 e4       	ldi	r21, 0x40	; 64
     614:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	44 e3       	ldi	r20, 0x34	; 52
     61e:	53 e4       	ldi	r21, 0x43	; 67
     620:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__divsf3>
     624:	0e 94 a5 0a 	call	0x154a	; 0x154a <cos>
     628:	6d 8f       	std	Y+29, r22	; 0x1d
     62a:	7e 8f       	std	Y+30, r23	; 0x1e
     62c:	8f 8f       	std	Y+31, r24	; 0x1f
     62e:	98 a3       	std	Y+32, r25	; 0x20
     630:	25 e6       	ldi	r18, 0x65	; 101
     632:	33 ed       	ldi	r19, 0xD3	; 211
     634:	4e ed       	ldi	r20, 0xDE	; 222
     636:	52 e4       	ldi	r21, 0x42	; 66
     638:	69 89       	ldd	r22, Y+17	; 0x11
     63a:	7a 89       	ldd	r23, Y+18	; 0x12
     63c:	8b 89       	ldd	r24, Y+19	; 0x13
     63e:	9c 89       	ldd	r25, Y+20	; 0x14
     640:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     644:	69 8b       	std	Y+17, r22	; 0x11
     646:	7a 8b       	std	Y+18, r23	; 0x12
     648:	8b 8b       	std	Y+19, r24	; 0x13
     64a:	9c 8b       	std	Y+20, r25	; 0x14
     64c:	2e ee       	ldi	r18, 0xEE	; 238
     64e:	3c e7       	ldi	r19, 0x7C	; 124
     650:	4f eb       	ldi	r20, 0xBF	; 191
     652:	5d e3       	ldi	r21, 0x3D	; 61
     654:	69 8d       	ldd	r22, Y+25	; 0x19
     656:	7a 8d       	ldd	r23, Y+26	; 0x1a
     658:	8b 8d       	ldd	r24, Y+27	; 0x1b
     65a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     65c:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     660:	9b 01       	movw	r18, r22
     662:	ac 01       	movw	r20, r24
     664:	69 89       	ldd	r22, Y+17	; 0x11
     666:	7a 89       	ldd	r23, Y+18	; 0x12
     668:	8b 89       	ldd	r24, Y+19	; 0x13
     66a:	9c 89       	ldd	r25, Y+20	; 0x14
     66c:	0e 94 c1 09 	call	0x1382	; 0x1382 <__subsf3>
     670:	69 8b       	std	Y+17, r22	; 0x11
     672:	7a 8b       	std	Y+18, r23	; 0x12
     674:	8b 8b       	std	Y+19, r24	; 0x13
     676:	9c 8b       	std	Y+20, r25	; 0x14
     678:	22 e8       	ldi	r18, 0x82	; 130
     67a:	38 ea       	ldi	r19, 0xA8	; 168
     67c:	4b ef       	ldi	r20, 0xFB	; 251
     67e:	58 e3       	ldi	r21, 0x38	; 56
     680:	6d 8d       	ldd	r22, Y+29	; 0x1d
     682:	7e 8d       	ldd	r23, Y+30	; 0x1e
     684:	8f 8d       	ldd	r24, Y+31	; 0x1f
     686:	98 a1       	ldd	r25, Y+32	; 0x20
     688:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     68c:	9b 01       	movw	r18, r22
     68e:	ac 01       	movw	r20, r24
     690:	69 89       	ldd	r22, Y+17	; 0x11
     692:	7a 89       	ldd	r23, Y+18	; 0x12
     694:	8b 89       	ldd	r24, Y+19	; 0x13
     696:	9c 89       	ldd	r25, Y+20	; 0x14
     698:	0e 94 c2 09 	call	0x1384	; 0x1384 <__addsf3>
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	4a e7       	ldi	r20, 0x7A	; 122
     6a2:	54 e4       	ldi	r21, 0x44	; 68
     6a4:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     6a8:	60 93 be 01 	sts	0x01BE, r22	; 0x8001be <m_pr_deg_lon>
     6ac:	70 93 bf 01 	sts	0x01BF, r23	; 0x8001bf <m_pr_deg_lon+0x1>
     6b0:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <m_pr_deg_lon+0x2>
     6b4:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <m_pr_deg_lon+0x3>
	first_bearing++;
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <__data_end+0x1>
     6c0:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <__data_end>
	}
	
	float c = a * m_pr_deg_lat;
     6c4:	c5 01       	movw	r24, r10
     6c6:	b4 01       	movw	r22, r8
     6c8:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__floatsisf>
     6cc:	23 e7       	ldi	r18, 0x73	; 115
     6ce:	3e e0       	ldi	r19, 0x0E	; 14
     6d0:	49 ed       	ldi	r20, 0xD9	; 217
     6d2:	57 e4       	ldi	r21, 0x47	; 71
     6d4:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     6d8:	4b 01       	movw	r8, r22
     6da:	5c 01       	movw	r10, r24
	float d = b * m_pr_deg_lon;
     6dc:	c7 01       	movw	r24, r14
     6de:	b6 01       	movw	r22, r12
     6e0:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__floatsisf>
     6e4:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <m_pr_deg_lon>
     6e8:	30 91 bf 01 	lds	r19, 0x01BF	; 0x8001bf <m_pr_deg_lon+0x1>
     6ec:	40 91 c0 01 	lds	r20, 0x01C0	; 0x8001c0 <m_pr_deg_lon+0x2>
     6f0:	50 91 c1 01 	lds	r21, 0x01C1	; 0x8001c1 <m_pr_deg_lon+0x3>
     6f4:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     6f8:	6b 01       	movw	r12, r22
     6fa:	7c 01       	movw	r14, r24
	
	if(c==0){ c=0.000001;}; //To avoid divide by 0 error.
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	a9 01       	movw	r20, r18
     702:	c5 01       	movw	r24, r10
     704:	b4 01       	movw	r22, r8
     706:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__cmpsf2>
     70a:	81 11       	cpse	r24, r1
     70c:	0a c0       	rjmp	.+20     	; 0x722 <bearing_to_wp+0x214>
     70e:	0f 2e       	mov	r0, r31
     710:	fd eb       	ldi	r31, 0xBD	; 189
     712:	8f 2e       	mov	r8, r31
     714:	f7 e3       	ldi	r31, 0x37	; 55
     716:	9f 2e       	mov	r9, r31
     718:	f6 e8       	ldi	r31, 0x86	; 134
     71a:	af 2e       	mov	r10, r31
     71c:	f5 e3       	ldi	r31, 0x35	; 53
     71e:	bf 2e       	mov	r11, r31
     720:	f0 2d       	mov	r31, r0
	if(d==0){ d=0.000001;};
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	a9 01       	movw	r20, r18
     728:	c7 01       	movw	r24, r14
     72a:	b6 01       	movw	r22, r12
     72c:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__cmpsf2>
     730:	88 23       	and	r24, r24
     732:	09 f4       	brne	.+2      	; 0x736 <bearing_to_wp+0x228>
     734:	c2 c0       	rjmp	.+388    	; 0x8ba <bearing_to_wp+0x3ac>
	
	float angle;
	if(d>0 && c>0){ //1. quatrant
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	a9 01       	movw	r20, r18
     73c:	c7 01       	movw	r24, r14
     73e:	b6 01       	movw	r22, r12
     740:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__gesf2>
     744:	18 16       	cp	r1, r24
     746:	ec f4       	brge	.+58     	; 0x782 <bearing_to_wp+0x274>
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	a9 01       	movw	r20, r18
     74e:	c5 01       	movw	r24, r10
     750:	b4 01       	movw	r22, r8
     752:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__gesf2>
     756:	18 16       	cp	r1, r24
     758:	a4 f4       	brge	.+40     	; 0x782 <bearing_to_wp+0x274>
		angle = atan2(d, c);
     75a:	a5 01       	movw	r20, r10
     75c:	94 01       	movw	r18, r8
     75e:	c7 01       	movw	r24, r14
     760:	b6 01       	movw	r22, r12
     762:	0e 94 41 0a 	call	0x1482	; 0x1482 <atan2>
     766:	6d 8b       	std	Y+21, r22	; 0x15
     768:	7e 8b       	std	Y+22, r23	; 0x16
     76a:	8f 8b       	std	Y+23, r24	; 0x17
     76c:	98 8f       	std	Y+24, r25	; 0x18
	}
	if(d<0 && c>0){ //2. quatrant
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	a9 01       	movw	r20, r18
     774:	c7 01       	movw	r24, r14
     776:	b6 01       	movw	r22, r12
     778:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__cmpsf2>
     77c:	88 23       	and	r24, r24
     77e:	9c f0       	brlt	.+38     	; 0x7a6 <bearing_to_wp+0x298>
     780:	23 c0       	rjmp	.+70     	; 0x7c8 <bearing_to_wp+0x2ba>
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	a9 01       	movw	r20, r18
     788:	c7 01       	movw	r24, r14
     78a:	b6 01       	movw	r22, r12
     78c:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__cmpsf2>
     790:	88 23       	and	r24, r24
     792:	d4 f4       	brge	.+52     	; 0x7c8 <bearing_to_wp+0x2ba>
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	a9 01       	movw	r20, r18
     79a:	c5 01       	movw	r24, r10
     79c:	b4 01       	movw	r22, r8
     79e:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__gesf2>
     7a2:	18 16       	cp	r1, r24
     7a4:	d4 f4       	brge	.+52     	; 0x7da <bearing_to_wp+0x2cc>
		angle = atan2(d, c);
     7a6:	a5 01       	movw	r20, r10
     7a8:	94 01       	movw	r18, r8
     7aa:	c7 01       	movw	r24, r14
     7ac:	b6 01       	movw	r22, r12
     7ae:	0e 94 41 0a 	call	0x1482	; 0x1482 <atan2>
		angle = (angle) + (2*PI);
     7b2:	2b ed       	ldi	r18, 0xDB	; 219
     7b4:	3f e0       	ldi	r19, 0x0F	; 15
     7b6:	49 ec       	ldi	r20, 0xC9	; 201
     7b8:	50 e4       	ldi	r21, 0x40	; 64
     7ba:	0e 94 c2 09 	call	0x1384	; 0x1384 <__addsf3>
     7be:	6d 8b       	std	Y+21, r22	; 0x15
     7c0:	7e 8b       	std	Y+22, r23	; 0x16
     7c2:	8f 8b       	std	Y+23, r24	; 0x17
     7c4:	98 8f       	std	Y+24, r25	; 0x18
     7c6:	09 c0       	rjmp	.+18     	; 0x7da <bearing_to_wp+0x2cc>
	}
	if(d<0 && c<0){ //3. quatrant
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	a9 01       	movw	r20, r18
     7ce:	c7 01       	movw	r24, r14
     7d0:	b6 01       	movw	r22, r12
     7d2:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__cmpsf2>
     7d6:	88 23       	and	r24, r24
     7d8:	3c f5       	brge	.+78     	; 0x828 <bearing_to_wp+0x31a>
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	a9 01       	movw	r20, r18
     7e0:	c5 01       	movw	r24, r10
     7e2:	b4 01       	movw	r22, r8
     7e4:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__cmpsf2>
     7e8:	88 23       	and	r24, r24
     7ea:	f4 f4       	brge	.+60     	; 0x828 <bearing_to_wp+0x31a>
		angle = atan2(d, c);
     7ec:	a5 01       	movw	r20, r10
     7ee:	94 01       	movw	r18, r8
     7f0:	c7 01       	movw	r24, r14
     7f2:	b6 01       	movw	r22, r12
     7f4:	0e 94 41 0a 	call	0x1482	; 0x1482 <atan2>
     7f8:	2b 01       	movw	r4, r22
     7fa:	3c 01       	movw	r6, r24
		angle = (angle) + (2*PI);
	}
	if(d>0 && c<0){ //4. quatrant
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	a9 01       	movw	r20, r18
     802:	c7 01       	movw	r24, r14
     804:	b6 01       	movw	r22, r12
     806:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__gesf2>
     80a:	18 16       	cp	r1, r24
     80c:	fc f0       	brlt	.+62     	; 0x84c <bearing_to_wp+0x33e>
		angle = atan2(d, c);
		angle = (angle) + (2*PI);
	}
	if(d<0 && c<0){ //3. quatrant
		angle = atan2(d, c);
		angle = (angle) + (2*PI);
     80e:	2b ed       	ldi	r18, 0xDB	; 219
     810:	3f e0       	ldi	r19, 0x0F	; 15
     812:	49 ec       	ldi	r20, 0xC9	; 201
     814:	50 e4       	ldi	r21, 0x40	; 64
     816:	c3 01       	movw	r24, r6
     818:	b2 01       	movw	r22, r4
     81a:	0e 94 c2 09 	call	0x1384	; 0x1384 <__addsf3>
     81e:	6d 8b       	std	Y+21, r22	; 0x15
     820:	7e 8b       	std	Y+22, r23	; 0x16
     822:	8f 8b       	std	Y+23, r24	; 0x17
     824:	98 8f       	std	Y+24, r25	; 0x18
     826:	1c c0       	rjmp	.+56     	; 0x860 <bearing_to_wp+0x352>
	}
	if(d>0 && c<0){ //4. quatrant
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	a9 01       	movw	r20, r18
     82e:	c7 01       	movw	r24, r14
     830:	b6 01       	movw	r22, r12
     832:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__gesf2>
     836:	18 16       	cp	r1, r24
     838:	9c f4       	brge	.+38     	; 0x860 <bearing_to_wp+0x352>
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	a9 01       	movw	r20, r18
     840:	c5 01       	movw	r24, r10
     842:	b4 01       	movw	r22, r8
     844:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__cmpsf2>
     848:	88 23       	and	r24, r24
     84a:	54 f4       	brge	.+20     	; 0x860 <bearing_to_wp+0x352>
		angle = atan2(d, c);
     84c:	a5 01       	movw	r20, r10
     84e:	94 01       	movw	r18, r8
     850:	c7 01       	movw	r24, r14
     852:	b6 01       	movw	r22, r12
     854:	0e 94 41 0a 	call	0x1482	; 0x1482 <atan2>
     858:	6d 8b       	std	Y+21, r22	; 0x15
     85a:	7e 8b       	std	Y+22, r23	; 0x16
     85c:	8f 8b       	std	Y+23, r24	; 0x17
     85e:	98 8f       	std	Y+24, r25	; 0x18
	}
	
	GPS_Data->bearing_wp = rad_to_deg(angle);
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	44 e3       	ldi	r20, 0x34	; 52
     866:	53 e4       	ldi	r21, 0x43	; 67
     868:	6d 89       	ldd	r22, Y+21	; 0x15
     86a:	7e 89       	ldd	r23, Y+22	; 0x16
     86c:	8f 89       	ldd	r24, Y+23	; 0x17
     86e:	98 8d       	ldd	r25, Y+24	; 0x18
     870:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     874:	2b ed       	ldi	r18, 0xDB	; 219
     876:	3f e0       	ldi	r19, 0x0F	; 15
     878:	49 e4       	ldi	r20, 0x49	; 73
     87a:	50 e4       	ldi	r21, 0x40	; 64
     87c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__divsf3>
     880:	f8 01       	movw	r30, r16
     882:	64 a7       	std	Z+44, r22	; 0x2c
     884:	75 a7       	std	Z+45, r23	; 0x2d
     886:	86 a7       	std	Z+46, r24	; 0x2e
     888:	97 a7       	std	Z+47, r25	; 0x2f
}
     88a:	2b c0       	rjmp	.+86     	; 0x8e2 <bearing_to_wp+0x3d4>
	if(c==0){ c=0.000001;}; //To avoid divide by 0 error.
	if(d==0){ d=0.000001;};
	
	float angle;
	if(d>0 && c>0){ //1. quatrant
		angle = atan2(d, c);
     88c:	a5 01       	movw	r20, r10
     88e:	94 01       	movw	r18, r8
     890:	6d eb       	ldi	r22, 0xBD	; 189
     892:	77 e3       	ldi	r23, 0x37	; 55
     894:	86 e8       	ldi	r24, 0x86	; 134
     896:	95 e3       	ldi	r25, 0x35	; 53
     898:	0e 94 41 0a 	call	0x1482	; 0x1482 <atan2>
     89c:	6d 8b       	std	Y+21, r22	; 0x15
     89e:	7e 8b       	std	Y+22, r23	; 0x16
     8a0:	8f 8b       	std	Y+23, r24	; 0x17
     8a2:	98 8f       	std	Y+24, r25	; 0x18
	
	float c = a * m_pr_deg_lat;
	float d = b * m_pr_deg_lon;
	
	if(c==0){ c=0.000001;}; //To avoid divide by 0 error.
	if(d==0){ d=0.000001;};
     8a4:	0f 2e       	mov	r0, r31
     8a6:	fd eb       	ldi	r31, 0xBD	; 189
     8a8:	cf 2e       	mov	r12, r31
     8aa:	f7 e3       	ldi	r31, 0x37	; 55
     8ac:	df 2e       	mov	r13, r31
     8ae:	f6 e8       	ldi	r31, 0x86	; 134
     8b0:	ef 2e       	mov	r14, r31
     8b2:	f5 e3       	ldi	r31, 0x35	; 53
     8b4:	ff 2e       	mov	r15, r31
     8b6:	f0 2d       	mov	r31, r0
     8b8:	87 cf       	rjmp	.-242    	; 0x7c8 <bearing_to_wp+0x2ba>
	
	float angle;
	if(d>0 && c>0){ //1. quatrant
     8ba:	20 e0       	ldi	r18, 0x00	; 0
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	a9 01       	movw	r20, r18
     8c0:	c5 01       	movw	r24, r10
     8c2:	b4 01       	movw	r22, r8
     8c4:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__gesf2>
     8c8:	18 16       	cp	r1, r24
     8ca:	04 f3       	brlt	.-64     	; 0x88c <bearing_to_wp+0x37e>
	
	float c = a * m_pr_deg_lat;
	float d = b * m_pr_deg_lon;
	
	if(c==0){ c=0.000001;}; //To avoid divide by 0 error.
	if(d==0){ d=0.000001;};
     8cc:	0f 2e       	mov	r0, r31
     8ce:	fd eb       	ldi	r31, 0xBD	; 189
     8d0:	cf 2e       	mov	r12, r31
     8d2:	f7 e3       	ldi	r31, 0x37	; 55
     8d4:	df 2e       	mov	r13, r31
     8d6:	f6 e8       	ldi	r31, 0x86	; 134
     8d8:	ef 2e       	mov	r14, r31
     8da:	f5 e3       	ldi	r31, 0x35	; 53
     8dc:	ff 2e       	mov	r15, r31
     8de:	f0 2d       	mov	r31, r0
     8e0:	50 cf       	rjmp	.-352    	; 0x782 <bearing_to_wp+0x274>
	if(d>0 && c<0){ //4. quatrant
		angle = atan2(d, c);
	}
	
	GPS_Data->bearing_wp = rad_to_deg(angle);
}
     8e2:	a0 96       	adiw	r28, 0x20	; 32
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	f8 94       	cli
     8e8:	de bf       	out	0x3e, r29	; 62
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	cd bf       	out	0x3d, r28	; 61
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	ff 90       	pop	r15
     8f8:	ef 90       	pop	r14
     8fa:	df 90       	pop	r13
     8fc:	cf 90       	pop	r12
     8fe:	bf 90       	pop	r11
     900:	af 90       	pop	r10
     902:	9f 90       	pop	r9
     904:	8f 90       	pop	r8
     906:	7f 90       	pop	r7
     908:	6f 90       	pop	r6
     90a:	5f 90       	pop	r5
     90c:	4f 90       	pop	r4
     90e:	08 95       	ret

00000910 <Transmit_dist_bearing_i2C>:

void Transmit_dist_bearing_i2C(struct DATA *GPS_Data)
{
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	ec 01       	movw	r28, r24
		//Convert dist and bearing  
		//Sending dist to DATA struct as long int 
		long dist_send;
		dist_send = (long)((GPS_Data->dist_wp));
		GPS_Data->dist_sendI2C = dist_send; 
     916:	68 a5       	ldd	r22, Y+40	; 0x28
     918:	79 a5       	ldd	r23, Y+41	; 0x29
     91a:	8a a5       	ldd	r24, Y+42	; 0x2a
     91c:	9b a5       	ldd	r25, Y+43	; 0x2b
     91e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__fixsfsi>
     922:	68 ab       	std	Y+48, r22	; 0x30
     924:	79 ab       	std	Y+49, r23	; 0x31
     926:	8a ab       	std	Y+50, r24	; 0x32
     928:	9b ab       	std	Y+51, r25	; 0x33
		
		// Sending bearing to DATA struct as int 
		int bearing_send;
		bearing_send = (int) (GPS_Data->bearing_wp);
		GPS_Data->bearing_sendI2C = bearing_send; 
     92a:	6c a5       	ldd	r22, Y+44	; 0x2c
     92c:	7d a5       	ldd	r23, Y+45	; 0x2d
     92e:	8e a5       	ldd	r24, Y+46	; 0x2e
     930:	9f a5       	ldd	r25, Y+47	; 0x2f
     932:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__fixsfsi>
     936:	7d ab       	std	Y+53, r23	; 0x35
     938:	6c ab       	std	Y+52, r22	; 0x34
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	08 95       	ret

00000940 <init_GPSDATA>:
		bytes=0;
	}
	else
	{
		set_data(status);
		bytes++;
     940:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <NMEA1+0x1>
     944:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <NMEA1>
     948:	08 95       	ret

0000094a <cal_checksum>:
     94a:	fc 01       	movw	r30, r24
     94c:	70 e0       	ldi	r23, 0x00	; 0
     94e:	9b 01       	movw	r18, r22
     950:	21 50       	subi	r18, 0x01	; 1
     952:	31 09       	sbc	r19, r1
     954:	16 16       	cp	r1, r22
     956:	17 06       	cpc	r1, r23
     958:	74 f4       	brge	.+28     	; 0x976 <cal_checksum+0x2c>
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	af 01       	movw	r20, r30
     95e:	02 2e       	mov	r0, r18
     960:	02 c0       	rjmp	.+4      	; 0x966 <cal_checksum+0x1c>
     962:	55 95       	asr	r21
     964:	47 95       	ror	r20
     966:	0a 94       	dec	r0
     968:	e2 f7       	brpl	.-8      	; 0x962 <cal_checksum+0x18>
     96a:	41 70       	andi	r20, 0x01	; 1
     96c:	84 27       	eor	r24, r20
     96e:	21 50       	subi	r18, 0x01	; 1
     970:	31 09       	sbc	r19, r1
     972:	a0 f7       	brcc	.-24     	; 0x95c <cal_checksum+0x12>
     974:	01 c0       	rjmp	.+2      	; 0x978 <cal_checksum+0x2e>
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	08 95       	ret

0000097c <set_opcode>:
     97c:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <opcode>
     980:	08 95       	ret

00000982 <Gps_send_Direction>:

void Gps_send_Direction(void)
{
	char data;
	
	if (bytes==2)
     982:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <bytes>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	71 f4       	brne	.+28     	; 0x9a6 <Gps_send_Direction+0x24>
	{
		char checksum;
		
		checksum = cal_checksum(NMEA1->bearing_sendI2C, 16);
     98a:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <NMEA1>
     98e:	f0 91 c4 01 	lds	r31, 0x01C4	; 0x8001c4 <NMEA1+0x1>
     992:	60 e1       	ldi	r22, 0x10	; 16
     994:	84 a9       	ldd	r24, Z+52	; 0x34
     996:	95 a9       	ldd	r25, Z+53	; 0x35
     998:	0e 94 a5 04 	call	0x94a	; 0x94a <cal_checksum>
		set_data(checksum);
     99c:	0e 94 4c 05 	call	0xa98	; 0xa98 <set_data>
		bytes=0;
     9a0:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <bytes>
     9a4:	08 95       	ret
	}
	else
	{
		data= NMEA1->bearing_sendI2C>> 8*bytes;
     9a6:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <NMEA1>
     9aa:	f0 91 c4 01 	lds	r31, 0x01C4	; 0x8001c4 <NMEA1+0x1>
		set_data(data);	
     9ae:	88 0f       	add	r24, r24
     9b0:	88 0f       	add	r24, r24
     9b2:	88 0f       	add	r24, r24
     9b4:	24 a9       	ldd	r18, Z+52	; 0x34
     9b6:	35 a9       	ldd	r19, Z+53	; 0x35
     9b8:	a9 01       	movw	r20, r18
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <Gps_send_Direction+0x3e>
     9bc:	55 95       	asr	r21
     9be:	47 95       	ror	r20
     9c0:	8a 95       	dec	r24
     9c2:	e2 f7       	brpl	.-8      	; 0x9bc <Gps_send_Direction+0x3a>
     9c4:	ca 01       	movw	r24, r20
     9c6:	0e 94 4c 05 	call	0xa98	; 0xa98 <set_data>
		bytes++;	
     9ca:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <bytes>
     9ce:	8f 5f       	subi	r24, 0xFF	; 255
     9d0:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <bytes>
     9d4:	08 95       	ret

000009d6 <Gps_send_Distance>:
}

 

void Gps_send_Distance(void)
{
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
	char data;
	
	if (bytes==4)
     9da:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <bytes>
     9de:	84 30       	cpi	r24, 0x04	; 4
     9e0:	71 f4       	brne	.+28     	; 0x9fe <Gps_send_Distance+0x28>
	{
		char checksum;
		checksum = cal_checksum(NMEA1->dist_sendI2C, 32);
     9e2:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <NMEA1>
     9e6:	f0 91 c4 01 	lds	r31, 0x01C4	; 0x8001c4 <NMEA1+0x1>
     9ea:	60 e2       	ldi	r22, 0x20	; 32
     9ec:	80 a9       	ldd	r24, Z+48	; 0x30
     9ee:	91 a9       	ldd	r25, Z+49	; 0x31
     9f0:	0e 94 a5 04 	call	0x94a	; 0x94a <cal_checksum>
		set_data(checksum);
     9f4:	0e 94 4c 05 	call	0xa98	; 0xa98 <set_data>
		bytes=0;
     9f8:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <bytes>
     9fc:	1e c0       	rjmp	.+60     	; 0xa3a <Gps_send_Distance+0x64>
	}
	else
	{
		data= NMEA1->dist_sendI2C>> 8*bytes;
     9fe:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <NMEA1>
     a02:	f0 91 c4 01 	lds	r31, 0x01C4	; 0x8001c4 <NMEA1+0x1>
		set_data(data);
     a06:	98 2f       	mov	r25, r24
     a08:	99 0f       	add	r25, r25
     a0a:	99 0f       	add	r25, r25
     a0c:	99 0f       	add	r25, r25
     a0e:	40 a9       	ldd	r20, Z+48	; 0x30
     a10:	51 a9       	ldd	r21, Z+49	; 0x31
     a12:	62 a9       	ldd	r22, Z+50	; 0x32
     a14:	73 a9       	ldd	r23, Z+51	; 0x33
     a16:	8a 01       	movw	r16, r20
     a18:	9b 01       	movw	r18, r22
     a1a:	04 c0       	rjmp	.+8      	; 0xa24 <Gps_send_Distance+0x4e>
     a1c:	35 95       	asr	r19
     a1e:	27 95       	ror	r18
     a20:	17 95       	ror	r17
     a22:	07 95       	ror	r16
     a24:	9a 95       	dec	r25
     a26:	d2 f7       	brpl	.-12     	; 0xa1c <Gps_send_Distance+0x46>
     a28:	d9 01       	movw	r26, r18
     a2a:	c8 01       	movw	r24, r16
     a2c:	0e 94 4c 05 	call	0xa98	; 0xa98 <set_data>
		bytes++;	
     a30:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <bytes>
     a34:	8f 5f       	subi	r24, 0xFF	; 255
     a36:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <bytes>
	}
	
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	08 95       	ret

00000a40 <i2c_service>:
}


void i2c_service(void)
{
	switch(opcode)
     a40:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <opcode>
     a44:	81 30       	cpi	r24, 0x01	; 1
     a46:	19 f0       	breq	.+6      	; 0xa4e <i2c_service+0xe>
     a48:	82 30       	cpi	r24, 0x02	; 2
     a4a:	21 f0       	breq	.+8      	; 0xa54 <i2c_service+0x14>
     a4c:	08 95       	ret
{	
	
	case 1:
	{
		Gps_send_Direction();
     a4e:	0e 94 c1 04 	call	0x982	; 0x982 <Gps_send_Direction>
		break;
     a52:	08 95       	ret
	}
	
	case 2:
	 {
		 Gps_send_Distance();
     a54:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Gps_send_Distance>
     a58:	08 95       	ret

00000a5a <I2C_recieve>:
		sei();
}

void i2c_transmit_data(uint8_t data)
{		
	TWDR = data;
     a5a:	cf 93       	push	r28
     a5c:	c8 2f       	mov	r28, r24
     a5e:	0e 94 be 04 	call	0x97c	; 0x97c <set_opcode>
     a62:	c0 93 c6 01 	sts	0x01C6, r28	; 0x8001c6 <data>
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <I2C_data_ACK_request>:
     a6a:	0e 94 20 05 	call	0xa40	; 0xa40 <i2c_service>
     a6e:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <data>
     a72:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
     a76:	08 95       	ret

00000a78 <I2C_data_NACK_request>:
     a78:	0e 94 20 05 	call	0xa40	; 0xa40 <i2c_service>
     a7c:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <data>
     a80:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
     a84:	08 95       	ret

00000a86 <i2c_init>:
     a86:	f8 94       	cli
     a88:	88 0f       	add	r24, r24
     a8a:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
     a8e:	85 ec       	ldi	r24, 0xC5	; 197
     a90:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     a94:	78 94       	sei
     a96:	08 95       	ret

00000a98 <set_data>:
}

void set_data(uint8_t value)
{
	data = value;
     a98:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <data>
     a9c:	08 95       	ret

00000a9e <__vector_24>:
}


 
ISR(TWI_vect)
{
     a9e:	1f 92       	push	r1
     aa0:	0f 92       	push	r0
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	0f 92       	push	r0
     aa6:	11 24       	eor	r1, r1
     aa8:	2f 93       	push	r18
     aaa:	3f 93       	push	r19
     aac:	4f 93       	push	r20
     aae:	5f 93       	push	r21
     ab0:	6f 93       	push	r22
     ab2:	7f 93       	push	r23
     ab4:	8f 93       	push	r24
     ab6:	9f 93       	push	r25
     ab8:	af 93       	push	r26
     aba:	bf 93       	push	r27
     abc:	ef 93       	push	r30
     abe:	ff 93       	push	r31
	switch(TW_STATUS)
     ac0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     ac4:	88 7f       	andi	r24, 0xF8	; 248
     ac6:	80 38       	cpi	r24, 0x80	; 128
     ac8:	49 f0       	breq	.+18     	; 0xadc <__vector_24+0x3e>
     aca:	18 f4       	brcc	.+6      	; 0xad2 <__vector_24+0x34>
     acc:	88 23       	and	r24, r24
     ace:	d1 f0       	breq	.+52     	; 0xb04 <__vector_24+0x66>
     ad0:	1f c0       	rjmp	.+62     	; 0xb10 <__vector_24+0x72>
     ad2:	88 3a       	cpi	r24, 0xA8	; 168
     ad4:	59 f0       	breq	.+22     	; 0xaec <__vector_24+0x4e>
     ad6:	88 3b       	cpi	r24, 0xB8	; 184
     ad8:	79 f0       	breq	.+30     	; 0xaf8 <__vector_24+0x5a>
     ada:	1a c0       	rjmp	.+52     	; 0xb10 <__vector_24+0x72>
	{
		case TW_SR_DATA_ACK:
		// received data from master, call the receive callback
		I2C_recieve(TWDR);
     adc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
     ae0:	0e 94 2d 05 	call	0xa5a	; 0xa5a <I2C_recieve>
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     ae4:	85 ec       	ldi	r24, 0xC5	; 197
     ae6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		break;
     aea:	15 c0       	rjmp	.+42     	; 0xb16 <__vector_24+0x78>
		
		case TW_ST_SLA_ACK:
		// master is requesting data using NACK,master expects only one additional byte. call the request callback
		I2C_data_NACK_request();
     aec:	0e 94 3c 05 	call	0xa78	; 0xa78 <I2C_data_NACK_request>
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     af0:	85 ec       	ldi	r24, 0xC5	; 197
     af2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		break;
     af6:	0f c0       	rjmp	.+30     	; 0xb16 <__vector_24+0x78>
		
		case TW_ST_DATA_ACK:
		// master is requesting data using ACK, master expects multiple bytes. call the request callback
		I2C_data_ACK_request();
     af8:	0e 94 35 05 	call	0xa6a	; 0xa6a <I2C_data_ACK_request>
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     afc:	85 ec       	ldi	r24, 0xC5	; 197
     afe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		break;
     b02:	09 c0       	rjmp	.+18     	; 0xb16 <__vector_24+0x78>
		
		case TW_BUS_ERROR:
		// some sort of erroneous state, prepare TWI to be readdressed
		TWCR = 0;
     b04:	ec eb       	ldi	r30, 0xBC	; 188
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	10 82       	st	Z, r1
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     b0a:	85 ec       	ldi	r24, 0xC5	; 197
     b0c:	80 83       	st	Z, r24
		break;
     b0e:	03 c0       	rjmp	.+6      	; 0xb16 <__vector_24+0x78>
		
		default:
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     b10:	85 ec       	ldi	r24, 0xC5	; 197
     b12:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		break;
	}
}
     b16:	ff 91       	pop	r31
     b18:	ef 91       	pop	r30
     b1a:	bf 91       	pop	r27
     b1c:	af 91       	pop	r26
     b1e:	9f 91       	pop	r25
     b20:	8f 91       	pop	r24
     b22:	7f 91       	pop	r23
     b24:	6f 91       	pop	r22
     b26:	5f 91       	pop	r21
     b28:	4f 91       	pop	r20
     b2a:	3f 91       	pop	r19
     b2c:	2f 91       	pop	r18
     b2e:	0f 90       	pop	r0
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	0f 90       	pop	r0
     b34:	1f 90       	pop	r1
     b36:	18 95       	reti

00000b38 <main>:
#include "Gps_send.h"
#include "i2c_atmega_328p_slave.h"
#define address 0x40

int main(void)
{
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	cb 5d       	subi	r28, 0xDB	; 219
     b42:	d1 09       	sbc	r29, r1
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	f8 94       	cli
     b48:	de bf       	out	0x3e, r29	; 62
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	cd bf       	out	0x3d, r28	; 61
	DDRC |=(1<<PORTC0); //Setting port C0 as an output
     b4e:	38 9a       	sbi	0x07, 0	; 7
	i2c_init(address);  //init i2c transmiission
     b50:	80 e4       	ldi	r24, 0x40	; 64
     b52:	0e 94 43 05 	call	0xa86	; 0xa86 <i2c_init>
	GPS_init();         //init GPS decoder
     b56:	0e 94 fd 00 	call	0x1fa	; 0x1fa <GPS_init>
	usart_init();       //INT USART to recieve data from c94-MP8 
     b5a:	0e 94 91 09 	call	0x1322	; 0x1322 <usart_init>

	coor_t WP[5];  //Struct defined in gps_func.h 

	// Waypoint definitions
	WP[1].LAT = 54.91;
     b5e:	87 ed       	ldi	r24, 0xD7	; 215
     b60:	93 ea       	ldi	r25, 0xA3	; 163
     b62:	ab e5       	ldi	r26, 0x5B	; 91
     b64:	b2 e4       	ldi	r27, 0x42	; 66
     b66:	89 8b       	std	Y+17, r24	; 0x11
     b68:	9a 8b       	std	Y+18, r25	; 0x12
     b6a:	ab 8b       	std	Y+19, r26	; 0x13
     b6c:	bc 8b       	std	Y+20, r27	; 0x14
	WP[1].LON = 9.78;
     b6e:	81 ee       	ldi	r24, 0xE1	; 225
     b70:	9a e7       	ldi	r25, 0x7A	; 122
     b72:	ac e1       	ldi	r26, 0x1C	; 28
     b74:	b1 e4       	ldi	r27, 0x41	; 65
     b76:	89 8f       	std	Y+25, r24	; 0x19
     b78:	9a 8f       	std	Y+26, r25	; 0x1a
     b7a:	ab 8f       	std	Y+27, r26	; 0x1b
     b7c:	bc 8f       	std	Y+28, r27	; 0x1c
	//WP[1].LON_int = 78044600;
	//EAST
	//WP[1].LAT_int = 91211500;
	//WP[1].LON_int = 78066100;
	//WEST
	WP[1].LAT_int = 91210900;
     b7e:	84 e9       	ldi	r24, 0x94	; 148
     b80:	94 ec       	ldi	r25, 0xC4	; 196
     b82:	af e6       	ldi	r26, 0x6F	; 111
     b84:	b5 e0       	ldi	r27, 0x05	; 5
     b86:	8d 8b       	std	Y+21, r24	; 0x15
     b88:	9e 8b       	std	Y+22, r25	; 0x16
     b8a:	af 8b       	std	Y+23, r26	; 0x17
     b8c:	b8 8f       	std	Y+24, r27	; 0x18
	WP[1].LON_int = 78022600;
     b8e:	88 ec       	ldi	r24, 0xC8	; 200
     b90:	97 e8       	ldi	r25, 0x87	; 135
     b92:	a6 ea       	ldi	r26, 0xA6	; 166
     b94:	b4 e0       	ldi	r27, 0x04	; 4
     b96:	8d 8f       	std	Y+29, r24	; 0x1d
     b98:	9e 8f       	std	Y+30, r25	; 0x1e
     b9a:	af 8f       	std	Y+31, r26	; 0x1f
     b9c:	b8 a3       	std	Y+32, r27	; 0x20
	
	int WP_NUM=1;   //Current WP number 
	char msg[85];  //GPGAA message from module
	DATA NMEA1;    //struct containing relevant data; LAT LON etc.
	
	init(&NMEA1); //INIT GPS_Data struct  
     b9e:	ce 01       	movw	r24, r28
     ba0:	8a 55       	subi	r24, 0x5A	; 90
     ba2:	9f 4f       	sbci	r25, 0xFF	; 255
     ba4:	0e 94 52 06 	call	0xca4	; 0xca4 <init>
	
	while(1)
	{
		usart_init(); 
		
		init_GPSDATA(&NMEA1);							//to expose NMEA1 to GPS_send.h
     ba8:	3e 01       	movw	r6, r28
     baa:	26 ea       	ldi	r18, 0xA6	; 166
     bac:	62 0e       	add	r6, r18
     bae:	71 1c       	adc	r7, r1
     bb0:	26 2c       	mov	r2, r6
     bb2:	37 2c       	mov	r3, r7
			bearing_to_wp(&NMEA1, WP[WP_NUM]);			//Calculating bearing from pos and WP
			Transmit_dist_bearing_i2C(&NMEA1);		//Transmitting via I2C
				
			atmel_start_init();
			
			printf("\ni2c - Dist: %ld \t Heading: %d       \n", NMEA1.dist_sendI2C, NMEA1.bearing_sendI2C);
     bb4:	0f 2e       	mov	r0, r31
     bb6:	f0 e2       	ldi	r31, 0x20	; 32
     bb8:	4f 2e       	mov	r4, r31
     bba:	f1 e0       	ldi	r31, 0x01	; 1
     bbc:	5f 2e       	mov	r5, r31
     bbe:	f0 2d       	mov	r31, r0
	
	init(&NMEA1); //INIT GPS_Data struct  
	
	while(1)
	{
		usart_init(); 
     bc0:	0e 94 91 09 	call	0x1322	; 0x1322 <usart_init>
		
		init_GPSDATA(&NMEA1);							//to expose NMEA1 to GPS_send.h
     bc4:	82 2d       	mov	r24, r2
     bc6:	93 2d       	mov	r25, r3
     bc8:	0e 94 a0 04 	call	0x940	; 0x940 <init_GPSDATA>
		
		while(!get_gps_message(msg));
     bcc:	ce 01       	movw	r24, r28
     bce:	8f 5a       	subi	r24, 0xAF	; 175
     bd0:	9f 4f       	sbci	r25, 0xFF	; 255
     bd2:	0e 94 08 01 	call	0x210	; 0x210 <get_gps_message>
     bd6:	89 2b       	or	r24, r25
     bd8:	c9 f3       	breq	.-14     	; 0xbcc <main+0x94>
		
		//PORTC &= ~(1<<PORTC0);						//Set data_ready_flag LOW When bearing and distance is being recieved and caluculated.
		
		if(GPS_Decode(msg, &NMEA1))						//Take message as char array and reference to data struct. Returns true if checksum is okay. AND if quality <=4
     bda:	62 2d       	mov	r22, r2
     bdc:	73 2d       	mov	r23, r3
     bde:	ce 01       	movw	r24, r28
     be0:	8f 5a       	subi	r24, 0xAF	; 175
     be2:	9f 4f       	sbci	r25, 0xFF	; 255
     be4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPS_Decode>
     be8:	89 2b       	or	r24, r25
     bea:	51 f3       	breq	.-44     	; 0xbc0 <main+0x88>
		{
			dist_to_wp(&NMEA1, WP[WP_NUM]);				//Calculating dist from pos and WP
     bec:	89 88       	ldd	r8, Y+17	; 0x11
     bee:	9a 88       	ldd	r9, Y+18	; 0x12
     bf0:	ab 88       	ldd	r10, Y+19	; 0x13
     bf2:	bc 88       	ldd	r11, Y+20	; 0x14
     bf4:	cd 88       	ldd	r12, Y+21	; 0x15
     bf6:	de 88       	ldd	r13, Y+22	; 0x16
     bf8:	ef 88       	ldd	r14, Y+23	; 0x17
     bfa:	f8 8c       	ldd	r15, Y+24	; 0x18
     bfc:	09 8d       	ldd	r16, Y+25	; 0x19
     bfe:	1a 8d       	ldd	r17, Y+26	; 0x1a
     c00:	2b 8d       	ldd	r18, Y+27	; 0x1b
     c02:	3c 8d       	ldd	r19, Y+28	; 0x1c
     c04:	4d 8d       	ldd	r20, Y+29	; 0x1d
     c06:	5e 8d       	ldd	r21, Y+30	; 0x1e
     c08:	6f 8d       	ldd	r22, Y+31	; 0x1f
     c0a:	78 a1       	ldd	r23, Y+32	; 0x20
     c0c:	82 2d       	mov	r24, r2
     c0e:	93 2d       	mov	r25, r3
     c10:	0e 94 5e 01 	call	0x2bc	; 0x2bc <dist_to_wp>
			bearing_to_wp(&NMEA1, WP[WP_NUM]);			//Calculating bearing from pos and WP
     c14:	89 88       	ldd	r8, Y+17	; 0x11
     c16:	9a 88       	ldd	r9, Y+18	; 0x12
     c18:	ab 88       	ldd	r10, Y+19	; 0x13
     c1a:	bc 88       	ldd	r11, Y+20	; 0x14
     c1c:	cd 88       	ldd	r12, Y+21	; 0x15
     c1e:	de 88       	ldd	r13, Y+22	; 0x16
     c20:	ef 88       	ldd	r14, Y+23	; 0x17
     c22:	f8 8c       	ldd	r15, Y+24	; 0x18
     c24:	09 8d       	ldd	r16, Y+25	; 0x19
     c26:	1a 8d       	ldd	r17, Y+26	; 0x1a
     c28:	2b 8d       	ldd	r18, Y+27	; 0x1b
     c2a:	3c 8d       	ldd	r19, Y+28	; 0x1c
     c2c:	4d 8d       	ldd	r20, Y+29	; 0x1d
     c2e:	5e 8d       	ldd	r21, Y+30	; 0x1e
     c30:	6f 8d       	ldd	r22, Y+31	; 0x1f
     c32:	78 a1       	ldd	r23, Y+32	; 0x20
     c34:	82 2d       	mov	r24, r2
     c36:	93 2d       	mov	r25, r3
     c38:	0e 94 87 02 	call	0x50e	; 0x50e <bearing_to_wp>
			Transmit_dist_bearing_i2C(&NMEA1);		//Transmitting via I2C
     c3c:	82 2d       	mov	r24, r2
     c3e:	93 2d       	mov	r25, r3
     c40:	0e 94 88 04 	call	0x910	; 0x910 <Transmit_dist_bearing_i2C>
				
			atmel_start_init();
     c44:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <atmel_start_init>
			
			printf("\ni2c - Dist: %ld \t Heading: %d       \n", NMEA1.dist_sendI2C, NMEA1.bearing_sendI2C);
     c48:	f3 01       	movw	r30, r6
     c4a:	85 a9       	ldd	r24, Z+53	; 0x35
     c4c:	8f 93       	push	r24
     c4e:	84 a9       	ldd	r24, Z+52	; 0x34
     c50:	8f 93       	push	r24
     c52:	83 a9       	ldd	r24, Z+51	; 0x33
     c54:	8f 93       	push	r24
     c56:	82 a9       	ldd	r24, Z+50	; 0x32
     c58:	8f 93       	push	r24
     c5a:	81 a9       	ldd	r24, Z+49	; 0x31
     c5c:	8f 93       	push	r24
     c5e:	80 a9       	ldd	r24, Z+48	; 0x30
     c60:	8f 93       	push	r24
     c62:	5f 92       	push	r5
     c64:	4f 92       	push	r4
     c66:	0e 94 87 12 	call	0x250e	; 0x250e <printf>
			printf("Dist: %f \t Heading: %f     \n", NMEA1.dist_wp, NMEA1.bearing_wp);
     c6a:	f3 01       	movw	r30, r6
     c6c:	87 a5       	ldd	r24, Z+47	; 0x2f
     c6e:	8f 93       	push	r24
     c70:	86 a5       	ldd	r24, Z+46	; 0x2e
     c72:	8f 93       	push	r24
     c74:	85 a5       	ldd	r24, Z+45	; 0x2d
     c76:	8f 93       	push	r24
     c78:	84 a5       	ldd	r24, Z+44	; 0x2c
     c7a:	8f 93       	push	r24
     c7c:	83 a5       	ldd	r24, Z+43	; 0x2b
     c7e:	8f 93       	push	r24
     c80:	82 a5       	ldd	r24, Z+42	; 0x2a
     c82:	8f 93       	push	r24
     c84:	81 a5       	ldd	r24, Z+41	; 0x29
     c86:	8f 93       	push	r24
     c88:	80 a5       	ldd	r24, Z+40	; 0x28
     c8a:	8f 93       	push	r24
     c8c:	87 e4       	ldi	r24, 0x47	; 71
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	9f 93       	push	r25
     c92:	8f 93       	push	r24
     c94:	0e 94 87 12 	call	0x250e	; 0x250e <printf>
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	8e cf       	rjmp	.-228    	; 0xbc0 <main+0x88>

00000ca4 <init>:
#include "NMEA_DECODER.h"
#include <stdio.h>
#include <string.h>

void init(struct DATA *GPS_Data)
{
     ca4:	fc 01       	movw	r30, r24
	GPS_Data->LAT_Float=0.0;
     ca6:	16 82       	std	Z+6, r1	; 0x06
     ca8:	17 82       	std	Z+7, r1	; 0x07
     caa:	10 86       	std	Z+8, r1	; 0x08
     cac:	11 86       	std	Z+9, r1	; 0x09
	GPS_Data->LAT=0;
     cae:	12 82       	std	Z+2, r1	; 0x02
     cb0:	13 82       	std	Z+3, r1	; 0x03
     cb2:	14 82       	std	Z+4, r1	; 0x04
     cb4:	15 82       	std	Z+5, r1	; 0x05
	GPS_Data->LAT_Min=0;
     cb6:	11 82       	std	Z+1, r1	; 0x01
	GPS_Data->LAT_Degree=0;
     cb8:	10 82       	st	Z, r1
	GPS_Data->LON_Float=0.0;
     cba:	15 8a       	std	Z+21, r1	; 0x15
     cbc:	16 8a       	std	Z+22, r1	; 0x16
     cbe:	17 8a       	std	Z+23, r1	; 0x17
     cc0:	10 8e       	std	Z+24, r1	; 0x18
	GPS_Data->LON=0;
     cc2:	11 8a       	std	Z+17, r1	; 0x11
     cc4:	12 8a       	std	Z+18, r1	; 0x12
     cc6:	13 8a       	std	Z+19, r1	; 0x13
     cc8:	14 8a       	std	Z+20, r1	; 0x14
	GPS_Data->LON_Min=0;
     cca:	10 8a       	std	Z+16, r1	; 0x10
	GPS_Data->LON_Degree=0;
     ccc:	17 86       	std	Z+15, r1	; 0x0f
	GPS_Data->ageOfCorrection = 0;
     cce:	17 8e       	std	Z+31, r1	; 0x1f
	GPS_Data->quality=0;
     cd0:	16 8e       	std	Z+30, r1	; 0x1e
	GPS_Data->Speed=0;
     cd2:	14 a2       	std	Z+36, r1	; 0x24
     cd4:	15 a2       	std	Z+37, r1	; 0x25
     cd6:	16 a2       	std	Z+38, r1	; 0x26
     cd8:	17 a2       	std	Z+39, r1	; 0x27
	GPS_Data->bearing_true=0;
     cda:	10 a2       	std	Z+32, r1	; 0x20
     cdc:	11 a2       	std	Z+33, r1	; 0x21
     cde:	12 a2       	std	Z+34, r1	; 0x22
     ce0:	13 a2       	std	Z+35, r1	; 0x23
	GPS_Data->bearing_sendI2C=0; 
     ce2:	15 aa       	std	Z+53, r1	; 0x35
     ce4:	14 aa       	std	Z+52, r1	; 0x34
	GPS_Data->dist_wp=0;
     ce6:	10 a6       	std	Z+40, r1	; 0x28
     ce8:	11 a6       	std	Z+41, r1	; 0x29
     cea:	12 a6       	std	Z+42, r1	; 0x2a
     cec:	13 a6       	std	Z+43, r1	; 0x2b
	GPS_Data->dist_sendI2C=0;
     cee:	10 aa       	std	Z+48, r1	; 0x30
     cf0:	11 aa       	std	Z+49, r1	; 0x31
     cf2:	12 aa       	std	Z+50, r1	; 0x32
     cf4:	13 aa       	std	Z+51, r1	; 0x33
	GPS_Data->bearing_wp=0;
     cf6:	14 a6       	std	Z+44, r1	; 0x2c
     cf8:	15 a6       	std	Z+45, r1	; 0x2d
     cfa:	16 a6       	std	Z+46, r1	; 0x2e
     cfc:	17 a6       	std	Z+47, r1	; 0x2f
     cfe:	08 95       	ret

00000d00 <checksum>:
{
	int i = 0;
	int checksum = 0;
	int nmea_sum = 0;
	
	if(msg[0] == '$')
     d00:	fc 01       	movw	r30, r24
     d02:	20 81       	ld	r18, Z
     d04:	24 32       	cpi	r18, 0x24	; 36
     d06:	61 f5       	brne	.+88     	; 0xd60 <checksum+0x60>
	{
		i++;
		while(msg[i] != '*')
     d08:	21 81       	ldd	r18, Z+1	; 0x01
     d0a:	2a 32       	cpi	r18, 0x2A	; 42
     d0c:	59 f1       	breq	.+86     	; 0xd64 <checksum+0x64>
     d0e:	dc 01       	movw	r26, r24
     d10:	12 96       	adiw	r26, 0x02	; 2
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	41 e0       	ldi	r20, 0x01	; 1
     d18:	50 e0       	ldi	r21, 0x00	; 0
		{
			checksum ^= (msg[i]-48);
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	20 53       	subi	r18, 0x30	; 48
     d1e:	31 09       	sbc	r19, r1
     d20:	62 27       	eor	r22, r18
     d22:	73 27       	eor	r23, r19
			i++;
     d24:	4f 5f       	subi	r20, 0xFF	; 255
     d26:	5f 4f       	sbci	r21, 0xFF	; 255
	int nmea_sum = 0;
	
	if(msg[0] == '$')
	{
		i++;
		while(msg[i] != '*')
     d28:	2d 91       	ld	r18, X+
     d2a:	2a 32       	cpi	r18, 0x2A	; 42
     d2c:	b1 f7       	brne	.-20     	; 0xd1a <checksum+0x1a>
     d2e:	1e c0       	rjmp	.+60     	; 0xd6c <checksum+0x6c>
			////////////LSB
			i++;
			
			if((msg[i]>='0') && (msg[i]<='9'))
			{
				nmea_sum += 1*(msg[i]-48);
     d30:	42 2f       	mov	r20, r18
     d32:	50 e0       	ldi	r21, 0x00	; 0
     d34:	40 53       	subi	r20, 0x30	; 48
     d36:	51 09       	sbc	r21, r1
     d38:	84 0f       	add	r24, r20
     d3a:	95 1f       	adc	r25, r21
			}
			
			if((msg[i]>='A') && (msg[i]<='F'))
     d3c:	3f eb       	ldi	r19, 0xBF	; 191
     d3e:	32 0f       	add	r19, r18
     d40:	36 30       	cpi	r19, 0x06	; 6
     d42:	28 f4       	brcc	.+10     	; 0xd4e <checksum+0x4e>
			{
				nmea_sum += 1*(msg[i]-55);
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	27 53       	subi	r18, 0x37	; 55
     d48:	31 09       	sbc	r19, r1
     d4a:	82 0f       	add	r24, r18
     d4c:	93 1f       	adc	r25, r19
			}
		}
		
		if(checksum==(nmea_sum-(2*48)))
		{
			return 1;
     d4e:	9c 01       	movw	r18, r24
     d50:	20 56       	subi	r18, 0x60	; 96
     d52:	31 09       	sbc	r19, r1
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	26 17       	cp	r18, r22
     d58:	37 07       	cpc	r19, r23
     d5a:	d1 f0       	breq	.+52     	; 0xd90 <checksum+0x90>
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	08 95       	ret
		{
			return 0;
		}
		
	}
return 0; 
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	08 95       	ret
	int nmea_sum = 0;
	
	if(msg[0] == '$')
	{
		i++;
		while(msg[i] != '*')
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	41 e0       	ldi	r20, 0x01	; 1
     d6a:	50 e0       	ldi	r21, 0x00	; 0
		
		if(msg[i] == '*')
		{
			////////////MSB
			i++;
			nmea_sum = 16*(msg[i]-48);
     d6c:	fc 01       	movw	r30, r24
     d6e:	e4 0f       	add	r30, r20
     d70:	f5 1f       	adc	r31, r21
     d72:	81 81       	ldd	r24, Z+1	; 0x01
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	c0 97       	sbiw	r24, 0x30	; 48
     d78:	82 95       	swap	r24
     d7a:	92 95       	swap	r25
     d7c:	90 7f       	andi	r25, 0xF0	; 240
     d7e:	98 27       	eor	r25, r24
     d80:	80 7f       	andi	r24, 0xF0	; 240
     d82:	98 27       	eor	r25, r24
				
			////////////LSB
			i++;
			
			if((msg[i]>='0') && (msg[i]<='9'))
     d84:	22 81       	ldd	r18, Z+2	; 0x02
     d86:	30 ed       	ldi	r19, 0xD0	; 208
     d88:	32 0f       	add	r19, r18
     d8a:	3a 30       	cpi	r19, 0x0A	; 10
     d8c:	88 f2       	brcs	.-94     	; 0xd30 <checksum+0x30>
     d8e:	d6 cf       	rjmp	.-84     	; 0xd3c <checksum+0x3c>
			return 0;
		}
		
	}
return 0; 
}
     d90:	08 95       	ret

00000d92 <MessageType>:

uint8_t MessageType(char* msg){
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
     d9a:	64 97       	sbiw	r28, 0x14	; 20
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	cd bf       	out	0x3d, r28	; 61
	if(msg[0]=='$')
     da6:	fc 01       	movw	r30, r24
     da8:	20 81       	ld	r18, Z
     daa:	24 32       	cpi	r18, 0x24	; 36
     dac:	09 f0       	breq	.+2      	; 0xdb0 <MessageType+0x1e>
     dae:	55 c0       	rjmp	.+170    	; 0xe5a <MessageType+0xc8>
     db0:	dc 01       	movw	r26, r24
     db2:	11 96       	adiw	r26, 0x01	; 1
     db4:	fe 01       	movw	r30, r28
     db6:	70 96       	adiw	r30, 0x10	; 16
     db8:	9e 01       	movw	r18, r28
     dba:	2b 5e       	subi	r18, 0xEB	; 235
     dbc:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		char msg_type[5];
		for(int k = 0; k<5; k++)
		{
			if(msg[k+1]>='A' && msg[k+1]<='Z')	//Make sure range
     dbe:	8d 91       	ld	r24, X+
     dc0:	9f eb       	ldi	r25, 0xBF	; 191
     dc2:	98 0f       	add	r25, r24
     dc4:	9a 31       	cpi	r25, 0x1A	; 26
     dc6:	08 f4       	brcc	.+2      	; 0xdca <MessageType+0x38>
			{
				msg_type[k]	= msg[k+1];
     dc8:	80 83       	st	Z, r24
     dca:	31 96       	adiw	r30, 0x01	; 1

uint8_t MessageType(char* msg){
	if(msg[0]=='$')
	{
		char msg_type[5];
		for(int k = 0; k<5; k++)
     dcc:	e2 17       	cp	r30, r18
     dce:	f3 07       	cpc	r31, r19
     dd0:	b1 f7       	brne	.-20     	; 0xdbe <MessageType+0x2c>
			else
			{
				//printf("Failed message type\n");
			}
		}
		char msg_gpgga[5] = "GPGGA";
     dd2:	85 e0       	ldi	r24, 0x05	; 5
     dd4:	ee e0       	ldi	r30, 0x0E	; 14
     dd6:	f1 e0       	ldi	r31, 0x01	; 1
     dd8:	de 01       	movw	r26, r28
     dda:	1b 96       	adiw	r26, 0x0b	; 11
     ddc:	01 90       	ld	r0, Z+
     dde:	0d 92       	st	X+, r0
     de0:	8a 95       	dec	r24
     de2:	e1 f7       	brne	.-8      	; 0xddc <MessageType+0x4a>
		char msg_gpvtg[5] = "GPVTG";
     de4:	85 e0       	ldi	r24, 0x05	; 5
     de6:	e4 e1       	ldi	r30, 0x14	; 20
     de8:	f1 e0       	ldi	r31, 0x01	; 1
     dea:	de 01       	movw	r26, r28
     dec:	16 96       	adiw	r26, 0x06	; 6
     dee:	01 90       	ld	r0, Z+
     df0:	0d 92       	st	X+, r0
     df2:	8a 95       	dec	r24
     df4:	e1 f7       	brne	.-8      	; 0xdee <MessageType+0x5c>
		char msg_gngga[5] = "GNGGA";
     df6:	85 e0       	ldi	r24, 0x05	; 5
     df8:	ea e1       	ldi	r30, 0x1A	; 26
     dfa:	f1 e0       	ldi	r31, 0x01	; 1
     dfc:	de 01       	movw	r26, r28
     dfe:	11 96       	adiw	r26, 0x01	; 1
     e00:	01 90       	ld	r0, Z+
     e02:	0d 92       	st	X+, r0
     e04:	8a 95       	dec	r24
     e06:	e1 f7       	brne	.-8      	; 0xe00 <MessageType+0x6e>
		
		if(strncmp(msg_type, msg_gpgga, 5) == 0)
     e08:	45 e0       	ldi	r20, 0x05	; 5
     e0a:	50 e0       	ldi	r21, 0x00	; 0
     e0c:	be 01       	movw	r22, r28
     e0e:	65 5f       	subi	r22, 0xF5	; 245
     e10:	7f 4f       	sbci	r23, 0xFF	; 255
     e12:	ce 01       	movw	r24, r28
     e14:	40 96       	adiw	r24, 0x10	; 16
     e16:	0e 94 32 12 	call	0x2464	; 0x2464 <strncmp>
     e1a:	89 2b       	or	r24, r25
     e1c:	c1 f0       	breq	.+48     	; 0xe4e <MessageType+0xbc>
		{
			return GPGGA;
		}
		if(strncmp(msg_type, msg_gpvtg, 5) == 0)
     e1e:	45 e0       	ldi	r20, 0x05	; 5
     e20:	50 e0       	ldi	r21, 0x00	; 0
     e22:	be 01       	movw	r22, r28
     e24:	6a 5f       	subi	r22, 0xFA	; 250
     e26:	7f 4f       	sbci	r23, 0xFF	; 255
     e28:	ce 01       	movw	r24, r28
     e2a:	40 96       	adiw	r24, 0x10	; 16
     e2c:	0e 94 32 12 	call	0x2464	; 0x2464 <strncmp>
     e30:	89 2b       	or	r24, r25
     e32:	79 f0       	breq	.+30     	; 0xe52 <MessageType+0xc0>
		{
			return GPVTG;
		}
		if(strncmp(msg_type, msg_gngga, 5) == 0)
     e34:	45 e0       	ldi	r20, 0x05	; 5
     e36:	50 e0       	ldi	r21, 0x00	; 0
     e38:	be 01       	movw	r22, r28
     e3a:	6f 5f       	subi	r22, 0xFF	; 255
     e3c:	7f 4f       	sbci	r23, 0xFF	; 255
     e3e:	ce 01       	movw	r24, r28
     e40:	40 96       	adiw	r24, 0x10	; 16
     e42:	0e 94 32 12 	call	0x2464	; 0x2464 <strncmp>
     e46:	89 2b       	or	r24, r25
     e48:	31 f0       	breq	.+12     	; 0xe56 <MessageType+0xc4>
		{
			return GPGGA;
		}
	}
	return 0; 
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	07 c0       	rjmp	.+14     	; 0xe5c <MessageType+0xca>
		char msg_gpvtg[5] = "GPVTG";
		char msg_gngga[5] = "GNGGA";
		
		if(strncmp(msg_type, msg_gpgga, 5) == 0)
		{
			return GPGGA;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	05 c0       	rjmp	.+10     	; 0xe5c <MessageType+0xca>
		}
		if(strncmp(msg_type, msg_gpvtg, 5) == 0)
		{
			return GPVTG;
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	03 c0       	rjmp	.+6      	; 0xe5c <MessageType+0xca>
		}
		if(strncmp(msg_type, msg_gngga, 5) == 0)
		{
			return GPGGA;
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	01 c0       	rjmp	.+2      	; 0xe5c <MessageType+0xca>
		}
	}
	return 0; 
     e5a:	80 e0       	ldi	r24, 0x00	; 0
}
     e5c:	64 96       	adiw	r28, 0x14	; 20
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	08 95       	ret

00000e6e <convert>:

void convert(struct DATA *GPS_Data)
{
     e6e:	cf 92       	push	r12
     e70:	df 92       	push	r13
     e72:	ef 92       	push	r14
     e74:	ff 92       	push	r15
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	ec 01       	movw	r28, r24
    //GPS_Data->LON_Float = GPS_Data->LON_Degree + (GPS_Data->LON_Min/60.00000) + (GPS_Data->LON/6000000.0);
	//GPS_Data->LON_FINAL =  ((GPS_Data->LON_Min/60.00000) + (GPS_Data->LON/6000000.0))  *1000000;
	//GPS_Data->LAT_FINAL = ((GPS_Data->LAT_Min/60.00000) + (GPS_Data->LAT/6000000.0)) *1000000;
	//GPS_Data->LON_Float = (GPS_Data->LON_Min + (GPS_Data->LON/100000.0))/60;
	//GPS_Data->LON_FINAL = GPS_Data->LAT_Float;
	GPS_Data->LON_Float = GPS_Data->LON_Min + (GPS_Data->LON/100000.0);
     e7c:	69 89       	ldd	r22, Y+17	; 0x11
     e7e:	7a 89       	ldd	r23, Y+18	; 0x12
     e80:	8b 89       	ldd	r24, Y+19	; 0x13
     e82:	9c 89       	ldd	r25, Y+20	; 0x14
     e84:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__floatunsisf>
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e5       	ldi	r19, 0x50	; 80
     e8c:	43 ec       	ldi	r20, 0xC3	; 195
     e8e:	57 e4       	ldi	r21, 0x47	; 71
     e90:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__divsf3>
     e94:	6b 01       	movw	r12, r22
     e96:	7c 01       	movw	r14, r24
     e98:	68 89       	ldd	r22, Y+16	; 0x10
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__floatsisf>
     ea4:	9b 01       	movw	r18, r22
     ea6:	ac 01       	movw	r20, r24
     ea8:	c7 01       	movw	r24, r14
     eaa:	b6 01       	movw	r22, r12
     eac:	0e 94 c2 09 	call	0x1384	; 0x1384 <__addsf3>
     eb0:	6d 8b       	std	Y+21, r22	; 0x15
     eb2:	7e 8b       	std	Y+22, r23	; 0x16
     eb4:	8f 8b       	std	Y+23, r24	; 0x17
     eb6:	98 8f       	std	Y+24, r25	; 0x18
	GPS_Data->LON_FINAL = (GPS_Data->LON_Float*100000000)/60;
     eb8:	20 e2       	ldi	r18, 0x20	; 32
     eba:	3c eb       	ldi	r19, 0xBC	; 188
     ebc:	4e eb       	ldi	r20, 0xBE	; 190
     ebe:	5c e4       	ldi	r21, 0x4C	; 76
     ec0:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e7       	ldi	r20, 0x70	; 112
     eca:	52 e4       	ldi	r21, 0x42	; 66
     ecc:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__divsf3>
     ed0:	0e 94 23 0b 	call	0x1646	; 0x1646 <__fixunssfsi>
     ed4:	69 8f       	std	Y+25, r22	; 0x19
     ed6:	7a 8f       	std	Y+26, r23	; 0x1a
     ed8:	8b 8f       	std	Y+27, r24	; 0x1b
     eda:	9c 8f       	std	Y+28, r25	; 0x1c
	
	GPS_Data->LAT_Float = GPS_Data->LAT_Min + (GPS_Data->LAT/100000.0);
     edc:	6a 81       	ldd	r22, Y+2	; 0x02
     ede:	7b 81       	ldd	r23, Y+3	; 0x03
     ee0:	8c 81       	ldd	r24, Y+4	; 0x04
     ee2:	9d 81       	ldd	r25, Y+5	; 0x05
     ee4:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__floatunsisf>
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e5       	ldi	r19, 0x50	; 80
     eec:	43 ec       	ldi	r20, 0xC3	; 195
     eee:	57 e4       	ldi	r21, 0x47	; 71
     ef0:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__divsf3>
     ef4:	6b 01       	movw	r12, r22
     ef6:	7c 01       	movw	r14, r24
     ef8:	69 81       	ldd	r22, Y+1	; 0x01
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__floatsisf>
     f04:	9b 01       	movw	r18, r22
     f06:	ac 01       	movw	r20, r24
     f08:	c7 01       	movw	r24, r14
     f0a:	b6 01       	movw	r22, r12
     f0c:	0e 94 c2 09 	call	0x1384	; 0x1384 <__addsf3>
     f10:	6e 83       	std	Y+6, r22	; 0x06
     f12:	7f 83       	std	Y+7, r23	; 0x07
     f14:	88 87       	std	Y+8, r24	; 0x08
     f16:	99 87       	std	Y+9, r25	; 0x09
	GPS_Data->LAT_FINAL = (GPS_Data->LAT_Float*100000000)/60;
     f18:	20 e2       	ldi	r18, 0x20	; 32
     f1a:	3c eb       	ldi	r19, 0xBC	; 188
     f1c:	4e eb       	ldi	r20, 0xBE	; 190
     f1e:	5c e4       	ldi	r21, 0x4C	; 76
     f20:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	40 e7       	ldi	r20, 0x70	; 112
     f2a:	52 e4       	ldi	r21, 0x42	; 66
     f2c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__divsf3>
     f30:	0e 94 23 0b 	call	0x1646	; 0x1646 <__fixunssfsi>
     f34:	6a 87       	std	Y+10, r22	; 0x0a
     f36:	7b 87       	std	Y+11, r23	; 0x0b
     f38:	8c 87       	std	Y+12, r24	; 0x0c
     f3a:	9d 87       	std	Y+13, r25	; 0x0d
}
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	ff 90       	pop	r15
     f42:	ef 90       	pop	r14
     f44:	df 90       	pop	r13
     f46:	cf 90       	pop	r12
     f48:	08 95       	ret

00000f4a <GPS_Decode>:

int GPS_Decode(char* msg, struct DATA *GPS_Data)
{
     f4a:	2f 92       	push	r2
     f4c:	3f 92       	push	r3
     f4e:	4f 92       	push	r4
     f50:	5f 92       	push	r5
     f52:	6f 92       	push	r6
     f54:	7f 92       	push	r7
     f56:	8f 92       	push	r8
     f58:	9f 92       	push	r9
     f5a:	af 92       	push	r10
     f5c:	bf 92       	push	r11
     f5e:	cf 92       	push	r12
     f60:	df 92       	push	r13
     f62:	ef 92       	push	r14
     f64:	ff 92       	push	r15
     f66:	0f 93       	push	r16
     f68:	1f 93       	push	r17
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <GPS_Decode+0x26>
     f70:	00 d0       	rcall	.+0      	; 0xf72 <GPS_Decode+0x28>
     f72:	00 d0       	rcall	.+0      	; 0xf74 <GPS_Decode+0x2a>
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	8c 01       	movw	r16, r24
     f7a:	7b 01       	movw	r14, r22
	///////////////////Checksum////////////////////////
	if(checksum(msg))  //! to disable during testing 
     f7c:	0e 94 80 06 	call	0xd00	; 0xd00 <checksum>
     f80:	88 23       	and	r24, r24
     f82:	09 f4       	brne	.+2      	; 0xf86 <GPS_Decode+0x3c>
     f84:	64 c1       	rjmp	.+712    	; 0x124e <GPS_Decode+0x304>
	{
		uint8_t type = MessageType(msg);
     f86:	c8 01       	movw	r24, r16
     f88:	0e 94 c9 06 	call	0xd92	; 0xd92 <MessageType>
     f8c:	89 83       	std	Y+1, r24	; 0x01
		init(GPS_Data);
     f8e:	c7 01       	movw	r24, r14
     f90:	0e 94 52 06 	call	0xca4	; 0xca4 <init>
		
	switch(type)
     f94:	29 81       	ldd	r18, Y+1	; 0x01
     f96:	21 30       	cpi	r18, 0x01	; 1
     f98:	09 f0       	breq	.+2      	; 0xf9c <GPS_Decode+0x52>
     f9a:	4d c1       	rjmp	.+666    	; 0x1236 <GPS_Decode+0x2ec>
				uint8_t LonCount=0;
				uint8_t LonDegree = 100;
				uint8_t LonHour = 10;
				uint32_t LonMin = 10000;
								
				while(msg[i] != '*')
     f9c:	d8 01       	movw	r26, r16
     f9e:	16 96       	adiw	r26, 0x06	; 6
     fa0:	8c 91       	ld	r24, X
     fa2:	8a 32       	cpi	r24, 0x2A	; 42
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <GPS_Decode+0x5e>
     fa6:	47 c1       	rjmp	.+654    	; 0x1236 <GPS_Decode+0x2ec>
     fa8:	0f 2e       	mov	r0, r31
     faa:	f0 e1       	ldi	r31, 0x10	; 16
     fac:	4f 2e       	mov	r4, r31
     fae:	f7 e2       	ldi	r31, 0x27	; 39
     fb0:	5f 2e       	mov	r5, r31
     fb2:	61 2c       	mov	r6, r1
     fb4:	71 2c       	mov	r7, r1
     fb6:	f0 2d       	mov	r31, r0
     fb8:	ba e0       	ldi	r27, 0x0A	; 10
     fba:	bc 83       	std	Y+4, r27	; 0x04
     fbc:	e4 e6       	ldi	r30, 0x64	; 100
     fbe:	e9 83       	std	Y+1, r30	; 0x01
     fc0:	c1 2c       	mov	r12, r1
     fc2:	0f 2e       	mov	r0, r31
     fc4:	f0 e1       	ldi	r31, 0x10	; 16
     fc6:	8f 2e       	mov	r8, r31
     fc8:	f7 e2       	ldi	r31, 0x27	; 39
     fca:	9f 2e       	mov	r9, r31
     fcc:	a1 2c       	mov	r10, r1
     fce:	b1 2c       	mov	r11, r1
     fd0:	f0 2d       	mov	r31, r0
     fd2:	fa e0       	ldi	r31, 0x0A	; 10
     fd4:	fb 83       	std	Y+3, r31	; 0x03
     fd6:	2a e0       	ldi	r18, 0x0A	; 10
     fd8:	2a 83       	std	Y+2, r18	; 0x02
     fda:	d1 2c       	mov	r13, r1
     fdc:	0f 2e       	mov	r0, r31
     fde:	fa e0       	ldi	r31, 0x0A	; 10
     fe0:	3f 2e       	mov	r3, r31
     fe2:	f0 2d       	mov	r31, r0
     fe4:	1e 82       	std	Y+6, r1	; 0x06
     fe6:	96 e0       	ldi	r25, 0x06	; 6
									LonDegree /= 10;
								}
								if((LonCount>=3) && (LonCount<5))
								{
									GPS_Data->LON_Min += (msg[i]-48) * LonHour;
									LonHour /= 10;
     fe8:	0f 2e       	mov	r0, r31
     fea:	fd ec       	ldi	r31, 0xCD	; 205
     fec:	2f 2e       	mov	r2, r31
     fee:	f0 2d       	mov	r31, r0
     ff0:	9d 83       	std	Y+5, r25	; 0x05
				uint8_t LonHour = 10;
				uint32_t LonMin = 10000;
								
				while(msg[i] != '*')
				{
					if(msg[i] == ',')
     ff2:	8c 32       	cpi	r24, 0x2C	; 44
     ff4:	31 f4       	brne	.+12     	; 0x1002 <GPS_Decode+0xb8>
					{
						CommaCounter++;
     ff6:	be 81       	ldd	r27, Y+6	; 0x06
     ff8:	bf 5f       	subi	r27, 0xFF	; 255
     ffa:	be 83       	std	Y+6, r27	; 0x06
						i++;
     ffc:	ed 81       	ldd	r30, Y+5	; 0x05
     ffe:	ef 5f       	subi	r30, 0xFF	; 255
    1000:	ed 83       	std	Y+5, r30	; 0x05
					}
					
					///////////COMMA SWITCH START!////////////////////////
					switch(CommaCounter)
    1002:	fe 81       	ldd	r31, Y+6	; 0x06
    1004:	f4 30       	cpi	r31, 0x04	; 4
    1006:	09 f4       	brne	.+2      	; 0x100a <GPS_Decode+0xc0>
    1008:	7c c0       	rjmp	.+248    	; 0x1102 <GPS_Decode+0x1b8>
    100a:	30 f4       	brcc	.+12     	; 0x1018 <GPS_Decode+0xce>
    100c:	f2 30       	cpi	r31, 0x02	; 2
    100e:	71 f0       	breq	.+28     	; 0x102c <GPS_Decode+0xe2>
    1010:	f3 30       	cpi	r31, 0x03	; 3
    1012:	09 f4       	brne	.+2      	; 0x1016 <GPS_Decode+0xcc>
    1014:	68 c0       	rjmp	.+208    	; 0x10e6 <GPS_Decode+0x19c>
    1016:	05 c1       	rjmp	.+522    	; 0x1222 <GPS_Decode+0x2d8>
    1018:	2e 81       	ldd	r18, Y+6	; 0x06
    101a:	26 30       	cpi	r18, 0x06	; 6
    101c:	09 f4       	brne	.+2      	; 0x1020 <GPS_Decode+0xd6>
    101e:	dd c0       	rjmp	.+442    	; 0x11da <GPS_Decode+0x290>
    1020:	08 f4       	brcc	.+2      	; 0x1024 <GPS_Decode+0xda>
    1022:	ce c0       	rjmp	.+412    	; 0x11c0 <GPS_Decode+0x276>
    1024:	2d 30       	cpi	r18, 0x0D	; 13
    1026:	09 f4       	brne	.+2      	; 0x102a <GPS_Decode+0xe0>
    1028:	e3 c0       	rjmp	.+454    	; 0x11f0 <GPS_Decode+0x2a6>
    102a:	fb c0       	rjmp	.+502    	; 0x1222 <GPS_Decode+0x2d8>
					{
						case 2:		//Latitude
						{
							if((msg[i] != '.') && (msg[i] != ','))
    102c:	f8 01       	movw	r30, r16
    102e:	8d 81       	ldd	r24, Y+5	; 0x05
    1030:	e8 0f       	add	r30, r24
    1032:	f1 1d       	adc	r31, r1
    1034:	80 81       	ld	r24, Z
    1036:	98 2f       	mov	r25, r24
    1038:	9d 7f       	andi	r25, 0xFD	; 253
    103a:	9c 32       	cpi	r25, 0x2C	; 44
    103c:	09 f4       	brne	.+2      	; 0x1040 <GPS_Decode+0xf6>
    103e:	f1 c0       	rjmp	.+482    	; 0x1222 <GPS_Decode+0x2d8>
							{
								if(LatCount<2)
    1040:	91 e0       	ldi	r25, 0x01	; 1
    1042:	9d 15       	cp	r25, r13
    1044:	88 f0       	brcs	.+34     	; 0x1068 <GPS_Decode+0x11e>
								{
									GPS_Data->LAT_Degree += (msg[i]-48) * LatDegree;
    1046:	80 53       	subi	r24, 0x30	; 48
    1048:	d7 01       	movw	r26, r14
    104a:	9c 91       	ld	r25, X
    104c:	ba 81       	ldd	r27, Y+2	; 0x02
    104e:	8b 9f       	mul	r24, r27
    1050:	90 0d       	add	r25, r0
    1052:	11 24       	eor	r1, r1
    1054:	d7 01       	movw	r26, r14
    1056:	9c 93       	st	X, r25
									LatDegree /= 10;
    1058:	ba 81       	ldd	r27, Y+2	; 0x02
    105a:	b2 9d       	mul	r27, r2
    105c:	81 2d       	mov	r24, r1
    105e:	11 24       	eor	r1, r1
    1060:	86 95       	lsr	r24
    1062:	86 95       	lsr	r24
    1064:	86 95       	lsr	r24
    1066:	8a 83       	std	Y+2, r24	; 0x02
								}
								if((LatCount>=2) && (LatCount<4))
    1068:	8e ef       	ldi	r24, 0xFE	; 254
    106a:	8d 0d       	add	r24, r13
    106c:	82 30       	cpi	r24, 0x02	; 2
    106e:	a0 f4       	brcc	.+40     	; 0x1098 <GPS_Decode+0x14e>
								{
									GPS_Data->LAT_Min += (msg[i]-48) * LatHour;
    1070:	90 81       	ld	r25, Z
    1072:	90 53       	subi	r25, 0x30	; 48
    1074:	d7 01       	movw	r26, r14
    1076:	11 96       	adiw	r26, 0x01	; 1
    1078:	8c 91       	ld	r24, X
    107a:	bb 81       	ldd	r27, Y+3	; 0x03
    107c:	9b 9f       	mul	r25, r27
    107e:	80 0d       	add	r24, r0
    1080:	11 24       	eor	r1, r1
    1082:	d7 01       	movw	r26, r14
    1084:	11 96       	adiw	r26, 0x01	; 1
    1086:	8c 93       	st	X, r24
									LatHour /= 10;
    1088:	bb 81       	ldd	r27, Y+3	; 0x03
    108a:	b2 9d       	mul	r27, r2
    108c:	81 2d       	mov	r24, r1
    108e:	11 24       	eor	r1, r1
    1090:	86 95       	lsr	r24
    1092:	86 95       	lsr	r24
    1094:	86 95       	lsr	r24
    1096:	8b 83       	std	Y+3, r24	; 0x03
								}
								if((LatCount>=4))
    1098:	23 e0       	ldi	r18, 0x03	; 3
    109a:	2d 15       	cp	r18, r13
    109c:	18 f5       	brcc	.+70     	; 0x10e4 <GPS_Decode+0x19a>
								{
									GPS_Data->LAT += (msg[i]-48) * LatMin;
    109e:	a0 81       	ld	r26, Z
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	d0 97       	sbiw	r26, 0x30	; 48
    10a4:	a5 01       	movw	r20, r10
    10a6:	94 01       	movw	r18, r8
    10a8:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__mulshisi3>
    10ac:	d7 01       	movw	r26, r14
    10ae:	12 96       	adiw	r26, 0x02	; 2
    10b0:	2d 91       	ld	r18, X+
    10b2:	3d 91       	ld	r19, X+
    10b4:	4d 91       	ld	r20, X+
    10b6:	5c 91       	ld	r21, X
    10b8:	15 97       	sbiw	r26, 0x05	; 5
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	82 0f       	add	r24, r18
    10c0:	93 1f       	adc	r25, r19
    10c2:	a4 1f       	adc	r26, r20
    10c4:	b5 1f       	adc	r27, r21
    10c6:	f7 01       	movw	r30, r14
    10c8:	82 83       	std	Z+2, r24	; 0x02
    10ca:	93 83       	std	Z+3, r25	; 0x03
    10cc:	a4 83       	std	Z+4, r26	; 0x04
    10ce:	b5 83       	std	Z+5, r27	; 0x05
									LatMin /= 10;
    10d0:	c5 01       	movw	r24, r10
    10d2:	b4 01       	movw	r22, r8
    10d4:	2a e0       	ldi	r18, 0x0A	; 10
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e0       	ldi	r20, 0x00	; 0
    10da:	50 e0       	ldi	r21, 0x00	; 0
    10dc:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__udivmodsi4>
    10e0:	49 01       	movw	r8, r18
    10e2:	5a 01       	movw	r10, r20
								}
								LatCount++;
    10e4:	d3 94       	inc	r13

						}
						//////////////////////////////////////////////////
						case 3:		//Lat sign
						{
							if(msg[i]>='A' && msg[i]<='Z')
    10e6:	f8 01       	movw	r30, r16
    10e8:	2d 81       	ldd	r18, Y+5	; 0x05
    10ea:	e2 0f       	add	r30, r18
    10ec:	f1 1d       	adc	r31, r1
    10ee:	80 81       	ld	r24, Z
    10f0:	9f eb       	ldi	r25, 0xBF	; 191
    10f2:	98 0f       	add	r25, r24
    10f4:	9a 31       	cpi	r25, 0x1A	; 26
    10f6:	08 f0       	brcs	.+2      	; 0x10fa <GPS_Decode+0x1b0>
    10f8:	94 c0       	rjmp	.+296    	; 0x1222 <GPS_Decode+0x2d8>
							{
								GPS_Data->LATdir = msg[i];
    10fa:	d7 01       	movw	r26, r14
    10fc:	1e 96       	adiw	r26, 0x0e	; 14
    10fe:	8c 93       	st	X, r24
    1100:	90 c0       	rjmp	.+288    	; 0x1222 <GPS_Decode+0x2d8>
							break;
						}
						///////////////////////////////////////////////////
						case 4:		//Longitude
						{
							if((msg[i] != '.') && (msg[i] != ','))
    1102:	f8 01       	movw	r30, r16
    1104:	bd 81       	ldd	r27, Y+5	; 0x05
    1106:	eb 0f       	add	r30, r27
    1108:	f1 1d       	adc	r31, r1
    110a:	80 81       	ld	r24, Z
    110c:	98 2f       	mov	r25, r24
    110e:	9d 7f       	andi	r25, 0xFD	; 253
    1110:	9c 32       	cpi	r25, 0x2C	; 44
    1112:	09 f4       	brne	.+2      	; 0x1116 <GPS_Decode+0x1cc>
    1114:	86 c0       	rjmp	.+268    	; 0x1222 <GPS_Decode+0x2d8>
							{
								if(LonCount<3)
    1116:	22 e0       	ldi	r18, 0x02	; 2
    1118:	2c 15       	cp	r18, r12
    111a:	98 f0       	brcs	.+38     	; 0x1142 <GPS_Decode+0x1f8>
								{
									GPS_Data->LON_Degree += (msg[i]-48) * LonDegree;
    111c:	80 53       	subi	r24, 0x30	; 48
    111e:	d7 01       	movw	r26, r14
    1120:	1f 96       	adiw	r26, 0x0f	; 15
    1122:	9c 91       	ld	r25, X
    1124:	b9 81       	ldd	r27, Y+1	; 0x01
    1126:	8b 9f       	mul	r24, r27
    1128:	90 0d       	add	r25, r0
    112a:	11 24       	eor	r1, r1
    112c:	d7 01       	movw	r26, r14
    112e:	1f 96       	adiw	r26, 0x0f	; 15
    1130:	9c 93       	st	X, r25
									LonDegree /= 10;
    1132:	b9 81       	ldd	r27, Y+1	; 0x01
    1134:	b2 9d       	mul	r27, r2
    1136:	81 2d       	mov	r24, r1
    1138:	11 24       	eor	r1, r1
    113a:	86 95       	lsr	r24
    113c:	86 95       	lsr	r24
    113e:	86 95       	lsr	r24
    1140:	89 83       	std	Y+1, r24	; 0x01
								}
								if((LonCount>=3) && (LonCount<5))
    1142:	8d ef       	ldi	r24, 0xFD	; 253
    1144:	8c 0d       	add	r24, r12
    1146:	82 30       	cpi	r24, 0x02	; 2
    1148:	a0 f4       	brcc	.+40     	; 0x1172 <GPS_Decode+0x228>
								{
									GPS_Data->LON_Min += (msg[i]-48) * LonHour;
    114a:	90 81       	ld	r25, Z
    114c:	90 53       	subi	r25, 0x30	; 48
    114e:	d7 01       	movw	r26, r14
    1150:	50 96       	adiw	r26, 0x10	; 16
    1152:	8c 91       	ld	r24, X
    1154:	bc 81       	ldd	r27, Y+4	; 0x04
    1156:	9b 9f       	mul	r25, r27
    1158:	80 0d       	add	r24, r0
    115a:	11 24       	eor	r1, r1
    115c:	d7 01       	movw	r26, r14
    115e:	50 96       	adiw	r26, 0x10	; 16
    1160:	8c 93       	st	X, r24
									LonHour /= 10;
    1162:	bc 81       	ldd	r27, Y+4	; 0x04
    1164:	b2 9d       	mul	r27, r2
    1166:	81 2d       	mov	r24, r1
    1168:	11 24       	eor	r1, r1
    116a:	86 95       	lsr	r24
    116c:	86 95       	lsr	r24
    116e:	86 95       	lsr	r24
    1170:	8c 83       	std	Y+4, r24	; 0x04
								}
								if((LonCount>=5))
    1172:	24 e0       	ldi	r18, 0x04	; 4
    1174:	2c 15       	cp	r18, r12
    1176:	18 f5       	brcc	.+70     	; 0x11be <GPS_Decode+0x274>
								{
									GPS_Data->LON += (msg[i]-48) * LonMin;
    1178:	a0 81       	ld	r26, Z
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	d0 97       	sbiw	r26, 0x30	; 48
    117e:	a3 01       	movw	r20, r6
    1180:	92 01       	movw	r18, r4
    1182:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__mulshisi3>
    1186:	d7 01       	movw	r26, r14
    1188:	51 96       	adiw	r26, 0x11	; 17
    118a:	2d 91       	ld	r18, X+
    118c:	3d 91       	ld	r19, X+
    118e:	4d 91       	ld	r20, X+
    1190:	5c 91       	ld	r21, X
    1192:	54 97       	sbiw	r26, 0x14	; 20
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	82 0f       	add	r24, r18
    119a:	93 1f       	adc	r25, r19
    119c:	a4 1f       	adc	r26, r20
    119e:	b5 1f       	adc	r27, r21
    11a0:	f7 01       	movw	r30, r14
    11a2:	81 8b       	std	Z+17, r24	; 0x11
    11a4:	92 8b       	std	Z+18, r25	; 0x12
    11a6:	a3 8b       	std	Z+19, r26	; 0x13
    11a8:	b4 8b       	std	Z+20, r27	; 0x14
									LonMin /= 10;
    11aa:	c3 01       	movw	r24, r6
    11ac:	b2 01       	movw	r22, r4
    11ae:	2a e0       	ldi	r18, 0x0A	; 10
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e0       	ldi	r20, 0x00	; 0
    11b4:	50 e0       	ldi	r21, 0x00	; 0
    11b6:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__udivmodsi4>
    11ba:	29 01       	movw	r4, r18
    11bc:	3a 01       	movw	r6, r20
								}
								LonCount++;	
    11be:	c3 94       	inc	r12
							}
						}
						//////////////////////////////////////////////////
						case 5: //Lon dir
						{
							if(msg[i]>='A' && msg[i]<='Z')
    11c0:	f8 01       	movw	r30, r16
    11c2:	2d 81       	ldd	r18, Y+5	; 0x05
    11c4:	e2 0f       	add	r30, r18
    11c6:	f1 1d       	adc	r31, r1
    11c8:	80 81       	ld	r24, Z
    11ca:	9f eb       	ldi	r25, 0xBF	; 191
    11cc:	98 0f       	add	r25, r24
    11ce:	9a 31       	cpi	r25, 0x1A	; 26
    11d0:	40 f5       	brcc	.+80     	; 0x1222 <GPS_Decode+0x2d8>
							{
								GPS_Data->LONdir = msg[i];
    11d2:	d7 01       	movw	r26, r14
    11d4:	5d 96       	adiw	r26, 0x1d	; 29
    11d6:	8c 93       	st	X, r24
    11d8:	24 c0       	rjmp	.+72     	; 0x1222 <GPS_Decode+0x2d8>
							break;
						}
						//////////////////////////////////////////////////
						case 6: //Quality
						{
							if((msg[i]<= '5') && (msg[i] >= '0') && (msg[i]!=','))
    11da:	f8 01       	movw	r30, r16
    11dc:	bd 81       	ldd	r27, Y+5	; 0x05
    11de:	eb 0f       	add	r30, r27
    11e0:	f1 1d       	adc	r31, r1
    11e2:	80 81       	ld	r24, Z
    11e4:	80 53       	subi	r24, 0x30	; 48
    11e6:	86 30       	cpi	r24, 0x06	; 6
    11e8:	e0 f4       	brcc	.+56     	; 0x1222 <GPS_Decode+0x2d8>
							{
								GPS_Data->quality = msg[i] - 48;
    11ea:	f7 01       	movw	r30, r14
    11ec:	86 8f       	std	Z+30, r24	; 0x1e
    11ee:	19 c0       	rjmp	.+50     	; 0x1222 <GPS_Decode+0x2d8>
							break;
						}
						//////////////////////////////////////////////////
						case 13: //AGE
						{
							if((msg[i] != '.') && (msg[i] != ','))
    11f0:	f8 01       	movw	r30, r16
    11f2:	2d 81       	ldd	r18, Y+5	; 0x05
    11f4:	e2 0f       	add	r30, r18
    11f6:	f1 1d       	adc	r31, r1
    11f8:	80 81       	ld	r24, Z
    11fa:	98 2f       	mov	r25, r24
    11fc:	9d 7f       	andi	r25, 0xFD	; 253
    11fe:	9c 32       	cpi	r25, 0x2C	; 44
    1200:	81 f0       	breq	.+32     	; 0x1222 <GPS_Decode+0x2d8>
							{
							GPS_Data->ageOfCorrection += (msg[i]-48) * age;
    1202:	80 53       	subi	r24, 0x30	; 48
    1204:	d7 01       	movw	r26, r14
    1206:	5f 96       	adiw	r26, 0x1f	; 31
    1208:	9c 91       	ld	r25, X
    120a:	5f 97       	sbiw	r26, 0x1f	; 31
    120c:	83 9d       	mul	r24, r3
    120e:	90 0d       	add	r25, r0
    1210:	11 24       	eor	r1, r1
    1212:	5f 96       	adiw	r26, 0x1f	; 31
    1214:	9c 93       	st	X, r25
							age /= 10;
    1216:	32 9c       	mul	r3, r2
    1218:	31 2c       	mov	r3, r1
    121a:	11 24       	eor	r1, r1
    121c:	36 94       	lsr	r3
    121e:	36 94       	lsr	r3
    1220:	36 94       	lsr	r3
							}
							break;
						}
					}
					///////////COMMA SWITCH END!////////////////////////
					i++;
    1222:	bd 81       	ldd	r27, Y+5	; 0x05
    1224:	bf 5f       	subi	r27, 0xFF	; 255
    1226:	bd 83       	std	Y+5, r27	; 0x05
				uint8_t LonCount=0;
				uint8_t LonDegree = 100;
				uint8_t LonHour = 10;
				uint32_t LonMin = 10000;
								
				while(msg[i] != '*')
    1228:	f8 01       	movw	r30, r16
    122a:	eb 0f       	add	r30, r27
    122c:	f1 1d       	adc	r31, r1
    122e:	80 81       	ld	r24, Z
    1230:	8a 32       	cpi	r24, 0x2A	; 42
    1232:	09 f0       	breq	.+2      	; 0x1236 <GPS_Decode+0x2ec>
    1234:	de ce       	rjmp	.-580    	; 0xff2 <GPS_Decode+0xa8>
			{
				
			}	
		}			//End switch type
		////////////////////////////////////////////////////////
		convert(GPS_Data);
    1236:	c7 01       	movw	r24, r14
    1238:	0e 94 37 07 	call	0xe6e	; 0xe6e <convert>
		
		if(GPS_Data->quality >= 4) //if fix return 1
		return 1;
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	d7 01       	movw	r26, r14
    1242:	5e 96       	adiw	r26, 0x1e	; 30
    1244:	2c 91       	ld	r18, X
    1246:	24 30       	cpi	r18, 0x04	; 4
    1248:	20 f4       	brcc	.+8      	; 0x1252 <GPS_Decode+0x308>
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <GPS_Decode+0x308>
		
		//return 1;
	}
	else
	{	//if chechsum false return 0
		return 0;
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	90 e0       	ldi	r25, 0x00	; 0
	}
    1252:	26 96       	adiw	r28, 0x06	; 6
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	ff 90       	pop	r15
    1268:	ef 90       	pop	r14
    126a:	df 90       	pop	r13
    126c:	cf 90       	pop	r12
    126e:	bf 90       	pop	r11
    1270:	af 90       	pop	r10
    1272:	9f 90       	pop	r9
    1274:	8f 90       	pop	r8
    1276:	7f 90       	pop	r7
    1278:	6f 90       	pop	r6
    127a:	5f 90       	pop	r5
    127c:	4f 90       	pop	r4
    127e:	3f 90       	pop	r3
    1280:	2f 90       	pop	r2
    1282:	08 95       	ret

00001284 <USART_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
    1284:	50 98       	cbi	0x0a, 0	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
    1286:	58 98       	cbi	0x0b, 0	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
    1288:	51 9a       	sbi	0x0a, 1	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
    128a:	59 98       	cbi	0x0b, 1	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
    128c:	0e 94 6d 09 	call	0x12da	; 0x12da <USART_0_init>
    1290:	08 95       	ret

00001292 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR = (1 << PRSPI) | (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI) | (1 << PRUSART0) | (1 << PRADC);
    1292:	8f ee       	ldi	r24, 0xEF	; 239
    1294:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
    1298:	84 b1       	in	r24, 0x04	; 4
    129a:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
    129c:	85 b1       	in	r24, 0x05	; 5
    129e:	9f ef       	ldi	r25, 0xFF	; 255
    12a0:	95 b9       	out	0x05, r25	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
    12a2:	87 b1       	in	r24, 0x07	; 7
    12a4:	80 78       	andi	r24, 0x80	; 128
    12a6:	87 b9       	out	0x07, r24	; 7

		PORTC |= mask;
    12a8:	88 b1       	in	r24, 0x08	; 8
    12aa:	8f 67       	ori	r24, 0x7F	; 127
    12ac:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
    12ae:	8a b1       	in	r24, 0x0a	; 10
    12b0:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
    12b2:	8b b1       	in	r24, 0x0b	; 11
    12b4:	9b b9       	out	0x0b, r25	; 11
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
    12b6:	40 e0       	ldi	r20, 0x00	; 0
    12b8:	60 e8       	ldi	r22, 0x80	; 128
    12ba:	81 e6       	ldi	r24, 0x61	; 97
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 66 09 	call	0x12cc	; 0x12cc <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
    12c2:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
    12c4:	15 be       	out	0x35, r1	; 53
{
	mcu_init();

	sysctrl_init();

	USART_0_initialization();
    12c6:	0e 94 42 09 	call	0x1284	; 0x1284 <USART_0_initialization>
    12ca:	08 95       	ret

000012cc <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
    12cc:	2f b7       	in	r18, 0x3f	; 63
	cli
    12ce:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
    12d0:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
    12d2:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
    12d4:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
    12d6:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
    12d8:	08 95       	ret

000012da <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(UCSR0A & (1 << RXC0)))
		;
	return UDR0;
}
    12da:	e4 e6       	ldi	r30, 0x64	; 100
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	8d 7f       	andi	r24, 0xFD	; 253
    12e2:	80 83       	st	Z, r24
    12e4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    12e8:	83 e3       	ldi	r24, 0x33	; 51
    12ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    12ee:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    12f2:	88 e9       	ldi	r24, 0x98	; 152
    12f4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	91 e0       	ldi	r25, 0x01	; 1
    12fc:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <__iob+0x3>
    1300:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <__iob+0x2>
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	08 95       	ret

00001308 <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0)))
    1308:	e0 ec       	ldi	r30, 0xC0	; 192
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	90 81       	ld	r25, Z
    130e:	95 ff       	sbrs	r25, 5
    1310:	fd cf       	rjmp	.-6      	; 0x130c <USART_0_write+0x4>
		;
	UDR0 = data;
    1312:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    1316:	08 95       	ret

00001318 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
    1318:	0e 94 84 09 	call	0x1308	; 0x1308 <USART_0_write>
	return 0;
}
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	08 95       	ret

00001322 <usart_init>:
    1322:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    1326:	83 e3       	ldi	r24, 0x33	; 51
    1328:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    132c:	88 e9       	ldi	r24, 0x98	; 152
    132e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    1332:	86 e0       	ldi	r24, 0x06	; 6
    1334:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    1338:	08 95       	ret

0000133a <__vector_18>:
    133a:	1f 92       	push	r1
    133c:	0f 92       	push	r0
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	0f 92       	push	r0
    1342:	11 24       	eor	r1, r1
    1344:	2f 93       	push	r18
    1346:	3f 93       	push	r19
    1348:	4f 93       	push	r20
    134a:	5f 93       	push	r21
    134c:	6f 93       	push	r22
    134e:	7f 93       	push	r23
    1350:	8f 93       	push	r24
    1352:	9f 93       	push	r25
    1354:	af 93       	push	r26
    1356:	bf 93       	push	r27
    1358:	ef 93       	push	r30
    135a:	ff 93       	push	r31
    135c:	0e 94 24 01 	call	0x248	; 0x248 <read_gps_data>
    1360:	ff 91       	pop	r31
    1362:	ef 91       	pop	r30
    1364:	bf 91       	pop	r27
    1366:	af 91       	pop	r26
    1368:	9f 91       	pop	r25
    136a:	8f 91       	pop	r24
    136c:	7f 91       	pop	r23
    136e:	6f 91       	pop	r22
    1370:	5f 91       	pop	r21
    1372:	4f 91       	pop	r20
    1374:	3f 91       	pop	r19
    1376:	2f 91       	pop	r18
    1378:	0f 90       	pop	r0
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	0f 90       	pop	r0
    137e:	1f 90       	pop	r1
    1380:	18 95       	reti

00001382 <__subsf3>:
    1382:	50 58       	subi	r21, 0x80	; 128

00001384 <__addsf3>:
    1384:	bb 27       	eor	r27, r27
    1386:	aa 27       	eor	r26, r26
    1388:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__addsf3x>
    138c:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <__fp_round>
    1390:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__fp_pscA>
    1394:	38 f0       	brcs	.+14     	; 0x13a4 <__addsf3+0x20>
    1396:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__fp_pscB>
    139a:	20 f0       	brcs	.+8      	; 0x13a4 <__addsf3+0x20>
    139c:	39 f4       	brne	.+14     	; 0x13ac <__addsf3+0x28>
    139e:	9f 3f       	cpi	r25, 0xFF	; 255
    13a0:	19 f4       	brne	.+6      	; 0x13a8 <__addsf3+0x24>
    13a2:	26 f4       	brtc	.+8      	; 0x13ac <__addsf3+0x28>
    13a4:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_nan>
    13a8:	0e f4       	brtc	.+2      	; 0x13ac <__addsf3+0x28>
    13aa:	e0 95       	com	r30
    13ac:	e7 fb       	bst	r30, 7
    13ae:	0c 94 b3 0b 	jmp	0x1766	; 0x1766 <__fp_inf>

000013b2 <__addsf3x>:
    13b2:	e9 2f       	mov	r30, r25
    13b4:	0e 94 41 0c 	call	0x1882	; 0x1882 <__fp_split3>
    13b8:	58 f3       	brcs	.-42     	; 0x1390 <__addsf3+0xc>
    13ba:	ba 17       	cp	r27, r26
    13bc:	62 07       	cpc	r22, r18
    13be:	73 07       	cpc	r23, r19
    13c0:	84 07       	cpc	r24, r20
    13c2:	95 07       	cpc	r25, r21
    13c4:	20 f0       	brcs	.+8      	; 0x13ce <__addsf3x+0x1c>
    13c6:	79 f4       	brne	.+30     	; 0x13e6 <__addsf3x+0x34>
    13c8:	a6 f5       	brtc	.+104    	; 0x1432 <__addsf3x+0x80>
    13ca:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__fp_zero>
    13ce:	0e f4       	brtc	.+2      	; 0x13d2 <__addsf3x+0x20>
    13d0:	e0 95       	com	r30
    13d2:	0b 2e       	mov	r0, r27
    13d4:	ba 2f       	mov	r27, r26
    13d6:	a0 2d       	mov	r26, r0
    13d8:	0b 01       	movw	r0, r22
    13da:	b9 01       	movw	r22, r18
    13dc:	90 01       	movw	r18, r0
    13de:	0c 01       	movw	r0, r24
    13e0:	ca 01       	movw	r24, r20
    13e2:	a0 01       	movw	r20, r0
    13e4:	11 24       	eor	r1, r1
    13e6:	ff 27       	eor	r31, r31
    13e8:	59 1b       	sub	r21, r25
    13ea:	99 f0       	breq	.+38     	; 0x1412 <__addsf3x+0x60>
    13ec:	59 3f       	cpi	r21, 0xF9	; 249
    13ee:	50 f4       	brcc	.+20     	; 0x1404 <__addsf3x+0x52>
    13f0:	50 3e       	cpi	r21, 0xE0	; 224
    13f2:	68 f1       	brcs	.+90     	; 0x144e <__addsf3x+0x9c>
    13f4:	1a 16       	cp	r1, r26
    13f6:	f0 40       	sbci	r31, 0x00	; 0
    13f8:	a2 2f       	mov	r26, r18
    13fa:	23 2f       	mov	r18, r19
    13fc:	34 2f       	mov	r19, r20
    13fe:	44 27       	eor	r20, r20
    1400:	58 5f       	subi	r21, 0xF8	; 248
    1402:	f3 cf       	rjmp	.-26     	; 0x13ea <__addsf3x+0x38>
    1404:	46 95       	lsr	r20
    1406:	37 95       	ror	r19
    1408:	27 95       	ror	r18
    140a:	a7 95       	ror	r26
    140c:	f0 40       	sbci	r31, 0x00	; 0
    140e:	53 95       	inc	r21
    1410:	c9 f7       	brne	.-14     	; 0x1404 <__addsf3x+0x52>
    1412:	7e f4       	brtc	.+30     	; 0x1432 <__addsf3x+0x80>
    1414:	1f 16       	cp	r1, r31
    1416:	ba 0b       	sbc	r27, r26
    1418:	62 0b       	sbc	r22, r18
    141a:	73 0b       	sbc	r23, r19
    141c:	84 0b       	sbc	r24, r20
    141e:	ba f0       	brmi	.+46     	; 0x144e <__addsf3x+0x9c>
    1420:	91 50       	subi	r25, 0x01	; 1
    1422:	a1 f0       	breq	.+40     	; 0x144c <__addsf3x+0x9a>
    1424:	ff 0f       	add	r31, r31
    1426:	bb 1f       	adc	r27, r27
    1428:	66 1f       	adc	r22, r22
    142a:	77 1f       	adc	r23, r23
    142c:	88 1f       	adc	r24, r24
    142e:	c2 f7       	brpl	.-16     	; 0x1420 <__addsf3x+0x6e>
    1430:	0e c0       	rjmp	.+28     	; 0x144e <__addsf3x+0x9c>
    1432:	ba 0f       	add	r27, r26
    1434:	62 1f       	adc	r22, r18
    1436:	73 1f       	adc	r23, r19
    1438:	84 1f       	adc	r24, r20
    143a:	48 f4       	brcc	.+18     	; 0x144e <__addsf3x+0x9c>
    143c:	87 95       	ror	r24
    143e:	77 95       	ror	r23
    1440:	67 95       	ror	r22
    1442:	b7 95       	ror	r27
    1444:	f7 95       	ror	r31
    1446:	9e 3f       	cpi	r25, 0xFE	; 254
    1448:	08 f0       	brcs	.+2      	; 0x144c <__addsf3x+0x9a>
    144a:	b0 cf       	rjmp	.-160    	; 0x13ac <__addsf3+0x28>
    144c:	93 95       	inc	r25
    144e:	88 0f       	add	r24, r24
    1450:	08 f0       	brcs	.+2      	; 0x1454 <__addsf3x+0xa2>
    1452:	99 27       	eor	r25, r25
    1454:	ee 0f       	add	r30, r30
    1456:	97 95       	ror	r25
    1458:	87 95       	ror	r24
    145a:	08 95       	ret
    145c:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__fp_pscA>
    1460:	60 f0       	brcs	.+24     	; 0x147a <__addsf3x+0xc8>
    1462:	80 e8       	ldi	r24, 0x80	; 128
    1464:	91 e0       	ldi	r25, 0x01	; 1
    1466:	09 f4       	brne	.+2      	; 0x146a <__addsf3x+0xb8>
    1468:	9e ef       	ldi	r25, 0xFE	; 254
    146a:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__fp_pscB>
    146e:	28 f0       	brcs	.+10     	; 0x147a <__addsf3x+0xc8>
    1470:	40 e8       	ldi	r20, 0x80	; 128
    1472:	51 e0       	ldi	r21, 0x01	; 1
    1474:	71 f4       	brne	.+28     	; 0x1492 <atan2+0x10>
    1476:	5e ef       	ldi	r21, 0xFE	; 254
    1478:	0c c0       	rjmp	.+24     	; 0x1492 <atan2+0x10>
    147a:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_nan>
    147e:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__fp_zero>

00001482 <atan2>:
    1482:	e9 2f       	mov	r30, r25
    1484:	e0 78       	andi	r30, 0x80	; 128
    1486:	0e 94 41 0c 	call	0x1882	; 0x1882 <__fp_split3>
    148a:	40 f3       	brcs	.-48     	; 0x145c <__addsf3x+0xaa>
    148c:	09 2e       	mov	r0, r25
    148e:	05 2a       	or	r0, r21
    1490:	b1 f3       	breq	.-20     	; 0x147e <__addsf3x+0xcc>
    1492:	26 17       	cp	r18, r22
    1494:	37 07       	cpc	r19, r23
    1496:	48 07       	cpc	r20, r24
    1498:	59 07       	cpc	r21, r25
    149a:	38 f0       	brcs	.+14     	; 0x14aa <atan2+0x28>
    149c:	0e 2e       	mov	r0, r30
    149e:	07 f8       	bld	r0, 7
    14a0:	e0 25       	eor	r30, r0
    14a2:	69 f0       	breq	.+26     	; 0x14be <atan2+0x3c>
    14a4:	e0 25       	eor	r30, r0
    14a6:	e0 64       	ori	r30, 0x40	; 64
    14a8:	0a c0       	rjmp	.+20     	; 0x14be <atan2+0x3c>
    14aa:	ef 63       	ori	r30, 0x3F	; 63
    14ac:	07 f8       	bld	r0, 7
    14ae:	00 94       	com	r0
    14b0:	07 fa       	bst	r0, 7
    14b2:	db 01       	movw	r26, r22
    14b4:	b9 01       	movw	r22, r18
    14b6:	9d 01       	movw	r18, r26
    14b8:	dc 01       	movw	r26, r24
    14ba:	ca 01       	movw	r24, r20
    14bc:	ad 01       	movw	r20, r26
    14be:	ef 93       	push	r30
    14c0:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__divsf3_pse>
    14c4:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__fp_round>
    14c8:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <atan>
    14cc:	5f 91       	pop	r21
    14ce:	55 23       	and	r21, r21
    14d0:	39 f0       	breq	.+14     	; 0x14e0 <atan2+0x5e>
    14d2:	2b ed       	ldi	r18, 0xDB	; 219
    14d4:	3f e0       	ldi	r19, 0x0F	; 15
    14d6:	49 e4       	ldi	r20, 0x49	; 73
    14d8:	50 fd       	sbrc	r21, 0
    14da:	49 ec       	ldi	r20, 0xC9	; 201
    14dc:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__addsf3>
    14e0:	08 95       	ret

000014e2 <atan>:
    14e2:	df 93       	push	r29
    14e4:	dd 27       	eor	r29, r29
    14e6:	b9 2f       	mov	r27, r25
    14e8:	bf 77       	andi	r27, 0x7F	; 127
    14ea:	40 e8       	ldi	r20, 0x80	; 128
    14ec:	5f e3       	ldi	r21, 0x3F	; 63
    14ee:	16 16       	cp	r1, r22
    14f0:	17 06       	cpc	r1, r23
    14f2:	48 07       	cpc	r20, r24
    14f4:	5b 07       	cpc	r21, r27
    14f6:	18 f4       	brcc	.+6      	; 0x14fe <atan+0x1c>
    14f8:	d9 2f       	mov	r29, r25
    14fa:	0e 94 6f 0c 	call	0x18de	; 0x18de <inverse>
    14fe:	9f 93       	push	r25
    1500:	8f 93       	push	r24
    1502:	7f 93       	push	r23
    1504:	6f 93       	push	r22
    1506:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <square>
    150a:	e8 e6       	ldi	r30, 0x68	; 104
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__fp_powser>
    1512:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__fp_round>
    1516:	2f 91       	pop	r18
    1518:	3f 91       	pop	r19
    151a:	4f 91       	pop	r20
    151c:	5f 91       	pop	r21
    151e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__mulsf3x>
    1522:	dd 23       	and	r29, r29
    1524:	51 f0       	breq	.+20     	; 0x153a <atan+0x58>
    1526:	90 58       	subi	r25, 0x80	; 128
    1528:	a2 ea       	ldi	r26, 0xA2	; 162
    152a:	2a ed       	ldi	r18, 0xDA	; 218
    152c:	3f e0       	ldi	r19, 0x0F	; 15
    152e:	49 ec       	ldi	r20, 0xC9	; 201
    1530:	5f e3       	ldi	r21, 0x3F	; 63
    1532:	d0 78       	andi	r29, 0x80	; 128
    1534:	5d 27       	eor	r21, r29
    1536:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__addsf3x>
    153a:	df 91       	pop	r29
    153c:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <__fp_round>

00001540 <__cmpsf2>:
    1540:	0e 94 8f 0b 	call	0x171e	; 0x171e <__fp_cmp>
    1544:	08 f4       	brcc	.+2      	; 0x1548 <__cmpsf2+0x8>
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	08 95       	ret

0000154a <cos>:
    154a:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__fp_rempio2>
    154e:	e3 95       	inc	r30
    1550:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__fp_sinus>

00001554 <__divsf3>:
    1554:	0e 94 be 0a 	call	0x157c	; 0x157c <__divsf3x>
    1558:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <__fp_round>
    155c:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__fp_pscB>
    1560:	58 f0       	brcs	.+22     	; 0x1578 <__divsf3+0x24>
    1562:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__fp_pscA>
    1566:	40 f0       	brcs	.+16     	; 0x1578 <__divsf3+0x24>
    1568:	29 f4       	brne	.+10     	; 0x1574 <__divsf3+0x20>
    156a:	5f 3f       	cpi	r21, 0xFF	; 255
    156c:	29 f0       	breq	.+10     	; 0x1578 <__divsf3+0x24>
    156e:	0c 94 b3 0b 	jmp	0x1766	; 0x1766 <__fp_inf>
    1572:	51 11       	cpse	r21, r1
    1574:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <__fp_szero>
    1578:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_nan>

0000157c <__divsf3x>:
    157c:	0e 94 41 0c 	call	0x1882	; 0x1882 <__fp_split3>
    1580:	68 f3       	brcs	.-38     	; 0x155c <__divsf3+0x8>

00001582 <__divsf3_pse>:
    1582:	99 23       	and	r25, r25
    1584:	b1 f3       	breq	.-20     	; 0x1572 <__divsf3+0x1e>
    1586:	55 23       	and	r21, r21
    1588:	91 f3       	breq	.-28     	; 0x156e <__divsf3+0x1a>
    158a:	95 1b       	sub	r25, r21
    158c:	55 0b       	sbc	r21, r21
    158e:	bb 27       	eor	r27, r27
    1590:	aa 27       	eor	r26, r26
    1592:	62 17       	cp	r22, r18
    1594:	73 07       	cpc	r23, r19
    1596:	84 07       	cpc	r24, r20
    1598:	38 f0       	brcs	.+14     	; 0x15a8 <__divsf3_pse+0x26>
    159a:	9f 5f       	subi	r25, 0xFF	; 255
    159c:	5f 4f       	sbci	r21, 0xFF	; 255
    159e:	22 0f       	add	r18, r18
    15a0:	33 1f       	adc	r19, r19
    15a2:	44 1f       	adc	r20, r20
    15a4:	aa 1f       	adc	r26, r26
    15a6:	a9 f3       	breq	.-22     	; 0x1592 <__divsf3_pse+0x10>
    15a8:	35 d0       	rcall	.+106    	; 0x1614 <__divsf3_pse+0x92>
    15aa:	0e 2e       	mov	r0, r30
    15ac:	3a f0       	brmi	.+14     	; 0x15bc <__divsf3_pse+0x3a>
    15ae:	e0 e8       	ldi	r30, 0x80	; 128
    15b0:	32 d0       	rcall	.+100    	; 0x1616 <__divsf3_pse+0x94>
    15b2:	91 50       	subi	r25, 0x01	; 1
    15b4:	50 40       	sbci	r21, 0x00	; 0
    15b6:	e6 95       	lsr	r30
    15b8:	00 1c       	adc	r0, r0
    15ba:	ca f7       	brpl	.-14     	; 0x15ae <__divsf3_pse+0x2c>
    15bc:	2b d0       	rcall	.+86     	; 0x1614 <__divsf3_pse+0x92>
    15be:	fe 2f       	mov	r31, r30
    15c0:	29 d0       	rcall	.+82     	; 0x1614 <__divsf3_pse+0x92>
    15c2:	66 0f       	add	r22, r22
    15c4:	77 1f       	adc	r23, r23
    15c6:	88 1f       	adc	r24, r24
    15c8:	bb 1f       	adc	r27, r27
    15ca:	26 17       	cp	r18, r22
    15cc:	37 07       	cpc	r19, r23
    15ce:	48 07       	cpc	r20, r24
    15d0:	ab 07       	cpc	r26, r27
    15d2:	b0 e8       	ldi	r27, 0x80	; 128
    15d4:	09 f0       	breq	.+2      	; 0x15d8 <__divsf3_pse+0x56>
    15d6:	bb 0b       	sbc	r27, r27
    15d8:	80 2d       	mov	r24, r0
    15da:	bf 01       	movw	r22, r30
    15dc:	ff 27       	eor	r31, r31
    15de:	93 58       	subi	r25, 0x83	; 131
    15e0:	5f 4f       	sbci	r21, 0xFF	; 255
    15e2:	3a f0       	brmi	.+14     	; 0x15f2 <__divsf3_pse+0x70>
    15e4:	9e 3f       	cpi	r25, 0xFE	; 254
    15e6:	51 05       	cpc	r21, r1
    15e8:	78 f0       	brcs	.+30     	; 0x1608 <__divsf3_pse+0x86>
    15ea:	0c 94 b3 0b 	jmp	0x1766	; 0x1766 <__fp_inf>
    15ee:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <__fp_szero>
    15f2:	5f 3f       	cpi	r21, 0xFF	; 255
    15f4:	e4 f3       	brlt	.-8      	; 0x15ee <__divsf3_pse+0x6c>
    15f6:	98 3e       	cpi	r25, 0xE8	; 232
    15f8:	d4 f3       	brlt	.-12     	; 0x15ee <__divsf3_pse+0x6c>
    15fa:	86 95       	lsr	r24
    15fc:	77 95       	ror	r23
    15fe:	67 95       	ror	r22
    1600:	b7 95       	ror	r27
    1602:	f7 95       	ror	r31
    1604:	9f 5f       	subi	r25, 0xFF	; 255
    1606:	c9 f7       	brne	.-14     	; 0x15fa <__divsf3_pse+0x78>
    1608:	88 0f       	add	r24, r24
    160a:	91 1d       	adc	r25, r1
    160c:	96 95       	lsr	r25
    160e:	87 95       	ror	r24
    1610:	97 f9       	bld	r25, 7
    1612:	08 95       	ret
    1614:	e1 e0       	ldi	r30, 0x01	; 1
    1616:	66 0f       	add	r22, r22
    1618:	77 1f       	adc	r23, r23
    161a:	88 1f       	adc	r24, r24
    161c:	bb 1f       	adc	r27, r27
    161e:	62 17       	cp	r22, r18
    1620:	73 07       	cpc	r23, r19
    1622:	84 07       	cpc	r24, r20
    1624:	ba 07       	cpc	r27, r26
    1626:	20 f0       	brcs	.+8      	; 0x1630 <__divsf3_pse+0xae>
    1628:	62 1b       	sub	r22, r18
    162a:	73 0b       	sbc	r23, r19
    162c:	84 0b       	sbc	r24, r20
    162e:	ba 0b       	sbc	r27, r26
    1630:	ee 1f       	adc	r30, r30
    1632:	88 f7       	brcc	.-30     	; 0x1616 <__divsf3_pse+0x94>
    1634:	e0 95       	com	r30
    1636:	08 95       	ret

00001638 <__fixsfsi>:
    1638:	0e 94 23 0b 	call	0x1646	; 0x1646 <__fixunssfsi>
    163c:	68 94       	set
    163e:	b1 11       	cpse	r27, r1
    1640:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <__fp_szero>
    1644:	08 95       	ret

00001646 <__fixunssfsi>:
    1646:	0e 94 49 0c 	call	0x1892	; 0x1892 <__fp_splitA>
    164a:	88 f0       	brcs	.+34     	; 0x166e <__fixunssfsi+0x28>
    164c:	9f 57       	subi	r25, 0x7F	; 127
    164e:	98 f0       	brcs	.+38     	; 0x1676 <__fixunssfsi+0x30>
    1650:	b9 2f       	mov	r27, r25
    1652:	99 27       	eor	r25, r25
    1654:	b7 51       	subi	r27, 0x17	; 23
    1656:	b0 f0       	brcs	.+44     	; 0x1684 <__fixunssfsi+0x3e>
    1658:	e1 f0       	breq	.+56     	; 0x1692 <__fixunssfsi+0x4c>
    165a:	66 0f       	add	r22, r22
    165c:	77 1f       	adc	r23, r23
    165e:	88 1f       	adc	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	1a f0       	brmi	.+6      	; 0x166a <__fixunssfsi+0x24>
    1664:	ba 95       	dec	r27
    1666:	c9 f7       	brne	.-14     	; 0x165a <__fixunssfsi+0x14>
    1668:	14 c0       	rjmp	.+40     	; 0x1692 <__fixunssfsi+0x4c>
    166a:	b1 30       	cpi	r27, 0x01	; 1
    166c:	91 f0       	breq	.+36     	; 0x1692 <__fixunssfsi+0x4c>
    166e:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__fp_zero>
    1672:	b1 e0       	ldi	r27, 0x01	; 1
    1674:	08 95       	ret
    1676:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__fp_zero>
    167a:	67 2f       	mov	r22, r23
    167c:	78 2f       	mov	r23, r24
    167e:	88 27       	eor	r24, r24
    1680:	b8 5f       	subi	r27, 0xF8	; 248
    1682:	39 f0       	breq	.+14     	; 0x1692 <__fixunssfsi+0x4c>
    1684:	b9 3f       	cpi	r27, 0xF9	; 249
    1686:	cc f3       	brlt	.-14     	; 0x167a <__fixunssfsi+0x34>
    1688:	86 95       	lsr	r24
    168a:	77 95       	ror	r23
    168c:	67 95       	ror	r22
    168e:	b3 95       	inc	r27
    1690:	d9 f7       	brne	.-10     	; 0x1688 <__fixunssfsi+0x42>
    1692:	3e f4       	brtc	.+14     	; 0x16a2 <__fixunssfsi+0x5c>
    1694:	90 95       	com	r25
    1696:	80 95       	com	r24
    1698:	70 95       	com	r23
    169a:	61 95       	neg	r22
    169c:	7f 4f       	sbci	r23, 0xFF	; 255
    169e:	8f 4f       	sbci	r24, 0xFF	; 255
    16a0:	9f 4f       	sbci	r25, 0xFF	; 255
    16a2:	08 95       	ret

000016a4 <__floatunsisf>:
    16a4:	e8 94       	clt
    16a6:	09 c0       	rjmp	.+18     	; 0x16ba <__floatsisf+0x12>

000016a8 <__floatsisf>:
    16a8:	97 fb       	bst	r25, 7
    16aa:	3e f4       	brtc	.+14     	; 0x16ba <__floatsisf+0x12>
    16ac:	90 95       	com	r25
    16ae:	80 95       	com	r24
    16b0:	70 95       	com	r23
    16b2:	61 95       	neg	r22
    16b4:	7f 4f       	sbci	r23, 0xFF	; 255
    16b6:	8f 4f       	sbci	r24, 0xFF	; 255
    16b8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ba:	99 23       	and	r25, r25
    16bc:	a9 f0       	breq	.+42     	; 0x16e8 <__floatsisf+0x40>
    16be:	f9 2f       	mov	r31, r25
    16c0:	96 e9       	ldi	r25, 0x96	; 150
    16c2:	bb 27       	eor	r27, r27
    16c4:	93 95       	inc	r25
    16c6:	f6 95       	lsr	r31
    16c8:	87 95       	ror	r24
    16ca:	77 95       	ror	r23
    16cc:	67 95       	ror	r22
    16ce:	b7 95       	ror	r27
    16d0:	f1 11       	cpse	r31, r1
    16d2:	f8 cf       	rjmp	.-16     	; 0x16c4 <__floatsisf+0x1c>
    16d4:	fa f4       	brpl	.+62     	; 0x1714 <__floatsisf+0x6c>
    16d6:	bb 0f       	add	r27, r27
    16d8:	11 f4       	brne	.+4      	; 0x16de <__floatsisf+0x36>
    16da:	60 ff       	sbrs	r22, 0
    16dc:	1b c0       	rjmp	.+54     	; 0x1714 <__floatsisf+0x6c>
    16de:	6f 5f       	subi	r22, 0xFF	; 255
    16e0:	7f 4f       	sbci	r23, 0xFF	; 255
    16e2:	8f 4f       	sbci	r24, 0xFF	; 255
    16e4:	9f 4f       	sbci	r25, 0xFF	; 255
    16e6:	16 c0       	rjmp	.+44     	; 0x1714 <__floatsisf+0x6c>
    16e8:	88 23       	and	r24, r24
    16ea:	11 f0       	breq	.+4      	; 0x16f0 <__floatsisf+0x48>
    16ec:	96 e9       	ldi	r25, 0x96	; 150
    16ee:	11 c0       	rjmp	.+34     	; 0x1712 <__floatsisf+0x6a>
    16f0:	77 23       	and	r23, r23
    16f2:	21 f0       	breq	.+8      	; 0x16fc <__floatsisf+0x54>
    16f4:	9e e8       	ldi	r25, 0x8E	; 142
    16f6:	87 2f       	mov	r24, r23
    16f8:	76 2f       	mov	r23, r22
    16fa:	05 c0       	rjmp	.+10     	; 0x1706 <__floatsisf+0x5e>
    16fc:	66 23       	and	r22, r22
    16fe:	71 f0       	breq	.+28     	; 0x171c <__floatsisf+0x74>
    1700:	96 e8       	ldi	r25, 0x86	; 134
    1702:	86 2f       	mov	r24, r22
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	2a f0       	brmi	.+10     	; 0x1714 <__floatsisf+0x6c>
    170a:	9a 95       	dec	r25
    170c:	66 0f       	add	r22, r22
    170e:	77 1f       	adc	r23, r23
    1710:	88 1f       	adc	r24, r24
    1712:	da f7       	brpl	.-10     	; 0x170a <__floatsisf+0x62>
    1714:	88 0f       	add	r24, r24
    1716:	96 95       	lsr	r25
    1718:	87 95       	ror	r24
    171a:	97 f9       	bld	r25, 7
    171c:	08 95       	ret

0000171e <__fp_cmp>:
    171e:	99 0f       	add	r25, r25
    1720:	00 08       	sbc	r0, r0
    1722:	55 0f       	add	r21, r21
    1724:	aa 0b       	sbc	r26, r26
    1726:	e0 e8       	ldi	r30, 0x80	; 128
    1728:	fe ef       	ldi	r31, 0xFE	; 254
    172a:	16 16       	cp	r1, r22
    172c:	17 06       	cpc	r1, r23
    172e:	e8 07       	cpc	r30, r24
    1730:	f9 07       	cpc	r31, r25
    1732:	c0 f0       	brcs	.+48     	; 0x1764 <__fp_cmp+0x46>
    1734:	12 16       	cp	r1, r18
    1736:	13 06       	cpc	r1, r19
    1738:	e4 07       	cpc	r30, r20
    173a:	f5 07       	cpc	r31, r21
    173c:	98 f0       	brcs	.+38     	; 0x1764 <__fp_cmp+0x46>
    173e:	62 1b       	sub	r22, r18
    1740:	73 0b       	sbc	r23, r19
    1742:	84 0b       	sbc	r24, r20
    1744:	95 0b       	sbc	r25, r21
    1746:	39 f4       	brne	.+14     	; 0x1756 <__fp_cmp+0x38>
    1748:	0a 26       	eor	r0, r26
    174a:	61 f0       	breq	.+24     	; 0x1764 <__fp_cmp+0x46>
    174c:	23 2b       	or	r18, r19
    174e:	24 2b       	or	r18, r20
    1750:	25 2b       	or	r18, r21
    1752:	21 f4       	brne	.+8      	; 0x175c <__fp_cmp+0x3e>
    1754:	08 95       	ret
    1756:	0a 26       	eor	r0, r26
    1758:	09 f4       	brne	.+2      	; 0x175c <__fp_cmp+0x3e>
    175a:	a1 40       	sbci	r26, 0x01	; 1
    175c:	a6 95       	lsr	r26
    175e:	8f ef       	ldi	r24, 0xFF	; 255
    1760:	81 1d       	adc	r24, r1
    1762:	81 1d       	adc	r24, r1
    1764:	08 95       	ret

00001766 <__fp_inf>:
    1766:	97 f9       	bld	r25, 7
    1768:	9f 67       	ori	r25, 0x7F	; 127
    176a:	80 e8       	ldi	r24, 0x80	; 128
    176c:	70 e0       	ldi	r23, 0x00	; 0
    176e:	60 e0       	ldi	r22, 0x00	; 0
    1770:	08 95       	ret

00001772 <__fp_nan>:
    1772:	9f ef       	ldi	r25, 0xFF	; 255
    1774:	80 ec       	ldi	r24, 0xC0	; 192
    1776:	08 95       	ret

00001778 <__fp_powser>:
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	1f 93       	push	r17
    177e:	0f 93       	push	r16
    1780:	ff 92       	push	r15
    1782:	ef 92       	push	r14
    1784:	df 92       	push	r13
    1786:	7b 01       	movw	r14, r22
    1788:	8c 01       	movw	r16, r24
    178a:	68 94       	set
    178c:	06 c0       	rjmp	.+12     	; 0x179a <__fp_powser+0x22>
    178e:	da 2e       	mov	r13, r26
    1790:	ef 01       	movw	r28, r30
    1792:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__mulsf3x>
    1796:	fe 01       	movw	r30, r28
    1798:	e8 94       	clt
    179a:	a5 91       	lpm	r26, Z+
    179c:	25 91       	lpm	r18, Z+
    179e:	35 91       	lpm	r19, Z+
    17a0:	45 91       	lpm	r20, Z+
    17a2:	55 91       	lpm	r21, Z+
    17a4:	a6 f3       	brts	.-24     	; 0x178e <__fp_powser+0x16>
    17a6:	ef 01       	movw	r28, r30
    17a8:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__addsf3x>
    17ac:	fe 01       	movw	r30, r28
    17ae:	97 01       	movw	r18, r14
    17b0:	a8 01       	movw	r20, r16
    17b2:	da 94       	dec	r13
    17b4:	69 f7       	brne	.-38     	; 0x1790 <__fp_powser+0x18>
    17b6:	df 90       	pop	r13
    17b8:	ef 90       	pop	r14
    17ba:	ff 90       	pop	r15
    17bc:	0f 91       	pop	r16
    17be:	1f 91       	pop	r17
    17c0:	cf 91       	pop	r28
    17c2:	df 91       	pop	r29
    17c4:	08 95       	ret

000017c6 <__fp_pscA>:
    17c6:	00 24       	eor	r0, r0
    17c8:	0a 94       	dec	r0
    17ca:	16 16       	cp	r1, r22
    17cc:	17 06       	cpc	r1, r23
    17ce:	18 06       	cpc	r1, r24
    17d0:	09 06       	cpc	r0, r25
    17d2:	08 95       	ret

000017d4 <__fp_pscB>:
    17d4:	00 24       	eor	r0, r0
    17d6:	0a 94       	dec	r0
    17d8:	12 16       	cp	r1, r18
    17da:	13 06       	cpc	r1, r19
    17dc:	14 06       	cpc	r1, r20
    17de:	05 06       	cpc	r0, r21
    17e0:	08 95       	ret
    17e2:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_nan>

000017e6 <__fp_rempio2>:
    17e6:	0e 94 49 0c 	call	0x1892	; 0x1892 <__fp_splitA>
    17ea:	d8 f3       	brcs	.-10     	; 0x17e2 <__fp_pscB+0xe>
    17ec:	e8 94       	clt
    17ee:	e0 e0       	ldi	r30, 0x00	; 0
    17f0:	bb 27       	eor	r27, r27
    17f2:	9f 57       	subi	r25, 0x7F	; 127
    17f4:	f0 f0       	brcs	.+60     	; 0x1832 <__fp_rempio2+0x4c>
    17f6:	2a ed       	ldi	r18, 0xDA	; 218
    17f8:	3f e0       	ldi	r19, 0x0F	; 15
    17fa:	49 ec       	ldi	r20, 0xC9	; 201
    17fc:	06 c0       	rjmp	.+12     	; 0x180a <__fp_rempio2+0x24>
    17fe:	ee 0f       	add	r30, r30
    1800:	bb 0f       	add	r27, r27
    1802:	66 1f       	adc	r22, r22
    1804:	77 1f       	adc	r23, r23
    1806:	88 1f       	adc	r24, r24
    1808:	28 f0       	brcs	.+10     	; 0x1814 <__fp_rempio2+0x2e>
    180a:	b2 3a       	cpi	r27, 0xA2	; 162
    180c:	62 07       	cpc	r22, r18
    180e:	73 07       	cpc	r23, r19
    1810:	84 07       	cpc	r24, r20
    1812:	28 f0       	brcs	.+10     	; 0x181e <__fp_rempio2+0x38>
    1814:	b2 5a       	subi	r27, 0xA2	; 162
    1816:	62 0b       	sbc	r22, r18
    1818:	73 0b       	sbc	r23, r19
    181a:	84 0b       	sbc	r24, r20
    181c:	e3 95       	inc	r30
    181e:	9a 95       	dec	r25
    1820:	72 f7       	brpl	.-36     	; 0x17fe <__fp_rempio2+0x18>
    1822:	80 38       	cpi	r24, 0x80	; 128
    1824:	30 f4       	brcc	.+12     	; 0x1832 <__fp_rempio2+0x4c>
    1826:	9a 95       	dec	r25
    1828:	bb 0f       	add	r27, r27
    182a:	66 1f       	adc	r22, r22
    182c:	77 1f       	adc	r23, r23
    182e:	88 1f       	adc	r24, r24
    1830:	d2 f7       	brpl	.-12     	; 0x1826 <__fp_rempio2+0x40>
    1832:	90 48       	sbci	r25, 0x80	; 128
    1834:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <__fp_mpack_finite>

00001838 <__fp_round>:
    1838:	09 2e       	mov	r0, r25
    183a:	03 94       	inc	r0
    183c:	00 0c       	add	r0, r0
    183e:	11 f4       	brne	.+4      	; 0x1844 <__fp_round+0xc>
    1840:	88 23       	and	r24, r24
    1842:	52 f0       	brmi	.+20     	; 0x1858 <__fp_round+0x20>
    1844:	bb 0f       	add	r27, r27
    1846:	40 f4       	brcc	.+16     	; 0x1858 <__fp_round+0x20>
    1848:	bf 2b       	or	r27, r31
    184a:	11 f4       	brne	.+4      	; 0x1850 <__fp_round+0x18>
    184c:	60 ff       	sbrs	r22, 0
    184e:	04 c0       	rjmp	.+8      	; 0x1858 <__fp_round+0x20>
    1850:	6f 5f       	subi	r22, 0xFF	; 255
    1852:	7f 4f       	sbci	r23, 0xFF	; 255
    1854:	8f 4f       	sbci	r24, 0xFF	; 255
    1856:	9f 4f       	sbci	r25, 0xFF	; 255
    1858:	08 95       	ret

0000185a <__fp_sinus>:
    185a:	ef 93       	push	r30
    185c:	e0 ff       	sbrs	r30, 0
    185e:	07 c0       	rjmp	.+14     	; 0x186e <__fp_sinus+0x14>
    1860:	a2 ea       	ldi	r26, 0xA2	; 162
    1862:	2a ed       	ldi	r18, 0xDA	; 218
    1864:	3f e0       	ldi	r19, 0x0F	; 15
    1866:	49 ec       	ldi	r20, 0xC9	; 201
    1868:	5f eb       	ldi	r21, 0xBF	; 191
    186a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__addsf3x>
    186e:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__fp_round>
    1872:	0f 90       	pop	r0
    1874:	03 94       	inc	r0
    1876:	01 fc       	sbrc	r0, 1
    1878:	90 58       	subi	r25, 0x80	; 128
    187a:	e5 e9       	ldi	r30, 0x95	; 149
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	0c 94 43 0d 	jmp	0x1a86	; 0x1a86 <__fp_powsodd>

00001882 <__fp_split3>:
    1882:	57 fd       	sbrc	r21, 7
    1884:	90 58       	subi	r25, 0x80	; 128
    1886:	44 0f       	add	r20, r20
    1888:	55 1f       	adc	r21, r21
    188a:	59 f0       	breq	.+22     	; 0x18a2 <__fp_splitA+0x10>
    188c:	5f 3f       	cpi	r21, 0xFF	; 255
    188e:	71 f0       	breq	.+28     	; 0x18ac <__fp_splitA+0x1a>
    1890:	47 95       	ror	r20

00001892 <__fp_splitA>:
    1892:	88 0f       	add	r24, r24
    1894:	97 fb       	bst	r25, 7
    1896:	99 1f       	adc	r25, r25
    1898:	61 f0       	breq	.+24     	; 0x18b2 <__fp_splitA+0x20>
    189a:	9f 3f       	cpi	r25, 0xFF	; 255
    189c:	79 f0       	breq	.+30     	; 0x18bc <__fp_splitA+0x2a>
    189e:	87 95       	ror	r24
    18a0:	08 95       	ret
    18a2:	12 16       	cp	r1, r18
    18a4:	13 06       	cpc	r1, r19
    18a6:	14 06       	cpc	r1, r20
    18a8:	55 1f       	adc	r21, r21
    18aa:	f2 cf       	rjmp	.-28     	; 0x1890 <__fp_split3+0xe>
    18ac:	46 95       	lsr	r20
    18ae:	f1 df       	rcall	.-30     	; 0x1892 <__fp_splitA>
    18b0:	08 c0       	rjmp	.+16     	; 0x18c2 <__fp_splitA+0x30>
    18b2:	16 16       	cp	r1, r22
    18b4:	17 06       	cpc	r1, r23
    18b6:	18 06       	cpc	r1, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	f1 cf       	rjmp	.-30     	; 0x189e <__fp_splitA+0xc>
    18bc:	86 95       	lsr	r24
    18be:	71 05       	cpc	r23, r1
    18c0:	61 05       	cpc	r22, r1
    18c2:	08 94       	sec
    18c4:	08 95       	ret

000018c6 <__fp_zero>:
    18c6:	e8 94       	clt

000018c8 <__fp_szero>:
    18c8:	bb 27       	eor	r27, r27
    18ca:	66 27       	eor	r22, r22
    18cc:	77 27       	eor	r23, r23
    18ce:	cb 01       	movw	r24, r22
    18d0:	97 f9       	bld	r25, 7
    18d2:	08 95       	ret

000018d4 <__gesf2>:
    18d4:	0e 94 8f 0b 	call	0x171e	; 0x171e <__fp_cmp>
    18d8:	08 f4       	brcc	.+2      	; 0x18dc <__gesf2+0x8>
    18da:	8f ef       	ldi	r24, 0xFF	; 255
    18dc:	08 95       	ret

000018de <inverse>:
    18de:	9b 01       	movw	r18, r22
    18e0:	ac 01       	movw	r20, r24
    18e2:	60 e0       	ldi	r22, 0x00	; 0
    18e4:	70 e0       	ldi	r23, 0x00	; 0
    18e6:	80 e8       	ldi	r24, 0x80	; 128
    18e8:	9f e3       	ldi	r25, 0x3F	; 63
    18ea:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__divsf3>

000018ee <__mulsf3>:
    18ee:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__mulsf3x>
    18f2:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <__fp_round>
    18f6:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__fp_pscA>
    18fa:	38 f0       	brcs	.+14     	; 0x190a <__mulsf3+0x1c>
    18fc:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__fp_pscB>
    1900:	20 f0       	brcs	.+8      	; 0x190a <__mulsf3+0x1c>
    1902:	95 23       	and	r25, r21
    1904:	11 f0       	breq	.+4      	; 0x190a <__mulsf3+0x1c>
    1906:	0c 94 b3 0b 	jmp	0x1766	; 0x1766 <__fp_inf>
    190a:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_nan>
    190e:	11 24       	eor	r1, r1
    1910:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <__fp_szero>

00001914 <__mulsf3x>:
    1914:	0e 94 41 0c 	call	0x1882	; 0x1882 <__fp_split3>
    1918:	70 f3       	brcs	.-36     	; 0x18f6 <__mulsf3+0x8>

0000191a <__mulsf3_pse>:
    191a:	95 9f       	mul	r25, r21
    191c:	c1 f3       	breq	.-16     	; 0x190e <__mulsf3+0x20>
    191e:	95 0f       	add	r25, r21
    1920:	50 e0       	ldi	r21, 0x00	; 0
    1922:	55 1f       	adc	r21, r21
    1924:	62 9f       	mul	r22, r18
    1926:	f0 01       	movw	r30, r0
    1928:	72 9f       	mul	r23, r18
    192a:	bb 27       	eor	r27, r27
    192c:	f0 0d       	add	r31, r0
    192e:	b1 1d       	adc	r27, r1
    1930:	63 9f       	mul	r22, r19
    1932:	aa 27       	eor	r26, r26
    1934:	f0 0d       	add	r31, r0
    1936:	b1 1d       	adc	r27, r1
    1938:	aa 1f       	adc	r26, r26
    193a:	64 9f       	mul	r22, r20
    193c:	66 27       	eor	r22, r22
    193e:	b0 0d       	add	r27, r0
    1940:	a1 1d       	adc	r26, r1
    1942:	66 1f       	adc	r22, r22
    1944:	82 9f       	mul	r24, r18
    1946:	22 27       	eor	r18, r18
    1948:	b0 0d       	add	r27, r0
    194a:	a1 1d       	adc	r26, r1
    194c:	62 1f       	adc	r22, r18
    194e:	73 9f       	mul	r23, r19
    1950:	b0 0d       	add	r27, r0
    1952:	a1 1d       	adc	r26, r1
    1954:	62 1f       	adc	r22, r18
    1956:	83 9f       	mul	r24, r19
    1958:	a0 0d       	add	r26, r0
    195a:	61 1d       	adc	r22, r1
    195c:	22 1f       	adc	r18, r18
    195e:	74 9f       	mul	r23, r20
    1960:	33 27       	eor	r19, r19
    1962:	a0 0d       	add	r26, r0
    1964:	61 1d       	adc	r22, r1
    1966:	23 1f       	adc	r18, r19
    1968:	84 9f       	mul	r24, r20
    196a:	60 0d       	add	r22, r0
    196c:	21 1d       	adc	r18, r1
    196e:	82 2f       	mov	r24, r18
    1970:	76 2f       	mov	r23, r22
    1972:	6a 2f       	mov	r22, r26
    1974:	11 24       	eor	r1, r1
    1976:	9f 57       	subi	r25, 0x7F	; 127
    1978:	50 40       	sbci	r21, 0x00	; 0
    197a:	9a f0       	brmi	.+38     	; 0x19a2 <__mulsf3_pse+0x88>
    197c:	f1 f0       	breq	.+60     	; 0x19ba <__mulsf3_pse+0xa0>
    197e:	88 23       	and	r24, r24
    1980:	4a f0       	brmi	.+18     	; 0x1994 <__mulsf3_pse+0x7a>
    1982:	ee 0f       	add	r30, r30
    1984:	ff 1f       	adc	r31, r31
    1986:	bb 1f       	adc	r27, r27
    1988:	66 1f       	adc	r22, r22
    198a:	77 1f       	adc	r23, r23
    198c:	88 1f       	adc	r24, r24
    198e:	91 50       	subi	r25, 0x01	; 1
    1990:	50 40       	sbci	r21, 0x00	; 0
    1992:	a9 f7       	brne	.-22     	; 0x197e <__mulsf3_pse+0x64>
    1994:	9e 3f       	cpi	r25, 0xFE	; 254
    1996:	51 05       	cpc	r21, r1
    1998:	80 f0       	brcs	.+32     	; 0x19ba <__mulsf3_pse+0xa0>
    199a:	0c 94 b3 0b 	jmp	0x1766	; 0x1766 <__fp_inf>
    199e:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <__fp_szero>
    19a2:	5f 3f       	cpi	r21, 0xFF	; 255
    19a4:	e4 f3       	brlt	.-8      	; 0x199e <__mulsf3_pse+0x84>
    19a6:	98 3e       	cpi	r25, 0xE8	; 232
    19a8:	d4 f3       	brlt	.-12     	; 0x199e <__mulsf3_pse+0x84>
    19aa:	86 95       	lsr	r24
    19ac:	77 95       	ror	r23
    19ae:	67 95       	ror	r22
    19b0:	b7 95       	ror	r27
    19b2:	f7 95       	ror	r31
    19b4:	e7 95       	ror	r30
    19b6:	9f 5f       	subi	r25, 0xFF	; 255
    19b8:	c1 f7       	brne	.-16     	; 0x19aa <__mulsf3_pse+0x90>
    19ba:	fe 2b       	or	r31, r30
    19bc:	88 0f       	add	r24, r24
    19be:	91 1d       	adc	r25, r1
    19c0:	96 95       	lsr	r25
    19c2:	87 95       	ror	r24
    19c4:	97 f9       	bld	r25, 7
    19c6:	08 95       	ret
    19c8:	19 f4       	brne	.+6      	; 0x19d0 <__mulsf3_pse+0xb6>
    19ca:	16 f4       	brtc	.+4      	; 0x19d0 <__mulsf3_pse+0xb6>
    19cc:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_nan>
    19d0:	0c 94 2e 0d 	jmp	0x1a5c	; 0x1a5c <__fp_mpack>

000019d4 <sqrt>:
    19d4:	0e 94 49 0c 	call	0x1892	; 0x1892 <__fp_splitA>
    19d8:	b8 f3       	brcs	.-18     	; 0x19c8 <__mulsf3_pse+0xae>
    19da:	99 23       	and	r25, r25
    19dc:	c9 f3       	breq	.-14     	; 0x19d0 <__mulsf3_pse+0xb6>
    19de:	b6 f3       	brts	.-20     	; 0x19cc <__mulsf3_pse+0xb2>
    19e0:	9f 57       	subi	r25, 0x7F	; 127
    19e2:	55 0b       	sbc	r21, r21
    19e4:	87 ff       	sbrs	r24, 7
    19e6:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__fp_norm2>
    19ea:	00 24       	eor	r0, r0
    19ec:	a0 e6       	ldi	r26, 0x60	; 96
    19ee:	40 ea       	ldi	r20, 0xA0	; 160
    19f0:	90 01       	movw	r18, r0
    19f2:	80 58       	subi	r24, 0x80	; 128
    19f4:	56 95       	lsr	r21
    19f6:	97 95       	ror	r25
    19f8:	28 f4       	brcc	.+10     	; 0x1a04 <sqrt+0x30>
    19fa:	80 5c       	subi	r24, 0xC0	; 192
    19fc:	66 0f       	add	r22, r22
    19fe:	77 1f       	adc	r23, r23
    1a00:	88 1f       	adc	r24, r24
    1a02:	20 f0       	brcs	.+8      	; 0x1a0c <sqrt+0x38>
    1a04:	26 17       	cp	r18, r22
    1a06:	37 07       	cpc	r19, r23
    1a08:	48 07       	cpc	r20, r24
    1a0a:	30 f4       	brcc	.+12     	; 0x1a18 <sqrt+0x44>
    1a0c:	62 1b       	sub	r22, r18
    1a0e:	73 0b       	sbc	r23, r19
    1a10:	84 0b       	sbc	r24, r20
    1a12:	20 29       	or	r18, r0
    1a14:	31 29       	or	r19, r1
    1a16:	4a 2b       	or	r20, r26
    1a18:	a6 95       	lsr	r26
    1a1a:	17 94       	ror	r1
    1a1c:	07 94       	ror	r0
    1a1e:	20 25       	eor	r18, r0
    1a20:	31 25       	eor	r19, r1
    1a22:	4a 27       	eor	r20, r26
    1a24:	58 f7       	brcc	.-42     	; 0x19fc <sqrt+0x28>
    1a26:	66 0f       	add	r22, r22
    1a28:	77 1f       	adc	r23, r23
    1a2a:	88 1f       	adc	r24, r24
    1a2c:	20 f0       	brcs	.+8      	; 0x1a36 <sqrt+0x62>
    1a2e:	26 17       	cp	r18, r22
    1a30:	37 07       	cpc	r19, r23
    1a32:	48 07       	cpc	r20, r24
    1a34:	30 f4       	brcc	.+12     	; 0x1a42 <sqrt+0x6e>
    1a36:	62 0b       	sbc	r22, r18
    1a38:	73 0b       	sbc	r23, r19
    1a3a:	84 0b       	sbc	r24, r20
    1a3c:	20 0d       	add	r18, r0
    1a3e:	31 1d       	adc	r19, r1
    1a40:	41 1d       	adc	r20, r1
    1a42:	a0 95       	com	r26
    1a44:	81 f7       	brne	.-32     	; 0x1a26 <sqrt+0x52>
    1a46:	b9 01       	movw	r22, r18
    1a48:	84 2f       	mov	r24, r20
    1a4a:	91 58       	subi	r25, 0x81	; 129
    1a4c:	88 0f       	add	r24, r24
    1a4e:	96 95       	lsr	r25
    1a50:	87 95       	ror	r24
    1a52:	08 95       	ret

00001a54 <square>:
    1a54:	9b 01       	movw	r18, r22
    1a56:	ac 01       	movw	r20, r24
    1a58:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__mulsf3>

00001a5c <__fp_mpack>:
    1a5c:	9f 3f       	cpi	r25, 0xFF	; 255
    1a5e:	31 f0       	breq	.+12     	; 0x1a6c <__fp_mpack_finite+0xc>

00001a60 <__fp_mpack_finite>:
    1a60:	91 50       	subi	r25, 0x01	; 1
    1a62:	20 f4       	brcc	.+8      	; 0x1a6c <__fp_mpack_finite+0xc>
    1a64:	87 95       	ror	r24
    1a66:	77 95       	ror	r23
    1a68:	67 95       	ror	r22
    1a6a:	b7 95       	ror	r27
    1a6c:	88 0f       	add	r24, r24
    1a6e:	91 1d       	adc	r25, r1
    1a70:	96 95       	lsr	r25
    1a72:	87 95       	ror	r24
    1a74:	97 f9       	bld	r25, 7
    1a76:	08 95       	ret

00001a78 <__fp_norm2>:
    1a78:	91 50       	subi	r25, 0x01	; 1
    1a7a:	50 40       	sbci	r21, 0x00	; 0
    1a7c:	66 0f       	add	r22, r22
    1a7e:	77 1f       	adc	r23, r23
    1a80:	88 1f       	adc	r24, r24
    1a82:	d2 f7       	brpl	.-12     	; 0x1a78 <__fp_norm2>
    1a84:	08 95       	ret

00001a86 <__fp_powsodd>:
    1a86:	9f 93       	push	r25
    1a88:	8f 93       	push	r24
    1a8a:	7f 93       	push	r23
    1a8c:	6f 93       	push	r22
    1a8e:	ff 93       	push	r31
    1a90:	ef 93       	push	r30
    1a92:	9b 01       	movw	r18, r22
    1a94:	ac 01       	movw	r20, r24
    1a96:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulsf3>
    1a9a:	ef 91       	pop	r30
    1a9c:	ff 91       	pop	r31
    1a9e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__fp_powser>
    1aa2:	2f 91       	pop	r18
    1aa4:	3f 91       	pop	r19
    1aa6:	4f 91       	pop	r20
    1aa8:	5f 91       	pop	r21
    1aaa:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__mulsf3>

00001aae <vfprintf>:
    1aae:	a0 e1       	ldi	r26, 0x10	; 16
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	ed e5       	ldi	r30, 0x5D	; 93
    1ab4:	fd e0       	ldi	r31, 0x0D	; 13
    1ab6:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <__prologue_saves__>
    1aba:	7c 01       	movw	r14, r24
    1abc:	1b 01       	movw	r2, r22
    1abe:	6a 01       	movw	r12, r20
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	17 82       	std	Z+7, r1	; 0x07
    1ac4:	16 82       	std	Z+6, r1	; 0x06
    1ac6:	83 81       	ldd	r24, Z+3	; 0x03
    1ac8:	81 ff       	sbrs	r24, 1
    1aca:	44 c3       	rjmp	.+1672   	; 0x2154 <vfprintf+0x6a6>
    1acc:	9e 01       	movw	r18, r28
    1ace:	2f 5f       	subi	r18, 0xFF	; 255
    1ad0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad2:	39 01       	movw	r6, r18
    1ad4:	f7 01       	movw	r30, r14
    1ad6:	93 81       	ldd	r25, Z+3	; 0x03
    1ad8:	f1 01       	movw	r30, r2
    1ada:	93 fd       	sbrc	r25, 3
    1adc:	85 91       	lpm	r24, Z+
    1ade:	93 ff       	sbrs	r25, 3
    1ae0:	81 91       	ld	r24, Z+
    1ae2:	1f 01       	movw	r2, r30
    1ae4:	88 23       	and	r24, r24
    1ae6:	09 f4       	brne	.+2      	; 0x1aea <vfprintf+0x3c>
    1ae8:	31 c3       	rjmp	.+1634   	; 0x214c <vfprintf+0x69e>
    1aea:	85 32       	cpi	r24, 0x25	; 37
    1aec:	39 f4       	brne	.+14     	; 0x1afc <vfprintf+0x4e>
    1aee:	93 fd       	sbrc	r25, 3
    1af0:	85 91       	lpm	r24, Z+
    1af2:	93 ff       	sbrs	r25, 3
    1af4:	81 91       	ld	r24, Z+
    1af6:	1f 01       	movw	r2, r30
    1af8:	85 32       	cpi	r24, 0x25	; 37
    1afa:	39 f4       	brne	.+14     	; 0x1b0a <vfprintf+0x5c>
    1afc:	b7 01       	movw	r22, r14
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	0e 94 4b 12 	call	0x2496	; 0x2496 <fputc>
    1b04:	56 01       	movw	r10, r12
    1b06:	65 01       	movw	r12, r10
    1b08:	e5 cf       	rjmp	.-54     	; 0x1ad4 <vfprintf+0x26>
    1b0a:	10 e0       	ldi	r17, 0x00	; 0
    1b0c:	51 2c       	mov	r5, r1
    1b0e:	91 2c       	mov	r9, r1
    1b10:	ff e1       	ldi	r31, 0x1F	; 31
    1b12:	f9 15       	cp	r31, r9
    1b14:	d8 f0       	brcs	.+54     	; 0x1b4c <vfprintf+0x9e>
    1b16:	8b 32       	cpi	r24, 0x2B	; 43
    1b18:	79 f0       	breq	.+30     	; 0x1b38 <vfprintf+0x8a>
    1b1a:	38 f4       	brcc	.+14     	; 0x1b2a <vfprintf+0x7c>
    1b1c:	80 32       	cpi	r24, 0x20	; 32
    1b1e:	79 f0       	breq	.+30     	; 0x1b3e <vfprintf+0x90>
    1b20:	83 32       	cpi	r24, 0x23	; 35
    1b22:	a1 f4       	brne	.+40     	; 0x1b4c <vfprintf+0x9e>
    1b24:	f9 2d       	mov	r31, r9
    1b26:	f0 61       	ori	r31, 0x10	; 16
    1b28:	2e c0       	rjmp	.+92     	; 0x1b86 <vfprintf+0xd8>
    1b2a:	8d 32       	cpi	r24, 0x2D	; 45
    1b2c:	61 f0       	breq	.+24     	; 0x1b46 <vfprintf+0x98>
    1b2e:	80 33       	cpi	r24, 0x30	; 48
    1b30:	69 f4       	brne	.+26     	; 0x1b4c <vfprintf+0x9e>
    1b32:	29 2d       	mov	r18, r9
    1b34:	21 60       	ori	r18, 0x01	; 1
    1b36:	2d c0       	rjmp	.+90     	; 0x1b92 <vfprintf+0xe4>
    1b38:	39 2d       	mov	r19, r9
    1b3a:	32 60       	ori	r19, 0x02	; 2
    1b3c:	93 2e       	mov	r9, r19
    1b3e:	89 2d       	mov	r24, r9
    1b40:	84 60       	ori	r24, 0x04	; 4
    1b42:	98 2e       	mov	r9, r24
    1b44:	2a c0       	rjmp	.+84     	; 0x1b9a <vfprintf+0xec>
    1b46:	e9 2d       	mov	r30, r9
    1b48:	e8 60       	ori	r30, 0x08	; 8
    1b4a:	15 c0       	rjmp	.+42     	; 0x1b76 <vfprintf+0xc8>
    1b4c:	97 fc       	sbrc	r9, 7
    1b4e:	2d c0       	rjmp	.+90     	; 0x1baa <vfprintf+0xfc>
    1b50:	20 ed       	ldi	r18, 0xD0	; 208
    1b52:	28 0f       	add	r18, r24
    1b54:	2a 30       	cpi	r18, 0x0A	; 10
    1b56:	88 f4       	brcc	.+34     	; 0x1b7a <vfprintf+0xcc>
    1b58:	96 fe       	sbrs	r9, 6
    1b5a:	06 c0       	rjmp	.+12     	; 0x1b68 <vfprintf+0xba>
    1b5c:	3a e0       	ldi	r19, 0x0A	; 10
    1b5e:	13 9f       	mul	r17, r19
    1b60:	20 0d       	add	r18, r0
    1b62:	11 24       	eor	r1, r1
    1b64:	12 2f       	mov	r17, r18
    1b66:	19 c0       	rjmp	.+50     	; 0x1b9a <vfprintf+0xec>
    1b68:	8a e0       	ldi	r24, 0x0A	; 10
    1b6a:	58 9e       	mul	r5, r24
    1b6c:	20 0d       	add	r18, r0
    1b6e:	11 24       	eor	r1, r1
    1b70:	52 2e       	mov	r5, r18
    1b72:	e9 2d       	mov	r30, r9
    1b74:	e0 62       	ori	r30, 0x20	; 32
    1b76:	9e 2e       	mov	r9, r30
    1b78:	10 c0       	rjmp	.+32     	; 0x1b9a <vfprintf+0xec>
    1b7a:	8e 32       	cpi	r24, 0x2E	; 46
    1b7c:	31 f4       	brne	.+12     	; 0x1b8a <vfprintf+0xdc>
    1b7e:	96 fc       	sbrc	r9, 6
    1b80:	e5 c2       	rjmp	.+1482   	; 0x214c <vfprintf+0x69e>
    1b82:	f9 2d       	mov	r31, r9
    1b84:	f0 64       	ori	r31, 0x40	; 64
    1b86:	9f 2e       	mov	r9, r31
    1b88:	08 c0       	rjmp	.+16     	; 0x1b9a <vfprintf+0xec>
    1b8a:	8c 36       	cpi	r24, 0x6C	; 108
    1b8c:	21 f4       	brne	.+8      	; 0x1b96 <vfprintf+0xe8>
    1b8e:	29 2d       	mov	r18, r9
    1b90:	20 68       	ori	r18, 0x80	; 128
    1b92:	92 2e       	mov	r9, r18
    1b94:	02 c0       	rjmp	.+4      	; 0x1b9a <vfprintf+0xec>
    1b96:	88 36       	cpi	r24, 0x68	; 104
    1b98:	41 f4       	brne	.+16     	; 0x1baa <vfprintf+0xfc>
    1b9a:	f1 01       	movw	r30, r2
    1b9c:	93 fd       	sbrc	r25, 3
    1b9e:	85 91       	lpm	r24, Z+
    1ba0:	93 ff       	sbrs	r25, 3
    1ba2:	81 91       	ld	r24, Z+
    1ba4:	1f 01       	movw	r2, r30
    1ba6:	81 11       	cpse	r24, r1
    1ba8:	b3 cf       	rjmp	.-154    	; 0x1b10 <vfprintf+0x62>
    1baa:	9b eb       	ldi	r25, 0xBB	; 187
    1bac:	98 0f       	add	r25, r24
    1bae:	93 30       	cpi	r25, 0x03	; 3
    1bb0:	20 f4       	brcc	.+8      	; 0x1bba <vfprintf+0x10c>
    1bb2:	99 2d       	mov	r25, r9
    1bb4:	90 61       	ori	r25, 0x10	; 16
    1bb6:	80 5e       	subi	r24, 0xE0	; 224
    1bb8:	07 c0       	rjmp	.+14     	; 0x1bc8 <vfprintf+0x11a>
    1bba:	9b e9       	ldi	r25, 0x9B	; 155
    1bbc:	98 0f       	add	r25, r24
    1bbe:	93 30       	cpi	r25, 0x03	; 3
    1bc0:	08 f0       	brcs	.+2      	; 0x1bc4 <vfprintf+0x116>
    1bc2:	66 c1       	rjmp	.+716    	; 0x1e90 <vfprintf+0x3e2>
    1bc4:	99 2d       	mov	r25, r9
    1bc6:	9f 7e       	andi	r25, 0xEF	; 239
    1bc8:	96 ff       	sbrs	r25, 6
    1bca:	16 e0       	ldi	r17, 0x06	; 6
    1bcc:	9f 73       	andi	r25, 0x3F	; 63
    1bce:	99 2e       	mov	r9, r25
    1bd0:	85 36       	cpi	r24, 0x65	; 101
    1bd2:	19 f4       	brne	.+6      	; 0x1bda <vfprintf+0x12c>
    1bd4:	90 64       	ori	r25, 0x40	; 64
    1bd6:	99 2e       	mov	r9, r25
    1bd8:	08 c0       	rjmp	.+16     	; 0x1bea <vfprintf+0x13c>
    1bda:	86 36       	cpi	r24, 0x66	; 102
    1bdc:	21 f4       	brne	.+8      	; 0x1be6 <vfprintf+0x138>
    1bde:	39 2f       	mov	r19, r25
    1be0:	30 68       	ori	r19, 0x80	; 128
    1be2:	93 2e       	mov	r9, r19
    1be4:	02 c0       	rjmp	.+4      	; 0x1bea <vfprintf+0x13c>
    1be6:	11 11       	cpse	r17, r1
    1be8:	11 50       	subi	r17, 0x01	; 1
    1bea:	97 fe       	sbrs	r9, 7
    1bec:	07 c0       	rjmp	.+14     	; 0x1bfc <vfprintf+0x14e>
    1bee:	1c 33       	cpi	r17, 0x3C	; 60
    1bf0:	50 f4       	brcc	.+20     	; 0x1c06 <vfprintf+0x158>
    1bf2:	44 24       	eor	r4, r4
    1bf4:	43 94       	inc	r4
    1bf6:	41 0e       	add	r4, r17
    1bf8:	27 e0       	ldi	r18, 0x07	; 7
    1bfa:	0b c0       	rjmp	.+22     	; 0x1c12 <vfprintf+0x164>
    1bfc:	18 30       	cpi	r17, 0x08	; 8
    1bfe:	38 f0       	brcs	.+14     	; 0x1c0e <vfprintf+0x160>
    1c00:	27 e0       	ldi	r18, 0x07	; 7
    1c02:	17 e0       	ldi	r17, 0x07	; 7
    1c04:	05 c0       	rjmp	.+10     	; 0x1c10 <vfprintf+0x162>
    1c06:	27 e0       	ldi	r18, 0x07	; 7
    1c08:	9c e3       	ldi	r25, 0x3C	; 60
    1c0a:	49 2e       	mov	r4, r25
    1c0c:	02 c0       	rjmp	.+4      	; 0x1c12 <vfprintf+0x164>
    1c0e:	21 2f       	mov	r18, r17
    1c10:	41 2c       	mov	r4, r1
    1c12:	56 01       	movw	r10, r12
    1c14:	84 e0       	ldi	r24, 0x04	; 4
    1c16:	a8 0e       	add	r10, r24
    1c18:	b1 1c       	adc	r11, r1
    1c1a:	f6 01       	movw	r30, r12
    1c1c:	60 81       	ld	r22, Z
    1c1e:	71 81       	ldd	r23, Z+1	; 0x01
    1c20:	82 81       	ldd	r24, Z+2	; 0x02
    1c22:	93 81       	ldd	r25, Z+3	; 0x03
    1c24:	04 2d       	mov	r16, r4
    1c26:	a3 01       	movw	r20, r6
    1c28:	0e 94 4f 11 	call	0x229e	; 0x229e <__ftoa_engine>
    1c2c:	6c 01       	movw	r12, r24
    1c2e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c30:	fc 87       	std	Y+12, r31	; 0x0c
    1c32:	f0 ff       	sbrs	r31, 0
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <vfprintf+0x18c>
    1c36:	f3 ff       	sbrs	r31, 3
    1c38:	06 c0       	rjmp	.+12     	; 0x1c46 <vfprintf+0x198>
    1c3a:	91 fc       	sbrc	r9, 1
    1c3c:	06 c0       	rjmp	.+12     	; 0x1c4a <vfprintf+0x19c>
    1c3e:	92 fe       	sbrs	r9, 2
    1c40:	06 c0       	rjmp	.+12     	; 0x1c4e <vfprintf+0x1a0>
    1c42:	00 e2       	ldi	r16, 0x20	; 32
    1c44:	05 c0       	rjmp	.+10     	; 0x1c50 <vfprintf+0x1a2>
    1c46:	0d e2       	ldi	r16, 0x2D	; 45
    1c48:	03 c0       	rjmp	.+6      	; 0x1c50 <vfprintf+0x1a2>
    1c4a:	0b e2       	ldi	r16, 0x2B	; 43
    1c4c:	01 c0       	rjmp	.+2      	; 0x1c50 <vfprintf+0x1a2>
    1c4e:	00 e0       	ldi	r16, 0x00	; 0
    1c50:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c52:	8c 70       	andi	r24, 0x0C	; 12
    1c54:	19 f0       	breq	.+6      	; 0x1c5c <vfprintf+0x1ae>
    1c56:	01 11       	cpse	r16, r1
    1c58:	5a c2       	rjmp	.+1204   	; 0x210e <vfprintf+0x660>
    1c5a:	9b c2       	rjmp	.+1334   	; 0x2192 <vfprintf+0x6e4>
    1c5c:	97 fe       	sbrs	r9, 7
    1c5e:	10 c0       	rjmp	.+32     	; 0x1c80 <vfprintf+0x1d2>
    1c60:	4c 0c       	add	r4, r12
    1c62:	fc 85       	ldd	r31, Y+12	; 0x0c
    1c64:	f4 ff       	sbrs	r31, 4
    1c66:	04 c0       	rjmp	.+8      	; 0x1c70 <vfprintf+0x1c2>
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	81 33       	cpi	r24, 0x31	; 49
    1c6c:	09 f4       	brne	.+2      	; 0x1c70 <vfprintf+0x1c2>
    1c6e:	4a 94       	dec	r4
    1c70:	14 14       	cp	r1, r4
    1c72:	74 f5       	brge	.+92     	; 0x1cd0 <vfprintf+0x222>
    1c74:	28 e0       	ldi	r18, 0x08	; 8
    1c76:	24 15       	cp	r18, r4
    1c78:	78 f5       	brcc	.+94     	; 0x1cd8 <vfprintf+0x22a>
    1c7a:	88 e0       	ldi	r24, 0x08	; 8
    1c7c:	48 2e       	mov	r4, r24
    1c7e:	2c c0       	rjmp	.+88     	; 0x1cd8 <vfprintf+0x22a>
    1c80:	96 fc       	sbrc	r9, 6
    1c82:	2a c0       	rjmp	.+84     	; 0x1cd8 <vfprintf+0x22a>
    1c84:	81 2f       	mov	r24, r17
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	8c 15       	cp	r24, r12
    1c8a:	9d 05       	cpc	r25, r13
    1c8c:	9c f0       	brlt	.+38     	; 0x1cb4 <vfprintf+0x206>
    1c8e:	3c ef       	ldi	r19, 0xFC	; 252
    1c90:	c3 16       	cp	r12, r19
    1c92:	3f ef       	ldi	r19, 0xFF	; 255
    1c94:	d3 06       	cpc	r13, r19
    1c96:	74 f0       	brlt	.+28     	; 0x1cb4 <vfprintf+0x206>
    1c98:	89 2d       	mov	r24, r9
    1c9a:	80 68       	ori	r24, 0x80	; 128
    1c9c:	98 2e       	mov	r9, r24
    1c9e:	0a c0       	rjmp	.+20     	; 0x1cb4 <vfprintf+0x206>
    1ca0:	e2 e0       	ldi	r30, 0x02	; 2
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	ec 0f       	add	r30, r28
    1ca6:	fd 1f       	adc	r31, r29
    1ca8:	e1 0f       	add	r30, r17
    1caa:	f1 1d       	adc	r31, r1
    1cac:	80 81       	ld	r24, Z
    1cae:	80 33       	cpi	r24, 0x30	; 48
    1cb0:	19 f4       	brne	.+6      	; 0x1cb8 <vfprintf+0x20a>
    1cb2:	11 50       	subi	r17, 0x01	; 1
    1cb4:	11 11       	cpse	r17, r1
    1cb6:	f4 cf       	rjmp	.-24     	; 0x1ca0 <vfprintf+0x1f2>
    1cb8:	97 fe       	sbrs	r9, 7
    1cba:	0e c0       	rjmp	.+28     	; 0x1cd8 <vfprintf+0x22a>
    1cbc:	44 24       	eor	r4, r4
    1cbe:	43 94       	inc	r4
    1cc0:	41 0e       	add	r4, r17
    1cc2:	81 2f       	mov	r24, r17
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	c8 16       	cp	r12, r24
    1cc8:	d9 06       	cpc	r13, r25
    1cca:	2c f4       	brge	.+10     	; 0x1cd6 <vfprintf+0x228>
    1ccc:	1c 19       	sub	r17, r12
    1cce:	04 c0       	rjmp	.+8      	; 0x1cd8 <vfprintf+0x22a>
    1cd0:	44 24       	eor	r4, r4
    1cd2:	43 94       	inc	r4
    1cd4:	01 c0       	rjmp	.+2      	; 0x1cd8 <vfprintf+0x22a>
    1cd6:	10 e0       	ldi	r17, 0x00	; 0
    1cd8:	97 fe       	sbrs	r9, 7
    1cda:	06 c0       	rjmp	.+12     	; 0x1ce8 <vfprintf+0x23a>
    1cdc:	1c 14       	cp	r1, r12
    1cde:	1d 04       	cpc	r1, r13
    1ce0:	34 f4       	brge	.+12     	; 0x1cee <vfprintf+0x240>
    1ce2:	c6 01       	movw	r24, r12
    1ce4:	01 96       	adiw	r24, 0x01	; 1
    1ce6:	05 c0       	rjmp	.+10     	; 0x1cf2 <vfprintf+0x244>
    1ce8:	85 e0       	ldi	r24, 0x05	; 5
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <vfprintf+0x244>
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	01 11       	cpse	r16, r1
    1cf4:	01 96       	adiw	r24, 0x01	; 1
    1cf6:	11 23       	and	r17, r17
    1cf8:	31 f0       	breq	.+12     	; 0x1d06 <vfprintf+0x258>
    1cfa:	21 2f       	mov	r18, r17
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	2f 5f       	subi	r18, 0xFF	; 255
    1d00:	3f 4f       	sbci	r19, 0xFF	; 255
    1d02:	82 0f       	add	r24, r18
    1d04:	93 1f       	adc	r25, r19
    1d06:	25 2d       	mov	r18, r5
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	82 17       	cp	r24, r18
    1d0c:	93 07       	cpc	r25, r19
    1d0e:	14 f4       	brge	.+4      	; 0x1d14 <vfprintf+0x266>
    1d10:	58 1a       	sub	r5, r24
    1d12:	01 c0       	rjmp	.+2      	; 0x1d16 <vfprintf+0x268>
    1d14:	51 2c       	mov	r5, r1
    1d16:	89 2d       	mov	r24, r9
    1d18:	89 70       	andi	r24, 0x09	; 9
    1d1a:	49 f4       	brne	.+18     	; 0x1d2e <vfprintf+0x280>
    1d1c:	55 20       	and	r5, r5
    1d1e:	39 f0       	breq	.+14     	; 0x1d2e <vfprintf+0x280>
    1d20:	b7 01       	movw	r22, r14
    1d22:	80 e2       	ldi	r24, 0x20	; 32
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	0e 94 4b 12 	call	0x2496	; 0x2496 <fputc>
    1d2a:	5a 94       	dec	r5
    1d2c:	f7 cf       	rjmp	.-18     	; 0x1d1c <vfprintf+0x26e>
    1d2e:	00 23       	and	r16, r16
    1d30:	29 f0       	breq	.+10     	; 0x1d3c <vfprintf+0x28e>
    1d32:	b7 01       	movw	r22, r14
    1d34:	80 2f       	mov	r24, r16
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	0e 94 4b 12 	call	0x2496	; 0x2496 <fputc>
    1d3c:	93 fc       	sbrc	r9, 3
    1d3e:	09 c0       	rjmp	.+18     	; 0x1d52 <vfprintf+0x2a4>
    1d40:	55 20       	and	r5, r5
    1d42:	39 f0       	breq	.+14     	; 0x1d52 <vfprintf+0x2a4>
    1d44:	b7 01       	movw	r22, r14
    1d46:	80 e3       	ldi	r24, 0x30	; 48
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	0e 94 4b 12 	call	0x2496	; 0x2496 <fputc>
    1d4e:	5a 94       	dec	r5
    1d50:	f7 cf       	rjmp	.-18     	; 0x1d40 <vfprintf+0x292>
    1d52:	97 fe       	sbrs	r9, 7
    1d54:	4c c0       	rjmp	.+152    	; 0x1dee <vfprintf+0x340>
    1d56:	46 01       	movw	r8, r12
    1d58:	d7 fe       	sbrs	r13, 7
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <vfprintf+0x2b2>
    1d5c:	81 2c       	mov	r8, r1
    1d5e:	91 2c       	mov	r9, r1
    1d60:	c6 01       	movw	r24, r12
    1d62:	88 19       	sub	r24, r8
    1d64:	99 09       	sbc	r25, r9
    1d66:	f3 01       	movw	r30, r6
    1d68:	e8 0f       	add	r30, r24
    1d6a:	f9 1f       	adc	r31, r25
    1d6c:	fe 87       	std	Y+14, r31	; 0x0e
    1d6e:	ed 87       	std	Y+13, r30	; 0x0d
    1d70:	96 01       	movw	r18, r12
    1d72:	24 19       	sub	r18, r4
    1d74:	31 09       	sbc	r19, r1
    1d76:	38 8b       	std	Y+16, r19	; 0x10
    1d78:	2f 87       	std	Y+15, r18	; 0x0f
    1d7a:	01 2f       	mov	r16, r17
    1d7c:	10 e0       	ldi	r17, 0x00	; 0
    1d7e:	11 95       	neg	r17
    1d80:	01 95       	neg	r16
    1d82:	11 09       	sbc	r17, r1
    1d84:	3f ef       	ldi	r19, 0xFF	; 255
    1d86:	83 16       	cp	r8, r19
    1d88:	93 06       	cpc	r9, r19
    1d8a:	29 f4       	brne	.+10     	; 0x1d96 <vfprintf+0x2e8>
    1d8c:	b7 01       	movw	r22, r14
    1d8e:	8e e2       	ldi	r24, 0x2E	; 46
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	0e 94 4b 12 	call	0x2496	; 0x2496 <fputc>
    1d96:	c8 14       	cp	r12, r8
    1d98:	d9 04       	cpc	r13, r9
    1d9a:	4c f0       	brlt	.+18     	; 0x1dae <vfprintf+0x300>
    1d9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d9e:	98 89       	ldd	r25, Y+16	; 0x10
    1da0:	88 15       	cp	r24, r8
    1da2:	99 05       	cpc	r25, r9
    1da4:	24 f4       	brge	.+8      	; 0x1dae <vfprintf+0x300>
    1da6:	ed 85       	ldd	r30, Y+13	; 0x0d
    1da8:	fe 85       	ldd	r31, Y+14	; 0x0e
    1daa:	81 81       	ldd	r24, Z+1	; 0x01
    1dac:	01 c0       	rjmp	.+2      	; 0x1db0 <vfprintf+0x302>
    1dae:	80 e3       	ldi	r24, 0x30	; 48
    1db0:	f1 e0       	ldi	r31, 0x01	; 1
    1db2:	8f 1a       	sub	r8, r31
    1db4:	91 08       	sbc	r9, r1
    1db6:	2d 85       	ldd	r18, Y+13	; 0x0d
    1db8:	3e 85       	ldd	r19, Y+14	; 0x0e
    1dba:	2f 5f       	subi	r18, 0xFF	; 255
    1dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dbe:	3e 87       	std	Y+14, r19	; 0x0e
    1dc0:	2d 87       	std	Y+13, r18	; 0x0d
    1dc2:	80 16       	cp	r8, r16
    1dc4:	91 06       	cpc	r9, r17
    1dc6:	2c f0       	brlt	.+10     	; 0x1dd2 <vfprintf+0x324>
    1dc8:	b7 01       	movw	r22, r14
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	0e 94 4b 12 	call	0x2496	; 0x2496 <fputc>
    1dd0:	d9 cf       	rjmp	.-78     	; 0x1d84 <vfprintf+0x2d6>
    1dd2:	c8 14       	cp	r12, r8
    1dd4:	d9 04       	cpc	r13, r9
    1dd6:	41 f4       	brne	.+16     	; 0x1de8 <vfprintf+0x33a>
    1dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dda:	96 33       	cpi	r25, 0x36	; 54
    1ddc:	20 f4       	brcc	.+8      	; 0x1de6 <vfprintf+0x338>
    1dde:	95 33       	cpi	r25, 0x35	; 53
    1de0:	19 f4       	brne	.+6      	; 0x1de8 <vfprintf+0x33a>
    1de2:	3c 85       	ldd	r19, Y+12	; 0x0c
    1de4:	34 ff       	sbrs	r19, 4
    1de6:	81 e3       	ldi	r24, 0x31	; 49
    1de8:	b7 01       	movw	r22, r14
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	4e c0       	rjmp	.+156    	; 0x1e8a <vfprintf+0x3dc>
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	81 33       	cpi	r24, 0x31	; 49
    1df2:	19 f0       	breq	.+6      	; 0x1dfa <vfprintf+0x34c>
    1df4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1df6:	9f 7e       	andi	r25, 0xEF	; 239
    1df8:	9c 87       	std	Y+12, r25	; 0x0c
    1dfa:	b7 01       	movw	r22, r14
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	0e 94 4b 12 	call	0x2496	; 0x2496 <fputc>
    1e02:	11 11       	cpse	r17, r1
    1e04:	05 c0       	rjmp	.+10     	; 0x1e10 <vfprintf+0x362>
    1e06:	94 fc       	sbrc	r9, 4
    1e08:	18 c0       	rjmp	.+48     	; 0x1e3a <vfprintf+0x38c>
    1e0a:	85 e6       	ldi	r24, 0x65	; 101
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	17 c0       	rjmp	.+46     	; 0x1e3e <vfprintf+0x390>
    1e10:	b7 01       	movw	r22, r14
    1e12:	8e e2       	ldi	r24, 0x2E	; 46
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	0e 94 4b 12 	call	0x2496	; 0x2496 <fputc>
    1e1a:	1e 5f       	subi	r17, 0xFE	; 254
    1e1c:	82 e0       	ldi	r24, 0x02	; 2
    1e1e:	01 e0       	ldi	r16, 0x01	; 1
    1e20:	08 0f       	add	r16, r24
    1e22:	f3 01       	movw	r30, r6
    1e24:	e8 0f       	add	r30, r24
    1e26:	f1 1d       	adc	r31, r1
    1e28:	80 81       	ld	r24, Z
    1e2a:	b7 01       	movw	r22, r14
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	0e 94 4b 12 	call	0x2496	; 0x2496 <fputc>
    1e32:	80 2f       	mov	r24, r16
    1e34:	01 13       	cpse	r16, r17
    1e36:	f3 cf       	rjmp	.-26     	; 0x1e1e <vfprintf+0x370>
    1e38:	e6 cf       	rjmp	.-52     	; 0x1e06 <vfprintf+0x358>
    1e3a:	85 e4       	ldi	r24, 0x45	; 69
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	b7 01       	movw	r22, r14
    1e40:	0e 94 4b 12 	call	0x2496	; 0x2496 <fputc>
    1e44:	d7 fc       	sbrc	r13, 7
    1e46:	06 c0       	rjmp	.+12     	; 0x1e54 <vfprintf+0x3a6>
    1e48:	c1 14       	cp	r12, r1
    1e4a:	d1 04       	cpc	r13, r1
    1e4c:	41 f4       	brne	.+16     	; 0x1e5e <vfprintf+0x3b0>
    1e4e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1e50:	e4 ff       	sbrs	r30, 4
    1e52:	05 c0       	rjmp	.+10     	; 0x1e5e <vfprintf+0x3b0>
    1e54:	d1 94       	neg	r13
    1e56:	c1 94       	neg	r12
    1e58:	d1 08       	sbc	r13, r1
    1e5a:	8d e2       	ldi	r24, 0x2D	; 45
    1e5c:	01 c0       	rjmp	.+2      	; 0x1e60 <vfprintf+0x3b2>
    1e5e:	8b e2       	ldi	r24, 0x2B	; 43
    1e60:	b7 01       	movw	r22, r14
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	0e 94 4b 12 	call	0x2496	; 0x2496 <fputc>
    1e68:	80 e3       	ldi	r24, 0x30	; 48
    1e6a:	2a e0       	ldi	r18, 0x0A	; 10
    1e6c:	c2 16       	cp	r12, r18
    1e6e:	d1 04       	cpc	r13, r1
    1e70:	2c f0       	brlt	.+10     	; 0x1e7c <vfprintf+0x3ce>
    1e72:	8f 5f       	subi	r24, 0xFF	; 255
    1e74:	fa e0       	ldi	r31, 0x0A	; 10
    1e76:	cf 1a       	sub	r12, r31
    1e78:	d1 08       	sbc	r13, r1
    1e7a:	f7 cf       	rjmp	.-18     	; 0x1e6a <vfprintf+0x3bc>
    1e7c:	b7 01       	movw	r22, r14
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	0e 94 4b 12 	call	0x2496	; 0x2496 <fputc>
    1e84:	b7 01       	movw	r22, r14
    1e86:	c6 01       	movw	r24, r12
    1e88:	c0 96       	adiw	r24, 0x30	; 48
    1e8a:	0e 94 4b 12 	call	0x2496	; 0x2496 <fputc>
    1e8e:	54 c1       	rjmp	.+680    	; 0x2138 <vfprintf+0x68a>
    1e90:	83 36       	cpi	r24, 0x63	; 99
    1e92:	31 f0       	breq	.+12     	; 0x1ea0 <vfprintf+0x3f2>
    1e94:	83 37       	cpi	r24, 0x73	; 115
    1e96:	79 f0       	breq	.+30     	; 0x1eb6 <vfprintf+0x408>
    1e98:	83 35       	cpi	r24, 0x53	; 83
    1e9a:	09 f0       	breq	.+2      	; 0x1e9e <vfprintf+0x3f0>
    1e9c:	56 c0       	rjmp	.+172    	; 0x1f4a <vfprintf+0x49c>
    1e9e:	20 c0       	rjmp	.+64     	; 0x1ee0 <vfprintf+0x432>
    1ea0:	56 01       	movw	r10, r12
    1ea2:	32 e0       	ldi	r19, 0x02	; 2
    1ea4:	a3 0e       	add	r10, r19
    1ea6:	b1 1c       	adc	r11, r1
    1ea8:	f6 01       	movw	r30, r12
    1eaa:	80 81       	ld	r24, Z
    1eac:	89 83       	std	Y+1, r24	; 0x01
    1eae:	01 e0       	ldi	r16, 0x01	; 1
    1eb0:	10 e0       	ldi	r17, 0x00	; 0
    1eb2:	63 01       	movw	r12, r6
    1eb4:	12 c0       	rjmp	.+36     	; 0x1eda <vfprintf+0x42c>
    1eb6:	56 01       	movw	r10, r12
    1eb8:	f2 e0       	ldi	r31, 0x02	; 2
    1eba:	af 0e       	add	r10, r31
    1ebc:	b1 1c       	adc	r11, r1
    1ebe:	f6 01       	movw	r30, r12
    1ec0:	c0 80       	ld	r12, Z
    1ec2:	d1 80       	ldd	r13, Z+1	; 0x01
    1ec4:	96 fe       	sbrs	r9, 6
    1ec6:	03 c0       	rjmp	.+6      	; 0x1ece <vfprintf+0x420>
    1ec8:	61 2f       	mov	r22, r17
    1eca:	70 e0       	ldi	r23, 0x00	; 0
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <vfprintf+0x424>
    1ece:	6f ef       	ldi	r22, 0xFF	; 255
    1ed0:	7f ef       	ldi	r23, 0xFF	; 255
    1ed2:	c6 01       	movw	r24, r12
    1ed4:	0e 94 40 12 	call	0x2480	; 0x2480 <strnlen>
    1ed8:	8c 01       	movw	r16, r24
    1eda:	f9 2d       	mov	r31, r9
    1edc:	ff 77       	andi	r31, 0x7F	; 127
    1ede:	14 c0       	rjmp	.+40     	; 0x1f08 <vfprintf+0x45a>
    1ee0:	56 01       	movw	r10, r12
    1ee2:	22 e0       	ldi	r18, 0x02	; 2
    1ee4:	a2 0e       	add	r10, r18
    1ee6:	b1 1c       	adc	r11, r1
    1ee8:	f6 01       	movw	r30, r12
    1eea:	c0 80       	ld	r12, Z
    1eec:	d1 80       	ldd	r13, Z+1	; 0x01
    1eee:	96 fe       	sbrs	r9, 6
    1ef0:	03 c0       	rjmp	.+6      	; 0x1ef8 <vfprintf+0x44a>
    1ef2:	61 2f       	mov	r22, r17
    1ef4:	70 e0       	ldi	r23, 0x00	; 0
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <vfprintf+0x44e>
    1ef8:	6f ef       	ldi	r22, 0xFF	; 255
    1efa:	7f ef       	ldi	r23, 0xFF	; 255
    1efc:	c6 01       	movw	r24, r12
    1efe:	0e 94 27 12 	call	0x244e	; 0x244e <strnlen_P>
    1f02:	8c 01       	movw	r16, r24
    1f04:	f9 2d       	mov	r31, r9
    1f06:	f0 68       	ori	r31, 0x80	; 128
    1f08:	9f 2e       	mov	r9, r31
    1f0a:	f3 fd       	sbrc	r31, 3
    1f0c:	1a c0       	rjmp	.+52     	; 0x1f42 <vfprintf+0x494>
    1f0e:	85 2d       	mov	r24, r5
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	08 17       	cp	r16, r24
    1f14:	19 07       	cpc	r17, r25
    1f16:	a8 f4       	brcc	.+42     	; 0x1f42 <vfprintf+0x494>
    1f18:	b7 01       	movw	r22, r14
    1f1a:	80 e2       	ldi	r24, 0x20	; 32
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	0e 94 4b 12 	call	0x2496	; 0x2496 <fputc>
    1f22:	5a 94       	dec	r5
    1f24:	f4 cf       	rjmp	.-24     	; 0x1f0e <vfprintf+0x460>
    1f26:	f6 01       	movw	r30, r12
    1f28:	97 fc       	sbrc	r9, 7
    1f2a:	85 91       	lpm	r24, Z+
    1f2c:	97 fe       	sbrs	r9, 7
    1f2e:	81 91       	ld	r24, Z+
    1f30:	6f 01       	movw	r12, r30
    1f32:	b7 01       	movw	r22, r14
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	0e 94 4b 12 	call	0x2496	; 0x2496 <fputc>
    1f3a:	51 10       	cpse	r5, r1
    1f3c:	5a 94       	dec	r5
    1f3e:	01 50       	subi	r16, 0x01	; 1
    1f40:	11 09       	sbc	r17, r1
    1f42:	01 15       	cp	r16, r1
    1f44:	11 05       	cpc	r17, r1
    1f46:	79 f7       	brne	.-34     	; 0x1f26 <vfprintf+0x478>
    1f48:	f7 c0       	rjmp	.+494    	; 0x2138 <vfprintf+0x68a>
    1f4a:	84 36       	cpi	r24, 0x64	; 100
    1f4c:	11 f0       	breq	.+4      	; 0x1f52 <vfprintf+0x4a4>
    1f4e:	89 36       	cpi	r24, 0x69	; 105
    1f50:	61 f5       	brne	.+88     	; 0x1faa <vfprintf+0x4fc>
    1f52:	56 01       	movw	r10, r12
    1f54:	97 fe       	sbrs	r9, 7
    1f56:	09 c0       	rjmp	.+18     	; 0x1f6a <vfprintf+0x4bc>
    1f58:	24 e0       	ldi	r18, 0x04	; 4
    1f5a:	a2 0e       	add	r10, r18
    1f5c:	b1 1c       	adc	r11, r1
    1f5e:	f6 01       	movw	r30, r12
    1f60:	60 81       	ld	r22, Z
    1f62:	71 81       	ldd	r23, Z+1	; 0x01
    1f64:	82 81       	ldd	r24, Z+2	; 0x02
    1f66:	93 81       	ldd	r25, Z+3	; 0x03
    1f68:	0a c0       	rjmp	.+20     	; 0x1f7e <vfprintf+0x4d0>
    1f6a:	f2 e0       	ldi	r31, 0x02	; 2
    1f6c:	af 0e       	add	r10, r31
    1f6e:	b1 1c       	adc	r11, r1
    1f70:	f6 01       	movw	r30, r12
    1f72:	60 81       	ld	r22, Z
    1f74:	71 81       	ldd	r23, Z+1	; 0x01
    1f76:	07 2e       	mov	r0, r23
    1f78:	00 0c       	add	r0, r0
    1f7a:	88 0b       	sbc	r24, r24
    1f7c:	99 0b       	sbc	r25, r25
    1f7e:	f9 2d       	mov	r31, r9
    1f80:	ff 76       	andi	r31, 0x6F	; 111
    1f82:	9f 2e       	mov	r9, r31
    1f84:	97 ff       	sbrs	r25, 7
    1f86:	09 c0       	rjmp	.+18     	; 0x1f9a <vfprintf+0x4ec>
    1f88:	90 95       	com	r25
    1f8a:	80 95       	com	r24
    1f8c:	70 95       	com	r23
    1f8e:	61 95       	neg	r22
    1f90:	7f 4f       	sbci	r23, 0xFF	; 255
    1f92:	8f 4f       	sbci	r24, 0xFF	; 255
    1f94:	9f 4f       	sbci	r25, 0xFF	; 255
    1f96:	f0 68       	ori	r31, 0x80	; 128
    1f98:	9f 2e       	mov	r9, r31
    1f9a:	2a e0       	ldi	r18, 0x0A	; 10
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	a3 01       	movw	r20, r6
    1fa0:	0e 94 9d 12 	call	0x253a	; 0x253a <__ultoa_invert>
    1fa4:	c8 2e       	mov	r12, r24
    1fa6:	c6 18       	sub	r12, r6
    1fa8:	3f c0       	rjmp	.+126    	; 0x2028 <vfprintf+0x57a>
    1faa:	09 2d       	mov	r16, r9
    1fac:	85 37       	cpi	r24, 0x75	; 117
    1fae:	21 f4       	brne	.+8      	; 0x1fb8 <vfprintf+0x50a>
    1fb0:	0f 7e       	andi	r16, 0xEF	; 239
    1fb2:	2a e0       	ldi	r18, 0x0A	; 10
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	1d c0       	rjmp	.+58     	; 0x1ff2 <vfprintf+0x544>
    1fb8:	09 7f       	andi	r16, 0xF9	; 249
    1fba:	8f 36       	cpi	r24, 0x6F	; 111
    1fbc:	91 f0       	breq	.+36     	; 0x1fe2 <vfprintf+0x534>
    1fbe:	18 f4       	brcc	.+6      	; 0x1fc6 <vfprintf+0x518>
    1fc0:	88 35       	cpi	r24, 0x58	; 88
    1fc2:	59 f0       	breq	.+22     	; 0x1fda <vfprintf+0x52c>
    1fc4:	c3 c0       	rjmp	.+390    	; 0x214c <vfprintf+0x69e>
    1fc6:	80 37       	cpi	r24, 0x70	; 112
    1fc8:	19 f0       	breq	.+6      	; 0x1fd0 <vfprintf+0x522>
    1fca:	88 37       	cpi	r24, 0x78	; 120
    1fcc:	11 f0       	breq	.+4      	; 0x1fd2 <vfprintf+0x524>
    1fce:	be c0       	rjmp	.+380    	; 0x214c <vfprintf+0x69e>
    1fd0:	00 61       	ori	r16, 0x10	; 16
    1fd2:	04 ff       	sbrs	r16, 4
    1fd4:	09 c0       	rjmp	.+18     	; 0x1fe8 <vfprintf+0x53a>
    1fd6:	04 60       	ori	r16, 0x04	; 4
    1fd8:	07 c0       	rjmp	.+14     	; 0x1fe8 <vfprintf+0x53a>
    1fda:	94 fe       	sbrs	r9, 4
    1fdc:	08 c0       	rjmp	.+16     	; 0x1fee <vfprintf+0x540>
    1fde:	06 60       	ori	r16, 0x06	; 6
    1fe0:	06 c0       	rjmp	.+12     	; 0x1fee <vfprintf+0x540>
    1fe2:	28 e0       	ldi	r18, 0x08	; 8
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	05 c0       	rjmp	.+10     	; 0x1ff2 <vfprintf+0x544>
    1fe8:	20 e1       	ldi	r18, 0x10	; 16
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	02 c0       	rjmp	.+4      	; 0x1ff2 <vfprintf+0x544>
    1fee:	20 e1       	ldi	r18, 0x10	; 16
    1ff0:	32 e0       	ldi	r19, 0x02	; 2
    1ff2:	56 01       	movw	r10, r12
    1ff4:	07 ff       	sbrs	r16, 7
    1ff6:	09 c0       	rjmp	.+18     	; 0x200a <vfprintf+0x55c>
    1ff8:	84 e0       	ldi	r24, 0x04	; 4
    1ffa:	a8 0e       	add	r10, r24
    1ffc:	b1 1c       	adc	r11, r1
    1ffe:	f6 01       	movw	r30, r12
    2000:	60 81       	ld	r22, Z
    2002:	71 81       	ldd	r23, Z+1	; 0x01
    2004:	82 81       	ldd	r24, Z+2	; 0x02
    2006:	93 81       	ldd	r25, Z+3	; 0x03
    2008:	08 c0       	rjmp	.+16     	; 0x201a <vfprintf+0x56c>
    200a:	f2 e0       	ldi	r31, 0x02	; 2
    200c:	af 0e       	add	r10, r31
    200e:	b1 1c       	adc	r11, r1
    2010:	f6 01       	movw	r30, r12
    2012:	60 81       	ld	r22, Z
    2014:	71 81       	ldd	r23, Z+1	; 0x01
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	a3 01       	movw	r20, r6
    201c:	0e 94 9d 12 	call	0x253a	; 0x253a <__ultoa_invert>
    2020:	c8 2e       	mov	r12, r24
    2022:	c6 18       	sub	r12, r6
    2024:	0f 77       	andi	r16, 0x7F	; 127
    2026:	90 2e       	mov	r9, r16
    2028:	96 fe       	sbrs	r9, 6
    202a:	0b c0       	rjmp	.+22     	; 0x2042 <vfprintf+0x594>
    202c:	09 2d       	mov	r16, r9
    202e:	0e 7f       	andi	r16, 0xFE	; 254
    2030:	c1 16       	cp	r12, r17
    2032:	50 f4       	brcc	.+20     	; 0x2048 <vfprintf+0x59a>
    2034:	94 fe       	sbrs	r9, 4
    2036:	0a c0       	rjmp	.+20     	; 0x204c <vfprintf+0x59e>
    2038:	92 fc       	sbrc	r9, 2
    203a:	08 c0       	rjmp	.+16     	; 0x204c <vfprintf+0x59e>
    203c:	09 2d       	mov	r16, r9
    203e:	0e 7e       	andi	r16, 0xEE	; 238
    2040:	05 c0       	rjmp	.+10     	; 0x204c <vfprintf+0x59e>
    2042:	dc 2c       	mov	r13, r12
    2044:	09 2d       	mov	r16, r9
    2046:	03 c0       	rjmp	.+6      	; 0x204e <vfprintf+0x5a0>
    2048:	dc 2c       	mov	r13, r12
    204a:	01 c0       	rjmp	.+2      	; 0x204e <vfprintf+0x5a0>
    204c:	d1 2e       	mov	r13, r17
    204e:	04 ff       	sbrs	r16, 4
    2050:	0d c0       	rjmp	.+26     	; 0x206c <vfprintf+0x5be>
    2052:	fe 01       	movw	r30, r28
    2054:	ec 0d       	add	r30, r12
    2056:	f1 1d       	adc	r31, r1
    2058:	80 81       	ld	r24, Z
    205a:	80 33       	cpi	r24, 0x30	; 48
    205c:	11 f4       	brne	.+4      	; 0x2062 <vfprintf+0x5b4>
    205e:	09 7e       	andi	r16, 0xE9	; 233
    2060:	09 c0       	rjmp	.+18     	; 0x2074 <vfprintf+0x5c6>
    2062:	02 ff       	sbrs	r16, 2
    2064:	06 c0       	rjmp	.+12     	; 0x2072 <vfprintf+0x5c4>
    2066:	d3 94       	inc	r13
    2068:	d3 94       	inc	r13
    206a:	04 c0       	rjmp	.+8      	; 0x2074 <vfprintf+0x5c6>
    206c:	80 2f       	mov	r24, r16
    206e:	86 78       	andi	r24, 0x86	; 134
    2070:	09 f0       	breq	.+2      	; 0x2074 <vfprintf+0x5c6>
    2072:	d3 94       	inc	r13
    2074:	03 fd       	sbrc	r16, 3
    2076:	11 c0       	rjmp	.+34     	; 0x209a <vfprintf+0x5ec>
    2078:	00 ff       	sbrs	r16, 0
    207a:	06 c0       	rjmp	.+12     	; 0x2088 <vfprintf+0x5da>
    207c:	1c 2d       	mov	r17, r12
    207e:	d5 14       	cp	r13, r5
    2080:	80 f4       	brcc	.+32     	; 0x20a2 <vfprintf+0x5f4>
    2082:	15 0d       	add	r17, r5
    2084:	1d 19       	sub	r17, r13
    2086:	0d c0       	rjmp	.+26     	; 0x20a2 <vfprintf+0x5f4>
    2088:	d5 14       	cp	r13, r5
    208a:	58 f4       	brcc	.+22     	; 0x20a2 <vfprintf+0x5f4>
    208c:	b7 01       	movw	r22, r14
    208e:	80 e2       	ldi	r24, 0x20	; 32
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	0e 94 4b 12 	call	0x2496	; 0x2496 <fputc>
    2096:	d3 94       	inc	r13
    2098:	f7 cf       	rjmp	.-18     	; 0x2088 <vfprintf+0x5da>
    209a:	d5 14       	cp	r13, r5
    209c:	10 f4       	brcc	.+4      	; 0x20a2 <vfprintf+0x5f4>
    209e:	5d 18       	sub	r5, r13
    20a0:	01 c0       	rjmp	.+2      	; 0x20a4 <vfprintf+0x5f6>
    20a2:	51 2c       	mov	r5, r1
    20a4:	04 ff       	sbrs	r16, 4
    20a6:	10 c0       	rjmp	.+32     	; 0x20c8 <vfprintf+0x61a>
    20a8:	b7 01       	movw	r22, r14
    20aa:	80 e3       	ldi	r24, 0x30	; 48
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	0e 94 4b 12 	call	0x2496	; 0x2496 <fputc>
    20b2:	02 ff       	sbrs	r16, 2
    20b4:	17 c0       	rjmp	.+46     	; 0x20e4 <vfprintf+0x636>
    20b6:	01 fd       	sbrc	r16, 1
    20b8:	03 c0       	rjmp	.+6      	; 0x20c0 <vfprintf+0x612>
    20ba:	88 e7       	ldi	r24, 0x78	; 120
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	02 c0       	rjmp	.+4      	; 0x20c4 <vfprintf+0x616>
    20c0:	88 e5       	ldi	r24, 0x58	; 88
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	b7 01       	movw	r22, r14
    20c6:	0c c0       	rjmp	.+24     	; 0x20e0 <vfprintf+0x632>
    20c8:	80 2f       	mov	r24, r16
    20ca:	86 78       	andi	r24, 0x86	; 134
    20cc:	59 f0       	breq	.+22     	; 0x20e4 <vfprintf+0x636>
    20ce:	01 ff       	sbrs	r16, 1
    20d0:	02 c0       	rjmp	.+4      	; 0x20d6 <vfprintf+0x628>
    20d2:	8b e2       	ldi	r24, 0x2B	; 43
    20d4:	01 c0       	rjmp	.+2      	; 0x20d8 <vfprintf+0x62a>
    20d6:	80 e2       	ldi	r24, 0x20	; 32
    20d8:	07 fd       	sbrc	r16, 7
    20da:	8d e2       	ldi	r24, 0x2D	; 45
    20dc:	b7 01       	movw	r22, r14
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	0e 94 4b 12 	call	0x2496	; 0x2496 <fputc>
    20e4:	c1 16       	cp	r12, r17
    20e6:	38 f4       	brcc	.+14     	; 0x20f6 <vfprintf+0x648>
    20e8:	b7 01       	movw	r22, r14
    20ea:	80 e3       	ldi	r24, 0x30	; 48
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	0e 94 4b 12 	call	0x2496	; 0x2496 <fputc>
    20f2:	11 50       	subi	r17, 0x01	; 1
    20f4:	f7 cf       	rjmp	.-18     	; 0x20e4 <vfprintf+0x636>
    20f6:	ca 94       	dec	r12
    20f8:	f3 01       	movw	r30, r6
    20fa:	ec 0d       	add	r30, r12
    20fc:	f1 1d       	adc	r31, r1
    20fe:	80 81       	ld	r24, Z
    2100:	b7 01       	movw	r22, r14
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	0e 94 4b 12 	call	0x2496	; 0x2496 <fputc>
    2108:	c1 10       	cpse	r12, r1
    210a:	f5 cf       	rjmp	.-22     	; 0x20f6 <vfprintf+0x648>
    210c:	15 c0       	rjmp	.+42     	; 0x2138 <vfprintf+0x68a>
    210e:	f4 e0       	ldi	r31, 0x04	; 4
    2110:	f5 15       	cp	r31, r5
    2112:	60 f5       	brcc	.+88     	; 0x216c <vfprintf+0x6be>
    2114:	84 e0       	ldi	r24, 0x04	; 4
    2116:	58 1a       	sub	r5, r24
    2118:	93 fe       	sbrs	r9, 3
    211a:	1f c0       	rjmp	.+62     	; 0x215a <vfprintf+0x6ac>
    211c:	01 11       	cpse	r16, r1
    211e:	27 c0       	rjmp	.+78     	; 0x216e <vfprintf+0x6c0>
    2120:	2c 85       	ldd	r18, Y+12	; 0x0c
    2122:	23 ff       	sbrs	r18, 3
    2124:	2a c0       	rjmp	.+84     	; 0x217a <vfprintf+0x6cc>
    2126:	04 eb       	ldi	r16, 0xB4	; 180
    2128:	10 e0       	ldi	r17, 0x00	; 0
    212a:	39 2d       	mov	r19, r9
    212c:	30 71       	andi	r19, 0x10	; 16
    212e:	93 2e       	mov	r9, r19
    2130:	f8 01       	movw	r30, r16
    2132:	84 91       	lpm	r24, Z
    2134:	81 11       	cpse	r24, r1
    2136:	24 c0       	rjmp	.+72     	; 0x2180 <vfprintf+0x6d2>
    2138:	55 20       	and	r5, r5
    213a:	09 f4       	brne	.+2      	; 0x213e <vfprintf+0x690>
    213c:	e4 cc       	rjmp	.-1592   	; 0x1b06 <vfprintf+0x58>
    213e:	b7 01       	movw	r22, r14
    2140:	80 e2       	ldi	r24, 0x20	; 32
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	0e 94 4b 12 	call	0x2496	; 0x2496 <fputc>
    2148:	5a 94       	dec	r5
    214a:	f6 cf       	rjmp	.-20     	; 0x2138 <vfprintf+0x68a>
    214c:	f7 01       	movw	r30, r14
    214e:	86 81       	ldd	r24, Z+6	; 0x06
    2150:	97 81       	ldd	r25, Z+7	; 0x07
    2152:	26 c0       	rjmp	.+76     	; 0x21a0 <vfprintf+0x6f2>
    2154:	8f ef       	ldi	r24, 0xFF	; 255
    2156:	9f ef       	ldi	r25, 0xFF	; 255
    2158:	23 c0       	rjmp	.+70     	; 0x21a0 <vfprintf+0x6f2>
    215a:	b7 01       	movw	r22, r14
    215c:	80 e2       	ldi	r24, 0x20	; 32
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	0e 94 4b 12 	call	0x2496	; 0x2496 <fputc>
    2164:	5a 94       	dec	r5
    2166:	51 10       	cpse	r5, r1
    2168:	f8 cf       	rjmp	.-16     	; 0x215a <vfprintf+0x6ac>
    216a:	d8 cf       	rjmp	.-80     	; 0x211c <vfprintf+0x66e>
    216c:	51 2c       	mov	r5, r1
    216e:	b7 01       	movw	r22, r14
    2170:	80 2f       	mov	r24, r16
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	0e 94 4b 12 	call	0x2496	; 0x2496 <fputc>
    2178:	d3 cf       	rjmp	.-90     	; 0x2120 <vfprintf+0x672>
    217a:	08 eb       	ldi	r16, 0xB8	; 184
    217c:	10 e0       	ldi	r17, 0x00	; 0
    217e:	d5 cf       	rjmp	.-86     	; 0x212a <vfprintf+0x67c>
    2180:	91 10       	cpse	r9, r1
    2182:	80 52       	subi	r24, 0x20	; 32
    2184:	b7 01       	movw	r22, r14
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	0e 94 4b 12 	call	0x2496	; 0x2496 <fputc>
    218c:	0f 5f       	subi	r16, 0xFF	; 255
    218e:	1f 4f       	sbci	r17, 0xFF	; 255
    2190:	cf cf       	rjmp	.-98     	; 0x2130 <vfprintf+0x682>
    2192:	23 e0       	ldi	r18, 0x03	; 3
    2194:	25 15       	cp	r18, r5
    2196:	10 f4       	brcc	.+4      	; 0x219c <vfprintf+0x6ee>
    2198:	83 e0       	ldi	r24, 0x03	; 3
    219a:	bd cf       	rjmp	.-134    	; 0x2116 <vfprintf+0x668>
    219c:	51 2c       	mov	r5, r1
    219e:	c0 cf       	rjmp	.-128    	; 0x2120 <vfprintf+0x672>
    21a0:	60 96       	adiw	r28, 0x10	; 16
    21a2:	e2 e1       	ldi	r30, 0x12	; 18
    21a4:	0c 94 1a 11 	jmp	0x2234	; 0x2234 <__epilogue_restores__>

000021a8 <__udivmodsi4>:
    21a8:	a1 e2       	ldi	r26, 0x21	; 33
    21aa:	1a 2e       	mov	r1, r26
    21ac:	aa 1b       	sub	r26, r26
    21ae:	bb 1b       	sub	r27, r27
    21b0:	fd 01       	movw	r30, r26
    21b2:	0d c0       	rjmp	.+26     	; 0x21ce <__udivmodsi4_ep>

000021b4 <__udivmodsi4_loop>:
    21b4:	aa 1f       	adc	r26, r26
    21b6:	bb 1f       	adc	r27, r27
    21b8:	ee 1f       	adc	r30, r30
    21ba:	ff 1f       	adc	r31, r31
    21bc:	a2 17       	cp	r26, r18
    21be:	b3 07       	cpc	r27, r19
    21c0:	e4 07       	cpc	r30, r20
    21c2:	f5 07       	cpc	r31, r21
    21c4:	20 f0       	brcs	.+8      	; 0x21ce <__udivmodsi4_ep>
    21c6:	a2 1b       	sub	r26, r18
    21c8:	b3 0b       	sbc	r27, r19
    21ca:	e4 0b       	sbc	r30, r20
    21cc:	f5 0b       	sbc	r31, r21

000021ce <__udivmodsi4_ep>:
    21ce:	66 1f       	adc	r22, r22
    21d0:	77 1f       	adc	r23, r23
    21d2:	88 1f       	adc	r24, r24
    21d4:	99 1f       	adc	r25, r25
    21d6:	1a 94       	dec	r1
    21d8:	69 f7       	brne	.-38     	; 0x21b4 <__udivmodsi4_loop>
    21da:	60 95       	com	r22
    21dc:	70 95       	com	r23
    21de:	80 95       	com	r24
    21e0:	90 95       	com	r25
    21e2:	9b 01       	movw	r18, r22
    21e4:	ac 01       	movw	r20, r24
    21e6:	bd 01       	movw	r22, r26
    21e8:	cf 01       	movw	r24, r30
    21ea:	08 95       	ret

000021ec <__mulshisi3>:
    21ec:	b7 ff       	sbrs	r27, 7
    21ee:	0c 94 35 11 	jmp	0x226a	; 0x226a <__muluhisi3>

000021f2 <__mulohisi3>:
    21f2:	0e 94 35 11 	call	0x226a	; 0x226a <__muluhisi3>
    21f6:	82 1b       	sub	r24, r18
    21f8:	93 0b       	sbc	r25, r19
    21fa:	08 95       	ret

000021fc <__prologue_saves__>:
    21fc:	2f 92       	push	r2
    21fe:	3f 92       	push	r3
    2200:	4f 92       	push	r4
    2202:	5f 92       	push	r5
    2204:	6f 92       	push	r6
    2206:	7f 92       	push	r7
    2208:	8f 92       	push	r8
    220a:	9f 92       	push	r9
    220c:	af 92       	push	r10
    220e:	bf 92       	push	r11
    2210:	cf 92       	push	r12
    2212:	df 92       	push	r13
    2214:	ef 92       	push	r14
    2216:	ff 92       	push	r15
    2218:	0f 93       	push	r16
    221a:	1f 93       	push	r17
    221c:	cf 93       	push	r28
    221e:	df 93       	push	r29
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
    2224:	ca 1b       	sub	r28, r26
    2226:	db 0b       	sbc	r29, r27
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	cd bf       	out	0x3d, r28	; 61
    2232:	09 94       	ijmp

00002234 <__epilogue_restores__>:
    2234:	2a 88       	ldd	r2, Y+18	; 0x12
    2236:	39 88       	ldd	r3, Y+17	; 0x11
    2238:	48 88       	ldd	r4, Y+16	; 0x10
    223a:	5f 84       	ldd	r5, Y+15	; 0x0f
    223c:	6e 84       	ldd	r6, Y+14	; 0x0e
    223e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2240:	8c 84       	ldd	r8, Y+12	; 0x0c
    2242:	9b 84       	ldd	r9, Y+11	; 0x0b
    2244:	aa 84       	ldd	r10, Y+10	; 0x0a
    2246:	b9 84       	ldd	r11, Y+9	; 0x09
    2248:	c8 84       	ldd	r12, Y+8	; 0x08
    224a:	df 80       	ldd	r13, Y+7	; 0x07
    224c:	ee 80       	ldd	r14, Y+6	; 0x06
    224e:	fd 80       	ldd	r15, Y+5	; 0x05
    2250:	0c 81       	ldd	r16, Y+4	; 0x04
    2252:	1b 81       	ldd	r17, Y+3	; 0x03
    2254:	aa 81       	ldd	r26, Y+2	; 0x02
    2256:	b9 81       	ldd	r27, Y+1	; 0x01
    2258:	ce 0f       	add	r28, r30
    225a:	d1 1d       	adc	r29, r1
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	f8 94       	cli
    2260:	de bf       	out	0x3e, r29	; 62
    2262:	0f be       	out	0x3f, r0	; 63
    2264:	cd bf       	out	0x3d, r28	; 61
    2266:	ed 01       	movw	r28, r26
    2268:	08 95       	ret

0000226a <__muluhisi3>:
    226a:	0e 94 40 11 	call	0x2280	; 0x2280 <__umulhisi3>
    226e:	a5 9f       	mul	r26, r21
    2270:	90 0d       	add	r25, r0
    2272:	b4 9f       	mul	r27, r20
    2274:	90 0d       	add	r25, r0
    2276:	a4 9f       	mul	r26, r20
    2278:	80 0d       	add	r24, r0
    227a:	91 1d       	adc	r25, r1
    227c:	11 24       	eor	r1, r1
    227e:	08 95       	ret

00002280 <__umulhisi3>:
    2280:	a2 9f       	mul	r26, r18
    2282:	b0 01       	movw	r22, r0
    2284:	b3 9f       	mul	r27, r19
    2286:	c0 01       	movw	r24, r0
    2288:	a3 9f       	mul	r26, r19
    228a:	70 0d       	add	r23, r0
    228c:	81 1d       	adc	r24, r1
    228e:	11 24       	eor	r1, r1
    2290:	91 1d       	adc	r25, r1
    2292:	b2 9f       	mul	r27, r18
    2294:	70 0d       	add	r23, r0
    2296:	81 1d       	adc	r24, r1
    2298:	11 24       	eor	r1, r1
    229a:	91 1d       	adc	r25, r1
    229c:	08 95       	ret

0000229e <__ftoa_engine>:
    229e:	28 30       	cpi	r18, 0x08	; 8
    22a0:	08 f0       	brcs	.+2      	; 0x22a4 <__ftoa_engine+0x6>
    22a2:	27 e0       	ldi	r18, 0x07	; 7
    22a4:	33 27       	eor	r19, r19
    22a6:	da 01       	movw	r26, r20
    22a8:	99 0f       	add	r25, r25
    22aa:	31 1d       	adc	r19, r1
    22ac:	87 fd       	sbrc	r24, 7
    22ae:	91 60       	ori	r25, 0x01	; 1
    22b0:	00 96       	adiw	r24, 0x00	; 0
    22b2:	61 05       	cpc	r22, r1
    22b4:	71 05       	cpc	r23, r1
    22b6:	39 f4       	brne	.+14     	; 0x22c6 <__ftoa_engine+0x28>
    22b8:	32 60       	ori	r19, 0x02	; 2
    22ba:	2e 5f       	subi	r18, 0xFE	; 254
    22bc:	3d 93       	st	X+, r19
    22be:	30 e3       	ldi	r19, 0x30	; 48
    22c0:	2a 95       	dec	r18
    22c2:	e1 f7       	brne	.-8      	; 0x22bc <__ftoa_engine+0x1e>
    22c4:	08 95       	ret
    22c6:	9f 3f       	cpi	r25, 0xFF	; 255
    22c8:	30 f0       	brcs	.+12     	; 0x22d6 <__ftoa_engine+0x38>
    22ca:	80 38       	cpi	r24, 0x80	; 128
    22cc:	71 05       	cpc	r23, r1
    22ce:	61 05       	cpc	r22, r1
    22d0:	09 f0       	breq	.+2      	; 0x22d4 <__ftoa_engine+0x36>
    22d2:	3c 5f       	subi	r19, 0xFC	; 252
    22d4:	3c 5f       	subi	r19, 0xFC	; 252
    22d6:	3d 93       	st	X+, r19
    22d8:	91 30       	cpi	r25, 0x01	; 1
    22da:	08 f0       	brcs	.+2      	; 0x22de <__ftoa_engine+0x40>
    22dc:	80 68       	ori	r24, 0x80	; 128
    22de:	91 1d       	adc	r25, r1
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	1f 93       	push	r17
    22e6:	0f 93       	push	r16
    22e8:	ff 92       	push	r15
    22ea:	ef 92       	push	r14
    22ec:	19 2f       	mov	r17, r25
    22ee:	98 7f       	andi	r25, 0xF8	; 248
    22f0:	96 95       	lsr	r25
    22f2:	e9 2f       	mov	r30, r25
    22f4:	96 95       	lsr	r25
    22f6:	96 95       	lsr	r25
    22f8:	e9 0f       	add	r30, r25
    22fa:	ff 27       	eor	r31, r31
    22fc:	ea 5e       	subi	r30, 0xEA	; 234
    22fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2300:	99 27       	eor	r25, r25
    2302:	33 27       	eor	r19, r19
    2304:	ee 24       	eor	r14, r14
    2306:	ff 24       	eor	r15, r15
    2308:	a7 01       	movw	r20, r14
    230a:	e7 01       	movw	r28, r14
    230c:	05 90       	lpm	r0, Z+
    230e:	08 94       	sec
    2310:	07 94       	ror	r0
    2312:	28 f4       	brcc	.+10     	; 0x231e <__ftoa_engine+0x80>
    2314:	36 0f       	add	r19, r22
    2316:	e7 1e       	adc	r14, r23
    2318:	f8 1e       	adc	r15, r24
    231a:	49 1f       	adc	r20, r25
    231c:	51 1d       	adc	r21, r1
    231e:	66 0f       	add	r22, r22
    2320:	77 1f       	adc	r23, r23
    2322:	88 1f       	adc	r24, r24
    2324:	99 1f       	adc	r25, r25
    2326:	06 94       	lsr	r0
    2328:	a1 f7       	brne	.-24     	; 0x2312 <__ftoa_engine+0x74>
    232a:	05 90       	lpm	r0, Z+
    232c:	07 94       	ror	r0
    232e:	28 f4       	brcc	.+10     	; 0x233a <__ftoa_engine+0x9c>
    2330:	e7 0e       	add	r14, r23
    2332:	f8 1e       	adc	r15, r24
    2334:	49 1f       	adc	r20, r25
    2336:	56 1f       	adc	r21, r22
    2338:	c1 1d       	adc	r28, r1
    233a:	77 0f       	add	r23, r23
    233c:	88 1f       	adc	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	66 1f       	adc	r22, r22
    2342:	06 94       	lsr	r0
    2344:	a1 f7       	brne	.-24     	; 0x232e <__ftoa_engine+0x90>
    2346:	05 90       	lpm	r0, Z+
    2348:	07 94       	ror	r0
    234a:	28 f4       	brcc	.+10     	; 0x2356 <__ftoa_engine+0xb8>
    234c:	f8 0e       	add	r15, r24
    234e:	49 1f       	adc	r20, r25
    2350:	56 1f       	adc	r21, r22
    2352:	c7 1f       	adc	r28, r23
    2354:	d1 1d       	adc	r29, r1
    2356:	88 0f       	add	r24, r24
    2358:	99 1f       	adc	r25, r25
    235a:	66 1f       	adc	r22, r22
    235c:	77 1f       	adc	r23, r23
    235e:	06 94       	lsr	r0
    2360:	a1 f7       	brne	.-24     	; 0x234a <__ftoa_engine+0xac>
    2362:	05 90       	lpm	r0, Z+
    2364:	07 94       	ror	r0
    2366:	20 f4       	brcc	.+8      	; 0x2370 <__ftoa_engine+0xd2>
    2368:	49 0f       	add	r20, r25
    236a:	56 1f       	adc	r21, r22
    236c:	c7 1f       	adc	r28, r23
    236e:	d8 1f       	adc	r29, r24
    2370:	99 0f       	add	r25, r25
    2372:	66 1f       	adc	r22, r22
    2374:	77 1f       	adc	r23, r23
    2376:	88 1f       	adc	r24, r24
    2378:	06 94       	lsr	r0
    237a:	a9 f7       	brne	.-22     	; 0x2366 <__ftoa_engine+0xc8>
    237c:	84 91       	lpm	r24, Z
    237e:	10 95       	com	r17
    2380:	17 70       	andi	r17, 0x07	; 7
    2382:	41 f0       	breq	.+16     	; 0x2394 <__ftoa_engine+0xf6>
    2384:	d6 95       	lsr	r29
    2386:	c7 95       	ror	r28
    2388:	57 95       	ror	r21
    238a:	47 95       	ror	r20
    238c:	f7 94       	ror	r15
    238e:	e7 94       	ror	r14
    2390:	1a 95       	dec	r17
    2392:	c1 f7       	brne	.-16     	; 0x2384 <__ftoa_engine+0xe6>
    2394:	ec eb       	ldi	r30, 0xBC	; 188
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	68 94       	set
    239a:	15 90       	lpm	r1, Z+
    239c:	15 91       	lpm	r17, Z+
    239e:	35 91       	lpm	r19, Z+
    23a0:	65 91       	lpm	r22, Z+
    23a2:	95 91       	lpm	r25, Z+
    23a4:	05 90       	lpm	r0, Z+
    23a6:	7f e2       	ldi	r23, 0x2F	; 47
    23a8:	73 95       	inc	r23
    23aa:	e1 18       	sub	r14, r1
    23ac:	f1 0a       	sbc	r15, r17
    23ae:	43 0b       	sbc	r20, r19
    23b0:	56 0b       	sbc	r21, r22
    23b2:	c9 0b       	sbc	r28, r25
    23b4:	d0 09       	sbc	r29, r0
    23b6:	c0 f7       	brcc	.-16     	; 0x23a8 <__ftoa_engine+0x10a>
    23b8:	e1 0c       	add	r14, r1
    23ba:	f1 1e       	adc	r15, r17
    23bc:	43 1f       	adc	r20, r19
    23be:	56 1f       	adc	r21, r22
    23c0:	c9 1f       	adc	r28, r25
    23c2:	d0 1d       	adc	r29, r0
    23c4:	7e f4       	brtc	.+30     	; 0x23e4 <__ftoa_engine+0x146>
    23c6:	70 33       	cpi	r23, 0x30	; 48
    23c8:	11 f4       	brne	.+4      	; 0x23ce <__ftoa_engine+0x130>
    23ca:	8a 95       	dec	r24
    23cc:	e6 cf       	rjmp	.-52     	; 0x239a <__ftoa_engine+0xfc>
    23ce:	e8 94       	clt
    23d0:	01 50       	subi	r16, 0x01	; 1
    23d2:	30 f0       	brcs	.+12     	; 0x23e0 <__ftoa_engine+0x142>
    23d4:	08 0f       	add	r16, r24
    23d6:	0a f4       	brpl	.+2      	; 0x23da <__ftoa_engine+0x13c>
    23d8:	00 27       	eor	r16, r16
    23da:	02 17       	cp	r16, r18
    23dc:	08 f4       	brcc	.+2      	; 0x23e0 <__ftoa_engine+0x142>
    23de:	20 2f       	mov	r18, r16
    23e0:	23 95       	inc	r18
    23e2:	02 2f       	mov	r16, r18
    23e4:	7a 33       	cpi	r23, 0x3A	; 58
    23e6:	28 f0       	brcs	.+10     	; 0x23f2 <__ftoa_engine+0x154>
    23e8:	79 e3       	ldi	r23, 0x39	; 57
    23ea:	7d 93       	st	X+, r23
    23ec:	2a 95       	dec	r18
    23ee:	e9 f7       	brne	.-6      	; 0x23ea <__ftoa_engine+0x14c>
    23f0:	10 c0       	rjmp	.+32     	; 0x2412 <__ftoa_engine+0x174>
    23f2:	7d 93       	st	X+, r23
    23f4:	2a 95       	dec	r18
    23f6:	89 f6       	brne	.-94     	; 0x239a <__ftoa_engine+0xfc>
    23f8:	06 94       	lsr	r0
    23fa:	97 95       	ror	r25
    23fc:	67 95       	ror	r22
    23fe:	37 95       	ror	r19
    2400:	17 95       	ror	r17
    2402:	17 94       	ror	r1
    2404:	e1 18       	sub	r14, r1
    2406:	f1 0a       	sbc	r15, r17
    2408:	43 0b       	sbc	r20, r19
    240a:	56 0b       	sbc	r21, r22
    240c:	c9 0b       	sbc	r28, r25
    240e:	d0 09       	sbc	r29, r0
    2410:	98 f0       	brcs	.+38     	; 0x2438 <__ftoa_engine+0x19a>
    2412:	23 95       	inc	r18
    2414:	7e 91       	ld	r23, -X
    2416:	73 95       	inc	r23
    2418:	7a 33       	cpi	r23, 0x3A	; 58
    241a:	08 f0       	brcs	.+2      	; 0x241e <__ftoa_engine+0x180>
    241c:	70 e3       	ldi	r23, 0x30	; 48
    241e:	7c 93       	st	X, r23
    2420:	20 13       	cpse	r18, r16
    2422:	b8 f7       	brcc	.-18     	; 0x2412 <__ftoa_engine+0x174>
    2424:	7e 91       	ld	r23, -X
    2426:	70 61       	ori	r23, 0x10	; 16
    2428:	7d 93       	st	X+, r23
    242a:	30 f0       	brcs	.+12     	; 0x2438 <__ftoa_engine+0x19a>
    242c:	83 95       	inc	r24
    242e:	71 e3       	ldi	r23, 0x31	; 49
    2430:	7d 93       	st	X+, r23
    2432:	70 e3       	ldi	r23, 0x30	; 48
    2434:	2a 95       	dec	r18
    2436:	e1 f7       	brne	.-8      	; 0x2430 <__ftoa_engine+0x192>
    2438:	11 24       	eor	r1, r1
    243a:	ef 90       	pop	r14
    243c:	ff 90       	pop	r15
    243e:	0f 91       	pop	r16
    2440:	1f 91       	pop	r17
    2442:	cf 91       	pop	r28
    2444:	df 91       	pop	r29
    2446:	99 27       	eor	r25, r25
    2448:	87 fd       	sbrc	r24, 7
    244a:	90 95       	com	r25
    244c:	08 95       	ret

0000244e <strnlen_P>:
    244e:	fc 01       	movw	r30, r24
    2450:	05 90       	lpm	r0, Z+
    2452:	61 50       	subi	r22, 0x01	; 1
    2454:	70 40       	sbci	r23, 0x00	; 0
    2456:	01 10       	cpse	r0, r1
    2458:	d8 f7       	brcc	.-10     	; 0x2450 <strnlen_P+0x2>
    245a:	80 95       	com	r24
    245c:	90 95       	com	r25
    245e:	8e 0f       	add	r24, r30
    2460:	9f 1f       	adc	r25, r31
    2462:	08 95       	ret

00002464 <strncmp>:
    2464:	fb 01       	movw	r30, r22
    2466:	dc 01       	movw	r26, r24
    2468:	41 50       	subi	r20, 0x01	; 1
    246a:	50 40       	sbci	r21, 0x00	; 0
    246c:	30 f0       	brcs	.+12     	; 0x247a <strncmp+0x16>
    246e:	8d 91       	ld	r24, X+
    2470:	01 90       	ld	r0, Z+
    2472:	80 19       	sub	r24, r0
    2474:	19 f4       	brne	.+6      	; 0x247c <strncmp+0x18>
    2476:	00 20       	and	r0, r0
    2478:	b9 f7       	brne	.-18     	; 0x2468 <strncmp+0x4>
    247a:	88 1b       	sub	r24, r24
    247c:	99 0b       	sbc	r25, r25
    247e:	08 95       	ret

00002480 <strnlen>:
    2480:	fc 01       	movw	r30, r24
    2482:	61 50       	subi	r22, 0x01	; 1
    2484:	70 40       	sbci	r23, 0x00	; 0
    2486:	01 90       	ld	r0, Z+
    2488:	01 10       	cpse	r0, r1
    248a:	d8 f7       	brcc	.-10     	; 0x2482 <strnlen+0x2>
    248c:	80 95       	com	r24
    248e:	90 95       	com	r25
    2490:	8e 0f       	add	r24, r30
    2492:	9f 1f       	adc	r25, r31
    2494:	08 95       	ret

00002496 <fputc>:
    2496:	0f 93       	push	r16
    2498:	1f 93       	push	r17
    249a:	cf 93       	push	r28
    249c:	df 93       	push	r29
    249e:	fb 01       	movw	r30, r22
    24a0:	23 81       	ldd	r18, Z+3	; 0x03
    24a2:	21 fd       	sbrc	r18, 1
    24a4:	03 c0       	rjmp	.+6      	; 0x24ac <fputc+0x16>
    24a6:	8f ef       	ldi	r24, 0xFF	; 255
    24a8:	9f ef       	ldi	r25, 0xFF	; 255
    24aa:	2c c0       	rjmp	.+88     	; 0x2504 <fputc+0x6e>
    24ac:	22 ff       	sbrs	r18, 2
    24ae:	16 c0       	rjmp	.+44     	; 0x24dc <fputc+0x46>
    24b0:	46 81       	ldd	r20, Z+6	; 0x06
    24b2:	57 81       	ldd	r21, Z+7	; 0x07
    24b4:	24 81       	ldd	r18, Z+4	; 0x04
    24b6:	35 81       	ldd	r19, Z+5	; 0x05
    24b8:	42 17       	cp	r20, r18
    24ba:	53 07       	cpc	r21, r19
    24bc:	44 f4       	brge	.+16     	; 0x24ce <fputc+0x38>
    24be:	a0 81       	ld	r26, Z
    24c0:	b1 81       	ldd	r27, Z+1	; 0x01
    24c2:	9d 01       	movw	r18, r26
    24c4:	2f 5f       	subi	r18, 0xFF	; 255
    24c6:	3f 4f       	sbci	r19, 0xFF	; 255
    24c8:	31 83       	std	Z+1, r19	; 0x01
    24ca:	20 83       	st	Z, r18
    24cc:	8c 93       	st	X, r24
    24ce:	26 81       	ldd	r18, Z+6	; 0x06
    24d0:	37 81       	ldd	r19, Z+7	; 0x07
    24d2:	2f 5f       	subi	r18, 0xFF	; 255
    24d4:	3f 4f       	sbci	r19, 0xFF	; 255
    24d6:	37 83       	std	Z+7, r19	; 0x07
    24d8:	26 83       	std	Z+6, r18	; 0x06
    24da:	14 c0       	rjmp	.+40     	; 0x2504 <fputc+0x6e>
    24dc:	8b 01       	movw	r16, r22
    24de:	ec 01       	movw	r28, r24
    24e0:	fb 01       	movw	r30, r22
    24e2:	00 84       	ldd	r0, Z+8	; 0x08
    24e4:	f1 85       	ldd	r31, Z+9	; 0x09
    24e6:	e0 2d       	mov	r30, r0
    24e8:	09 95       	icall
    24ea:	89 2b       	or	r24, r25
    24ec:	e1 f6       	brne	.-72     	; 0x24a6 <fputc+0x10>
    24ee:	d8 01       	movw	r26, r16
    24f0:	16 96       	adiw	r26, 0x06	; 6
    24f2:	8d 91       	ld	r24, X+
    24f4:	9c 91       	ld	r25, X
    24f6:	17 97       	sbiw	r26, 0x07	; 7
    24f8:	01 96       	adiw	r24, 0x01	; 1
    24fa:	17 96       	adiw	r26, 0x07	; 7
    24fc:	9c 93       	st	X, r25
    24fe:	8e 93       	st	-X, r24
    2500:	16 97       	sbiw	r26, 0x06	; 6
    2502:	ce 01       	movw	r24, r28
    2504:	df 91       	pop	r29
    2506:	cf 91       	pop	r28
    2508:	1f 91       	pop	r17
    250a:	0f 91       	pop	r16
    250c:	08 95       	ret

0000250e <printf>:
    250e:	a0 e0       	ldi	r26, 0x00	; 0
    2510:	b0 e0       	ldi	r27, 0x00	; 0
    2512:	ed e8       	ldi	r30, 0x8D	; 141
    2514:	f2 e1       	ldi	r31, 0x12	; 18
    2516:	0c 94 0e 11 	jmp	0x221c	; 0x221c <__prologue_saves__+0x20>
    251a:	ae 01       	movw	r20, r28
    251c:	4b 5f       	subi	r20, 0xFB	; 251
    251e:	5f 4f       	sbci	r21, 0xFF	; 255
    2520:	fa 01       	movw	r30, r20
    2522:	61 91       	ld	r22, Z+
    2524:	71 91       	ld	r23, Z+
    2526:	af 01       	movw	r20, r30
    2528:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <__iob+0x2>
    252c:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <__iob+0x3>
    2530:	0e 94 57 0d 	call	0x1aae	; 0x1aae <vfprintf>
    2534:	e2 e0       	ldi	r30, 0x02	; 2
    2536:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <__epilogue_restores__+0x20>

0000253a <__ultoa_invert>:
    253a:	fa 01       	movw	r30, r20
    253c:	aa 27       	eor	r26, r26
    253e:	28 30       	cpi	r18, 0x08	; 8
    2540:	51 f1       	breq	.+84     	; 0x2596 <__ultoa_invert+0x5c>
    2542:	20 31       	cpi	r18, 0x10	; 16
    2544:	81 f1       	breq	.+96     	; 0x25a6 <__ultoa_invert+0x6c>
    2546:	e8 94       	clt
    2548:	6f 93       	push	r22
    254a:	6e 7f       	andi	r22, 0xFE	; 254
    254c:	6e 5f       	subi	r22, 0xFE	; 254
    254e:	7f 4f       	sbci	r23, 0xFF	; 255
    2550:	8f 4f       	sbci	r24, 0xFF	; 255
    2552:	9f 4f       	sbci	r25, 0xFF	; 255
    2554:	af 4f       	sbci	r26, 0xFF	; 255
    2556:	b1 e0       	ldi	r27, 0x01	; 1
    2558:	3e d0       	rcall	.+124    	; 0x25d6 <__ultoa_invert+0x9c>
    255a:	b4 e0       	ldi	r27, 0x04	; 4
    255c:	3c d0       	rcall	.+120    	; 0x25d6 <__ultoa_invert+0x9c>
    255e:	67 0f       	add	r22, r23
    2560:	78 1f       	adc	r23, r24
    2562:	89 1f       	adc	r24, r25
    2564:	9a 1f       	adc	r25, r26
    2566:	a1 1d       	adc	r26, r1
    2568:	68 0f       	add	r22, r24
    256a:	79 1f       	adc	r23, r25
    256c:	8a 1f       	adc	r24, r26
    256e:	91 1d       	adc	r25, r1
    2570:	a1 1d       	adc	r26, r1
    2572:	6a 0f       	add	r22, r26
    2574:	71 1d       	adc	r23, r1
    2576:	81 1d       	adc	r24, r1
    2578:	91 1d       	adc	r25, r1
    257a:	a1 1d       	adc	r26, r1
    257c:	20 d0       	rcall	.+64     	; 0x25be <__ultoa_invert+0x84>
    257e:	09 f4       	brne	.+2      	; 0x2582 <__ultoa_invert+0x48>
    2580:	68 94       	set
    2582:	3f 91       	pop	r19
    2584:	2a e0       	ldi	r18, 0x0A	; 10
    2586:	26 9f       	mul	r18, r22
    2588:	11 24       	eor	r1, r1
    258a:	30 19       	sub	r19, r0
    258c:	30 5d       	subi	r19, 0xD0	; 208
    258e:	31 93       	st	Z+, r19
    2590:	de f6       	brtc	.-74     	; 0x2548 <__ultoa_invert+0xe>
    2592:	cf 01       	movw	r24, r30
    2594:	08 95       	ret
    2596:	46 2f       	mov	r20, r22
    2598:	47 70       	andi	r20, 0x07	; 7
    259a:	40 5d       	subi	r20, 0xD0	; 208
    259c:	41 93       	st	Z+, r20
    259e:	b3 e0       	ldi	r27, 0x03	; 3
    25a0:	0f d0       	rcall	.+30     	; 0x25c0 <__ultoa_invert+0x86>
    25a2:	c9 f7       	brne	.-14     	; 0x2596 <__ultoa_invert+0x5c>
    25a4:	f6 cf       	rjmp	.-20     	; 0x2592 <__ultoa_invert+0x58>
    25a6:	46 2f       	mov	r20, r22
    25a8:	4f 70       	andi	r20, 0x0F	; 15
    25aa:	40 5d       	subi	r20, 0xD0	; 208
    25ac:	4a 33       	cpi	r20, 0x3A	; 58
    25ae:	18 f0       	brcs	.+6      	; 0x25b6 <__ultoa_invert+0x7c>
    25b0:	49 5d       	subi	r20, 0xD9	; 217
    25b2:	31 fd       	sbrc	r19, 1
    25b4:	40 52       	subi	r20, 0x20	; 32
    25b6:	41 93       	st	Z+, r20
    25b8:	02 d0       	rcall	.+4      	; 0x25be <__ultoa_invert+0x84>
    25ba:	a9 f7       	brne	.-22     	; 0x25a6 <__ultoa_invert+0x6c>
    25bc:	ea cf       	rjmp	.-44     	; 0x2592 <__ultoa_invert+0x58>
    25be:	b4 e0       	ldi	r27, 0x04	; 4
    25c0:	a6 95       	lsr	r26
    25c2:	97 95       	ror	r25
    25c4:	87 95       	ror	r24
    25c6:	77 95       	ror	r23
    25c8:	67 95       	ror	r22
    25ca:	ba 95       	dec	r27
    25cc:	c9 f7       	brne	.-14     	; 0x25c0 <__ultoa_invert+0x86>
    25ce:	00 97       	sbiw	r24, 0x00	; 0
    25d0:	61 05       	cpc	r22, r1
    25d2:	71 05       	cpc	r23, r1
    25d4:	08 95       	ret
    25d6:	9b 01       	movw	r18, r22
    25d8:	ac 01       	movw	r20, r24
    25da:	0a 2e       	mov	r0, r26
    25dc:	06 94       	lsr	r0
    25de:	57 95       	ror	r21
    25e0:	47 95       	ror	r20
    25e2:	37 95       	ror	r19
    25e4:	27 95       	ror	r18
    25e6:	ba 95       	dec	r27
    25e8:	c9 f7       	brne	.-14     	; 0x25dc <__ultoa_invert+0xa2>
    25ea:	62 0f       	add	r22, r18
    25ec:	73 1f       	adc	r23, r19
    25ee:	84 1f       	adc	r24, r20
    25f0:	95 1f       	adc	r25, r21
    25f2:	a0 1d       	adc	r26, r0
    25f4:	08 95       	ret

000025f6 <_exit>:
    25f6:	f8 94       	cli

000025f8 <__stop_program>:
    25f8:	ff cf       	rjmp	.-2      	; 0x25f8 <__stop_program>
