
Gps_nano.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000340  000003d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000340  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a9  00800102  00800102  000003d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c14  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000946  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000703  00000000  00000000  00001a92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  00002198  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000525  00000000  00000000  000023e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e8  00000000  00000000  00002909  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00002bf1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 3a       	cpi	r26, 0xAB	; 171
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <main>
  9e:	0c 94 9e 01 	jmp	0x33c	; 0x33c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPS_init>:
}

void setup()
{
	I2C_setCallbacks(I2C_received, I2C_requested);					// set received/requested callbacks
	i2c_init(I2C_ADD);
  a6:	52 98       	cbi	0x0a, 2	; 10
  a8:	8b b1       	in	r24, 0x0b	; 11
  aa:	8b b9       	out	0x0b, r24	; 11
  ac:	e8 9a       	sbi	0x1d, 0	; 29
  ae:	e9 e6       	ldi	r30, 0x69	; 105
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	83 60       	ori	r24, 0x03	; 3
  b6:	80 83       	st	Z, r24
  b8:	78 94       	sei
  ba:	08 95       	ret

000000bc <stop_gps_sample>:
  bc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
  c0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
  c4:	08 95       	ret

000000c6 <check_gps_data>:
  c6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	91 f5       	brne	.+100    	; 0x132 <check_gps_data+0x6c>
  ce:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  d2:	8a 30       	cpi	r24, 0x0A	; 10
  d4:	a1 f4       	brne	.+40     	; 0xfe <check_gps_data+0x38>
  d6:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <package>
  da:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <byte>
  de:	21 e5       	ldi	r18, 0x51	; 81
  e0:	e2 9f       	mul	r30, r18
  e2:	f0 01       	movw	r30, r0
  e4:	11 24       	eor	r1, r1
  e6:	e7 5f       	subi	r30, 0xF7	; 247
  e8:	fe 4f       	sbci	r31, 0xFE	; 254
  ea:	80 83       	st	Z, r24
  ec:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <package>
  f0:	8f 5f       	subi	r24, 0xFF	; 255
  f2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <package>
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <byte>
  fc:	14 c0       	rjmp	.+40     	; 0x126 <check_gps_data+0x60>
  fe:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <package>
 102:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <byte>
 106:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 10a:	21 e5       	ldi	r18, 0x51	; 81
 10c:	e2 9f       	mul	r30, r18
 10e:	f0 01       	movw	r30, r0
 110:	11 24       	eor	r1, r1
 112:	e7 5f       	subi	r30, 0xF7	; 247
 114:	fe 4f       	sbci	r31, 0xFE	; 254
 116:	e9 0f       	add	r30, r25
 118:	f1 1d       	adc	r31, r1
 11a:	81 83       	std	Z+1, r24	; 0x01
 11c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <byte>
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <byte>
 126:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <package>
 12a:	82 30       	cpi	r24, 0x02	; 2
 12c:	10 f0       	brcs	.+4      	; 0x132 <check_gps_data+0x6c>
 12e:	0e 94 5e 00 	call	0xbc	; 0xbc <stop_gps_sample>
 132:	08 95       	ret

00000134 <printing_data>:
 134:	8f 92       	push	r8
 136:	9f 92       	push	r9
 138:	af 92       	push	r10
 13a:	bf 92       	push	r11
 13c:	cf 92       	push	r12
 13e:	df 92       	push	r13
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 150:	81 11       	cpse	r24, r1
 152:	35 c0       	rjmp	.+106    	; 0x1be <printing_data+0x8a>
 154:	09 e0       	ldi	r16, 0x09	; 9
 156:	11 e0       	ldi	r17, 0x01	; 1
 158:	0f 2e       	mov	r0, r31
 15a:	fa e0       	ldi	r31, 0x0A	; 10
 15c:	cf 2e       	mov	r12, r31
 15e:	f1 e0       	ldi	r31, 0x01	; 1
 160:	df 2e       	mov	r13, r31
 162:	f0 2d       	mov	r31, r0
 164:	0f 2e       	mov	r0, r31
 166:	fb ea       	ldi	r31, 0xAB	; 171
 168:	af 2e       	mov	r10, r31
 16a:	f1 e0       	ldi	r31, 0x01	; 1
 16c:	bf 2e       	mov	r11, r31
 16e:	f0 2d       	mov	r31, r0
 170:	20 c0       	rjmp	.+64     	; 0x1b2 <printing_data+0x7e>
 172:	e6 01       	movw	r28, r12
 174:	81 2c       	mov	r8, r1
 176:	91 2c       	mov	r9, r1
 178:	89 91       	ld	r24, Y+
 17a:	0e 94 66 01 	call	0x2cc	; 0x2cc <usart_send>
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	88 1a       	sub	r8, r24
 182:	98 0a       	sbc	r9, r24
 184:	f7 01       	movw	r30, r14
 186:	80 81       	ld	r24, Z
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	88 16       	cp	r8, r24
 18c:	99 06       	cpc	r9, r25
 18e:	a4 f3       	brlt	.-24     	; 0x178 <printing_data+0x44>
 190:	1a c0       	rjmp	.+52     	; 0x1c6 <printing_data+0x92>
 192:	11 92       	st	Z+, r1
 194:	e0 17       	cp	r30, r16
 196:	f1 07       	cpc	r31, r17
 198:	e1 f7       	brne	.-8      	; 0x192 <printing_data+0x5e>
 19a:	8d e0       	ldi	r24, 0x0D	; 13
 19c:	0e 94 66 01 	call	0x2cc	; 0x2cc <usart_send>
 1a0:	8a e0       	ldi	r24, 0x0A	; 10
 1a2:	0e 94 66 01 	call	0x2cc	; 0x2cc <usart_send>
 1a6:	f1 e5       	ldi	r31, 0x51	; 81
 1a8:	cf 0e       	add	r12, r31
 1aa:	d1 1c       	adc	r13, r1
 1ac:	a0 16       	cp	r10, r16
 1ae:	b1 06       	cpc	r11, r17
 1b0:	31 f0       	breq	.+12     	; 0x1be <printing_data+0x8a>
 1b2:	78 01       	movw	r14, r16
 1b4:	f8 01       	movw	r30, r16
 1b6:	80 81       	ld	r24, Z
 1b8:	81 11       	cpse	r24, r1
 1ba:	db cf       	rjmp	.-74     	; 0x172 <printing_data+0x3e>
 1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <printing_data+0x92>
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1c4:	04 c0       	rjmp	.+8      	; 0x1ce <printing_data+0x9a>
 1c6:	0f 5a       	subi	r16, 0xAF	; 175
 1c8:	1f 4f       	sbci	r17, 0xFF	; 255
 1ca:	f6 01       	movw	r30, r12
 1cc:	e2 cf       	rjmp	.-60     	; 0x192 <printing_data+0x5e>
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	ff 90       	pop	r15
 1d8:	ef 90       	pop	r14
 1da:	df 90       	pop	r13
 1dc:	cf 90       	pop	r12
 1de:	bf 90       	pop	r11
 1e0:	af 90       	pop	r10
 1e2:	9f 90       	pop	r9
 1e4:	8f 90       	pop	r8
 1e6:	08 95       	ret

000001e8 <__vector_1>:
}



ISR(INT0_vect)
{
 1e8:	1f 92       	push	r1
 1ea:	0f 92       	push	r0
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	0f 92       	push	r0
 1f0:	11 24       	eor	r1, r1
 1f2:	8f 93       	push	r24
process=1;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
package=0;
 1fa:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <package>
byte=-1;
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <byte>
 204:	8f 91       	pop	r24
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <__vector_24>:

// TWI Interrupt!! 


ISR(TWI_vect)
{
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	2f 93       	push	r18
 21c:	3f 93       	push	r19
 21e:	4f 93       	push	r20
 220:	5f 93       	push	r21
 222:	6f 93       	push	r22
 224:	7f 93       	push	r23
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
 22a:	af 93       	push	r26
 22c:	bf 93       	push	r27
 22e:	ef 93       	push	r30
 230:	ff 93       	push	r31
	switch(TW_STATUS)
 232:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 236:	88 7f       	andi	r24, 0xF8	; 248
 238:	80 38       	cpi	r24, 0x80	; 128
 23a:	49 f0       	breq	.+18     	; 0x24e <__vector_24+0x3e>
 23c:	18 f4       	brcc	.+6      	; 0x244 <__vector_24+0x34>
 23e:	88 23       	and	r24, r24
 240:	f1 f0       	breq	.+60     	; 0x27e <__vector_24+0x6e>
 242:	23 c0       	rjmp	.+70     	; 0x28a <__vector_24+0x7a>
 244:	88 3a       	cpi	r24, 0xA8	; 168
 246:	71 f0       	breq	.+28     	; 0x264 <__vector_24+0x54>
 248:	88 3b       	cpi	r24, 0xB8	; 184
 24a:	a9 f0       	breq	.+42     	; 0x276 <__vector_24+0x66>
 24c:	1e c0       	rjmp	.+60     	; 0x28a <__vector_24+0x7a>
	{
		case TW_SR_DATA_ACK:
		// received data from master, call the receive callback
		I2C_recieve(TWDR);
 24e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 252:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <I2C_recieve>
 256:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <I2C_recieve+0x1>
 25a:	09 95       	icall
		
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 25c:	85 ec       	ldi	r24, 0xC5	; 197
 25e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
 262:	16 c0       	rjmp	.+44     	; 0x290 <__vector_24+0x80>
		
		case TW_ST_SLA_ACK:
		// master is requesting data, call the request callback
		I2C_data_request();
 264:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <I2C_data_request>
 268:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <I2C_data_request+0x1>
 26c:	09 95       	icall
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 26e:	85 ec       	ldi	r24, 0xC5	; 197
 270:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
 274:	0d c0       	rjmp	.+26     	; 0x290 <__vector_24+0x80>
		
		case TW_ST_DATA_ACK:
		// master is requesting data, call the request callback
	
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 276:	85 ec       	ldi	r24, 0xC5	; 197
 278:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		
		break;
 27c:	09 c0       	rjmp	.+18     	; 0x290 <__vector_24+0x80>
		
		case TW_BUS_ERROR:
		// some sort of erroneous state, prepare TWI to be readdressed
		TWCR = 0;
 27e:	ec eb       	ldi	r30, 0xBC	; 188
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	10 82       	st	Z, r1
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 284:	85 ec       	ldi	r24, 0xC5	; 197
 286:	80 83       	st	Z, r24
		break;
 288:	03 c0       	rjmp	.+6      	; 0x290 <__vector_24+0x80>
		
		default:
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 28a:	85 ec       	ldi	r24, 0xC5	; 197
 28c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
	}
}
 290:	ff 91       	pop	r31
 292:	ef 91       	pop	r30
 294:	bf 91       	pop	r27
 296:	af 91       	pop	r26
 298:	9f 91       	pop	r25
 29a:	8f 91       	pop	r24
 29c:	7f 91       	pop	r23
 29e:	6f 91       	pop	r22
 2a0:	5f 91       	pop	r21
 2a2:	4f 91       	pop	r20
 2a4:	3f 91       	pop	r19
 2a6:	2f 91       	pop	r18
 2a8:	0f 90       	pop	r0
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	0f 90       	pop	r0
 2ae:	1f 90       	pop	r1
 2b0:	18 95       	reti

000002b2 <main>:
#include "i2c_atmega_328p_slave.h"
#include <util/delay.h>

int main(void)
{
	DDRD = 0x00; // I/O PD0-PD7 set as input
 2b2:	1a b8       	out	0x0a, r1	; 10
	DDRC = 0xF0; // I/O board PC0..3 as inputs, for buttons
 2b4:	80 ef       	ldi	r24, 0xF0	; 240
 2b6:	87 b9       	out	0x07, r24	; 7
	PORTD = 0x00; // Enable internal pull at PC0...3 inputs
 2b8:	1b b8       	out	0x0b, r1	; 11
	PORTC = 0x30; // Enable internal pull at PC0...3 3 inputs
 2ba:	80 e3       	ldi	r24, 0x30	; 48
 2bc:	88 b9       	out	0x08, r24	; 8
	
	usart_init();
 2be:	0e 94 6e 01 	call	0x2dc	; 0x2dc <usart_init>
	GPS_init();
 2c2:	0e 94 53 00 	call	0xa6	; 0xa6 <GPS_init>
	

	while(1)
	{		
		printing_data();
 2c6:	0e 94 9a 00 	call	0x134	; 0x134 <printing_data>
 2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <main+0x14>

000002cc <usart_send>:
	while(!(UCSR0A & (1<<RXC0))); //wait for new data
	return UDR0; //received data
}

void usart_send( unsigned char data){
	while(!(UCSR0A & (1<<UDRE0))); //wait for transmit buffer
 2cc:	e0 ec       	ldi	r30, 0xC0	; 192
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	90 81       	ld	r25, Z
 2d2:	95 ff       	sbrs	r25, 5
 2d4:	fd cf       	rjmp	.-6      	; 0x2d0 <usart_send+0x4>
	UDR0 = data; //data to be sent
 2d6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2da:	08 95       	ret

000002dc <usart_init>:
}

void usart_init(void)
{
	UBRR0H = (uint8_t)(BAUD_PRESCALER>>8);
 2dc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALER);
 2e0:	83 e3       	ldi	r24, 0x33	; 51
 2e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)| (1<<RXCIE0);
 2e6:	88 e9       	ldi	r24, 0x98	; 152
 2e8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
 2ec:	86 e0       	ldi	r24, 0x06	; 6
 2ee:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 2f2:	08 95       	ret

000002f4 <__vector_18>:
}


ISR(USART_RX_vect)
{		
 2f4:	1f 92       	push	r1
 2f6:	0f 92       	push	r0
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	0f 92       	push	r0
 2fc:	11 24       	eor	r1, r1
 2fe:	2f 93       	push	r18
 300:	3f 93       	push	r19
 302:	4f 93       	push	r20
 304:	5f 93       	push	r21
 306:	6f 93       	push	r22
 308:	7f 93       	push	r23
 30a:	8f 93       	push	r24
 30c:	9f 93       	push	r25
 30e:	af 93       	push	r26
 310:	bf 93       	push	r27
 312:	ef 93       	push	r30
 314:	ff 93       	push	r31
	check_gps_data();
 316:	0e 94 63 00 	call	0xc6	; 0xc6 <check_gps_data>
 31a:	ff 91       	pop	r31
 31c:	ef 91       	pop	r30
 31e:	bf 91       	pop	r27
 320:	af 91       	pop	r26
 322:	9f 91       	pop	r25
 324:	8f 91       	pop	r24
 326:	7f 91       	pop	r23
 328:	6f 91       	pop	r22
 32a:	5f 91       	pop	r21
 32c:	4f 91       	pop	r20
 32e:	3f 91       	pop	r19
 330:	2f 91       	pop	r18
 332:	0f 90       	pop	r0
 334:	0f be       	out	0x3f, r0	; 63
 336:	0f 90       	pop	r0
 338:	1f 90       	pop	r1
 33a:	18 95       	reti

0000033c <_exit>:
 33c:	f8 94       	cli

0000033e <__stop_program>:
 33e:	ff cf       	rjmp	.-2      	; 0x33e <__stop_program>
