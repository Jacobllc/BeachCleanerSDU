
Gps_nano.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000408  0000049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000408  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000aa  00800102  00800102  0000049e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000049e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dc5  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000968  00000000  00000000  000013f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ea  00000000  00000000  00001d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  00002548  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058e  00000000  00000000  000027f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e8  00000000  00000000  00002d82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000306a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e0       	ldi	r30, 0x08	; 8
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 3a       	cpi	r26, 0xAC	; 172
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bb 01 	call	0x376	; 0x376 <main>
  9e:	0c 94 02 02 	jmp	0x404	; 0x404 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_received>:
}


void I2C_received(uint8_t received_data)							//isr on receiving a byte on i2c
{
	command = received_data;								
  a6:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <command>
  aa:	08 95       	ret

000000ac <GPS_init>:

GPS Gps_data[Nr_msg];

void GPS_init(void)
{				
	DDRD &= ~(1 << DDD2);	             // PD2 set as input
  ac:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (0 << PORTD2);				 // turn OFF the Pull-up
  ae:	8b b1       	in	r24, 0x0b	; 11
  b0:	8b b9       	out	0x0b, r24	; 11
	EIMSK |= (1<<INT0);
  b2:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1 << ISC00)| (1 << ISC01); // set INT0 to trigger on falling edge logic change
  b4:	e9 e6       	ldi	r30, 0x69	; 105
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	83 60       	ori	r24, 0x03	; 3
  bc:	80 83       	st	Z, r24
	sei();								 // turn on interrupts
  be:	78 94       	sei
  c0:	08 95       	ret

000000c2 <stop_gps_sample>:
}


void stop_gps_sample(void)
{
	process=0;
  c2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	print_flag=0;
  c6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
  ca:	08 95       	ret

000000cc <check_gps_data>:
}


void check_gps_data(void)
{
	if (process==1)
  cc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	91 f5       	brne	.+100    	; 0x138 <check_gps_data+0x6c>
	{
		if (UDR0=='\n')
  d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  d8:	8a 30       	cpi	r24, 0x0A	; 10
  da:	a1 f4       	brne	.+40     	; 0x104 <check_gps_data+0x38>
		{
			Gps_data[package].length=byte;
  dc:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <package>
  e0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <byte>
  e4:	21 e5       	ldi	r18, 0x51	; 81
  e6:	e2 9f       	mul	r30, r18
  e8:	f0 01       	movw	r30, r0
  ea:	11 24       	eor	r1, r1
  ec:	e7 5f       	subi	r30, 0xF7	; 247
  ee:	fe 4f       	sbci	r31, 0xFE	; 254
  f0:	80 83       	st	Z, r24
			package++;
  f2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <package>
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <package>
			byte=-1;
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <byte>
 102:	14 c0       	rjmp	.+40     	; 0x12c <check_gps_data+0x60>
		}
		else
		{
			Gps_data[package].data[byte]=UDR0;
 104:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <package>
 108:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <byte>
 10c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 110:	21 e5       	ldi	r18, 0x51	; 81
 112:	e2 9f       	mul	r30, r18
 114:	f0 01       	movw	r30, r0
 116:	11 24       	eor	r1, r1
 118:	e7 5f       	subi	r30, 0xF7	; 247
 11a:	fe 4f       	sbci	r31, 0xFE	; 254
 11c:	e9 0f       	add	r30, r25
 11e:	f1 1d       	adc	r31, r1
 120:	81 83       	std	Z+1, r24	; 0x01
			byte++;
 122:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <byte>
 126:	8f 5f       	subi	r24, 0xFF	; 255
 128:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <byte>
		}


		if (package>=Nr_msg)
 12c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <package>
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	10 f0       	brcs	.+4      	; 0x138 <check_gps_data+0x6c>
		{
			stop_gps_sample();
 134:	0e 94 61 00 	call	0xc2	; 0xc2 <stop_gps_sample>
 138:	08 95       	ret

0000013a <printing_data>:
	print_flag=0;
}


void printing_data(void)
{
 13a:	8f 92       	push	r8
 13c:	9f 92       	push	r9
 13e:	af 92       	push	r10
 140:	bf 92       	push	r11
 142:	cf 92       	push	r12
 144:	df 92       	push	r13
 146:	ef 92       	push	r14
 148:	ff 92       	push	r15
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
if (print_flag==0)
 152:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 156:	81 11       	cpse	r24, r1
 158:	35 c0       	rjmp	.+106    	; 0x1c4 <printing_data+0x8a>
 15a:	09 e0       	ldi	r16, 0x09	; 9
 15c:	11 e0       	ldi	r17, 0x01	; 1
 15e:	0f 2e       	mov	r0, r31
 160:	fa e0       	ldi	r31, 0x0A	; 10
 162:	cf 2e       	mov	r12, r31
 164:	f1 e0       	ldi	r31, 0x01	; 1
 166:	df 2e       	mov	r13, r31
 168:	f0 2d       	mov	r31, r0
 16a:	0f 2e       	mov	r0, r31
 16c:	fb ea       	ldi	r31, 0xAB	; 171
 16e:	af 2e       	mov	r10, r31
 170:	f1 e0       	ldi	r31, 0x01	; 1
 172:	bf 2e       	mov	r11, r31
 174:	f0 2d       	mov	r31, r0
 176:	20 c0       	rjmp	.+64     	; 0x1b8 <printing_data+0x7e>
{

for (int i=0; i<Nr_msg; i++)
{

	for (int j=0; j<Gps_data[i].length; j++)
 178:	e6 01       	movw	r28, r12
 17a:	81 2c       	mov	r8, r1
 17c:	91 2c       	mov	r9, r1
	{
		usart_send(Gps_data[i].data[j]);
 17e:	89 91       	ld	r24, Y+
 180:	0e 94 ca 01 	call	0x394	; 0x394 <usart_send>
{

for (int i=0; i<Nr_msg; i++)
{

	for (int j=0; j<Gps_data[i].length; j++)
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	88 1a       	sub	r8, r24
 188:	98 0a       	sbc	r9, r24
 18a:	f7 01       	movw	r30, r14
 18c:	80 81       	ld	r24, Z
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	88 16       	cp	r8, r24
 192:	99 06       	cpc	r9, r25
 194:	a4 f3       	brlt	.-24     	; 0x17e <printing_data+0x44>
 196:	1a c0       	rjmp	.+52     	; 0x1cc <printing_data+0x92>

	//nmea_checksum(Gps_data[i].data);
	
	for (int j=0; j<=79; j++)
	{
		Gps_data[i].data[j]=0;
 198:	11 92       	st	Z+, r1
		usart_send(Gps_data[i].data[j]);
	}

	//nmea_checksum(Gps_data[i].data);
	
	for (int j=0; j<=79; j++)
 19a:	e0 17       	cp	r30, r16
 19c:	f1 07       	cpc	r31, r17
 19e:	e1 f7       	brne	.-8      	; 0x198 <printing_data+0x5e>
	{
		Gps_data[i].data[j]=0;
	}

	usart_send('\r');
 1a0:	8d e0       	ldi	r24, 0x0D	; 13
 1a2:	0e 94 ca 01 	call	0x394	; 0x394 <usart_send>
	usart_send('\n');
 1a6:	8a e0       	ldi	r24, 0x0A	; 10
 1a8:	0e 94 ca 01 	call	0x394	; 0x394 <usart_send>
 1ac:	f1 e5       	ldi	r31, 0x51	; 81
 1ae:	cf 0e       	add	r12, r31
 1b0:	d1 1c       	adc	r13, r1
void printing_data(void)
{
if (print_flag==0)
{

for (int i=0; i<Nr_msg; i++)
 1b2:	a0 16       	cp	r10, r16
 1b4:	b1 06       	cpc	r11, r17
 1b6:	31 f0       	breq	.+12     	; 0x1c4 <printing_data+0x8a>
 1b8:	78 01       	movw	r14, r16
{

	for (int j=0; j<Gps_data[i].length; j++)
 1ba:	f8 01       	movw	r30, r16
 1bc:	80 81       	ld	r24, Z
 1be:	81 11       	cpse	r24, r1
 1c0:	db cf       	rjmp	.-74     	; 0x178 <printing_data+0x3e>
 1c2:	04 c0       	rjmp	.+8      	; 0x1cc <printing_data+0x92>
	usart_send('\n');
	
}

}
print_flag=1;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
 1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <printing_data+0x9a>
 1cc:	0f 5a       	subi	r16, 0xAF	; 175
 1ce:	1f 4f       	sbci	r17, 0xFF	; 255
{

for (int i=0; i<Nr_msg; i++)
{

	for (int j=0; j<Gps_data[i].length; j++)
 1d0:	f6 01       	movw	r30, r12
 1d2:	e2 cf       	rjmp	.-60     	; 0x198 <printing_data+0x5e>
	
}

}
print_flag=1;
}
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	ff 90       	pop	r15
 1de:	ef 90       	pop	r14
 1e0:	df 90       	pop	r13
 1e2:	cf 90       	pop	r12
 1e4:	bf 90       	pop	r11
 1e6:	af 90       	pop	r10
 1e8:	9f 90       	pop	r9
 1ea:	8f 90       	pop	r8
 1ec:	08 95       	ret

000001ee <I2C_slave_init>:
	 }
}

void I2C_slave_init()
{
	I2C_setCallbacks(I2C_received, I2C_requested);					// set received/requested callbacks
 1ee:	6f e1       	ldi	r22, 0x1F	; 31
 1f0:	71 e0       	ldi	r23, 0x01	; 1
 1f2:	83 e5       	ldi	r24, 0x53	; 83
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 55 01 	call	0x2aa	; 0x2aa <I2C_setCallbacks>
	i2c_init(I2C_ADD);
 1fa:	80 e1       	ldi	r24, 0x10	; 16
 1fc:	0e 94 5e 01 	call	0x2bc	; 0x2bc <i2c_init>
 200:	08 95       	ret

00000202 <send_latitdue>:
}


void send_latitdue(void)
{
	i2c_transmit_data(10);
 202:	8a e0       	ldi	r24, 0x0A	; 10
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 67 01 	call	0x2ce	; 0x2ce <i2c_transmit_data>
 20a:	08 95       	ret

0000020c <send_logtitude>:
}
void send_logtitude(void)
{
	i2c_transmit_data(20);
 20c:	84 e1       	ldi	r24, 0x14	; 20
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 67 01 	call	0x2ce	; 0x2ce <i2c_transmit_data>
 214:	08 95       	ret

00000216 <send_age_of_data>:
}
void send_age_of_data(void)
{
	i2c_transmit_data(30);
 216:	8e e1       	ldi	r24, 0x1E	; 30
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 67 01 	call	0x2ce	; 0x2ce <i2c_transmit_data>
 21e:	08 95       	ret

00000220 <send_quality>:
}
void send_quality(void)
{
	i2c_transmit_data(40);
 220:	88 e2       	ldi	r24, 0x28	; 40
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 67 01 	call	0x2ce	; 0x2ce <i2c_transmit_data>
 228:	08 95       	ret

0000022a <send_direction>:
}
void send_direction(void)
{
	i2c_transmit_data(50);
 22a:	82 e3       	ldi	r24, 0x32	; 50
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 67 01 	call	0x2ce	; 0x2ce <i2c_transmit_data>
 232:	08 95       	ret

00000234 <send_velocity>:
}
void send_velocity(void)
{
	i2c_transmit_data(60);
 234:	8c e3       	ldi	r24, 0x3C	; 60
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 67 01 	call	0x2ce	; 0x2ce <i2c_transmit_data>
 23c:	08 95       	ret

0000023e <I2C_requested>:
	command = received_data;								
}

void I2C_requested(void)												//if master request data from slave
{
	 switch(command)
 23e:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <command>
 242:	82 30       	cpi	r24, 0x02	; 2
 244:	91 f0       	breq	.+36     	; 0x26a <I2C_requested+0x2c>
 246:	28 f4       	brcc	.+10     	; 0x252 <I2C_requested+0x14>
 248:	88 23       	and	r24, r24
 24a:	49 f0       	breq	.+18     	; 0x25e <I2C_requested+0x20>
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	51 f0       	breq	.+20     	; 0x264 <I2C_requested+0x26>
 250:	08 95       	ret
 252:	84 30       	cpi	r24, 0x04	; 4
 254:	81 f0       	breq	.+32     	; 0x276 <I2C_requested+0x38>
 256:	60 f0       	brcs	.+24     	; 0x270 <I2C_requested+0x32>
 258:	85 30       	cpi	r24, 0x05	; 5
 25a:	81 f0       	breq	.+32     	; 0x27c <I2C_requested+0x3e>
 25c:	08 95       	ret
	 {
		 
		 case 0:
		 {
		 send_latitdue();
 25e:	0e 94 01 01 	call	0x202	; 0x202 <send_latitdue>
		 break;
 262:	08 95       	ret
		 }
		 
		 case 1:
		 {
		 send_logtitude();
 264:	0e 94 06 01 	call	0x20c	; 0x20c <send_logtitude>
		 break;
 268:	08 95       	ret
		 }
		  
		 case 2:
		 {
		 send_quality();
 26a:	0e 94 10 01 	call	0x220	; 0x220 <send_quality>
		 break;
 26e:	08 95       	ret
		 }
		    
		 case 3:
		 {
		 send_age_of_data();
 270:	0e 94 0b 01 	call	0x216	; 0x216 <send_age_of_data>
		 break;
 274:	08 95       	ret
		 }
		 
		 case 4:
		 {
		 send_direction();
 276:	0e 94 15 01 	call	0x22a	; 0x22a <send_direction>
		 break;
 27a:	08 95       	ret
		 }
		  
		 case 5:
		 {
		 send_velocity();
 27c:	0e 94 1a 01 	call	0x234	; 0x234 <send_velocity>
 280:	08 95       	ret

00000282 <__vector_1>:
	i2c_transmit_data(60);
}


ISR(INT0_vect)
{
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	8f 93       	push	r24
process=1;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
package=0;
 294:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <package>
byte=-1;
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <byte>
 29e:	8f 91       	pop	r24
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <I2C_setCallbacks>:
{
		
		cli();
		TWCR = 0;			// clear acknowledge and enable bits
		TWAR = 0;
		sei();
 2aa:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <I2C_recieve+0x1>
 2ae:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <I2C_recieve>
 2b2:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <I2C_data_request+0x1>
 2b6:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <I2C_data_request>
 2ba:	08 95       	ret

000002bc <i2c_init>:
 2bc:	f8 94       	cli
 2be:	88 0f       	add	r24, r24
 2c0:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
 2c4:	85 ec       	ldi	r24, 0xC5	; 197
 2c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2ca:	78 94       	sei
 2cc:	08 95       	ret

000002ce <i2c_transmit_data>:


void i2c_transmit_data(int data)
{	
	
	TWDR = data;
 2ce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 2d2:	08 95       	ret

000002d4 <__vector_24>:

// TWI Interrupt!! 


ISR(TWI_vect)
{
 2d4:	1f 92       	push	r1
 2d6:	0f 92       	push	r0
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	0f 92       	push	r0
 2dc:	11 24       	eor	r1, r1
 2de:	2f 93       	push	r18
 2e0:	3f 93       	push	r19
 2e2:	4f 93       	push	r20
 2e4:	5f 93       	push	r21
 2e6:	6f 93       	push	r22
 2e8:	7f 93       	push	r23
 2ea:	8f 93       	push	r24
 2ec:	9f 93       	push	r25
 2ee:	af 93       	push	r26
 2f0:	bf 93       	push	r27
 2f2:	ef 93       	push	r30
 2f4:	ff 93       	push	r31
	switch(TW_STATUS)
 2f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2fa:	88 7f       	andi	r24, 0xF8	; 248
 2fc:	80 38       	cpi	r24, 0x80	; 128
 2fe:	49 f0       	breq	.+18     	; 0x312 <__vector_24+0x3e>
 300:	18 f4       	brcc	.+6      	; 0x308 <__vector_24+0x34>
 302:	88 23       	and	r24, r24
 304:	f1 f0       	breq	.+60     	; 0x342 <__vector_24+0x6e>
 306:	23 c0       	rjmp	.+70     	; 0x34e <__vector_24+0x7a>
 308:	88 3a       	cpi	r24, 0xA8	; 168
 30a:	71 f0       	breq	.+28     	; 0x328 <__vector_24+0x54>
 30c:	88 3b       	cpi	r24, 0xB8	; 184
 30e:	a9 f0       	breq	.+42     	; 0x33a <__vector_24+0x66>
 310:	1e c0       	rjmp	.+60     	; 0x34e <__vector_24+0x7a>
	{
		case TW_SR_DATA_ACK:
		// received data from master, call the receive callback
		I2C_recieve(TWDR);
 312:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 316:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <I2C_recieve>
 31a:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <I2C_recieve+0x1>
 31e:	09 95       	icall
		
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 320:	85 ec       	ldi	r24, 0xC5	; 197
 322:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
 326:	16 c0       	rjmp	.+44     	; 0x354 <__vector_24+0x80>
		
		case TW_ST_SLA_ACK:
		// master is requesting data, call the request callback
		I2C_data_request();
 328:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <I2C_data_request>
 32c:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <I2C_data_request+0x1>
 330:	09 95       	icall
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 332:	85 ec       	ldi	r24, 0xC5	; 197
 334:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
 338:	0d c0       	rjmp	.+26     	; 0x354 <__vector_24+0x80>
		
		case TW_ST_DATA_ACK:
		// master is requesting data, call the request callback
	
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 33a:	85 ec       	ldi	r24, 0xC5	; 197
 33c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		
		break;
 340:	09 c0       	rjmp	.+18     	; 0x354 <__vector_24+0x80>
		
		case TW_BUS_ERROR:
		// some sort of erroneous state, prepare TWI to be readdressed
		TWCR = 0;
 342:	ec eb       	ldi	r30, 0xBC	; 188
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	10 82       	st	Z, r1
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 348:	85 ec       	ldi	r24, 0xC5	; 197
 34a:	80 83       	st	Z, r24
		break;
 34c:	03 c0       	rjmp	.+6      	; 0x354 <__vector_24+0x80>
		
		default:
		TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 34e:	85 ec       	ldi	r24, 0xC5	; 197
 350:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		break;
	}
}
 354:	ff 91       	pop	r31
 356:	ef 91       	pop	r30
 358:	bf 91       	pop	r27
 35a:	af 91       	pop	r26
 35c:	9f 91       	pop	r25
 35e:	8f 91       	pop	r24
 360:	7f 91       	pop	r23
 362:	6f 91       	pop	r22
 364:	5f 91       	pop	r21
 366:	4f 91       	pop	r20
 368:	3f 91       	pop	r19
 36a:	2f 91       	pop	r18
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <main>:
#include "i2c_atmega_328p_slave.h"
#include <util/delay.h>

int main(void)
{
	DDRD = 0x00; // I/O PD0-PD7 set as input
 376:	1a b8       	out	0x0a, r1	; 10
	DDRC = 0xF0; // I/O board PC0..3 as inputs, for buttons
 378:	80 ef       	ldi	r24, 0xF0	; 240
 37a:	87 b9       	out	0x07, r24	; 7
	PORTD = 0x00; // Enable internal pull at PC0...3 inputs
 37c:	1b b8       	out	0x0b, r1	; 11
	PORTC = 0x30; // Enable internal pull at PC0...3 3 inputs
 37e:	80 e3       	ldi	r24, 0x30	; 48
 380:	88 b9       	out	0x08, r24	; 8
	I2C_slave_init();
 382:	0e 94 f7 00 	call	0x1ee	; 0x1ee <I2C_slave_init>
	usart_init();
 386:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <usart_init>
	GPS_init();
 38a:	0e 94 56 00 	call	0xac	; 0xac <GPS_init>
	

	while(1)
	{		
		printing_data();
 38e:	0e 94 9d 00 	call	0x13a	; 0x13a <printing_data>
 392:	fd cf       	rjmp	.-6      	; 0x38e <main+0x18>

00000394 <usart_send>:
	while(!(UCSR0A & (1<<RXC0))); //wait for new data
	return UDR0; //received data
}

void usart_send( unsigned char data){
	while(!(UCSR0A & (1<<UDRE0))); //wait for transmit buffer
 394:	e0 ec       	ldi	r30, 0xC0	; 192
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	90 81       	ld	r25, Z
 39a:	95 ff       	sbrs	r25, 5
 39c:	fd cf       	rjmp	.-6      	; 0x398 <usart_send+0x4>
	UDR0 = data; //data to be sent
 39e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3a2:	08 95       	ret

000003a4 <usart_init>:
}

void usart_init(void)
{
	UBRR0H = (uint8_t)(BAUD_PRESCALER>>8);
 3a4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALER);
 3a8:	83 e3       	ldi	r24, 0x33	; 51
 3aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)| (1<<RXCIE0);
 3ae:	88 e9       	ldi	r24, 0x98	; 152
 3b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
 3b4:	86 e0       	ldi	r24, 0x06	; 6
 3b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 3ba:	08 95       	ret

000003bc <__vector_18>:
}


ISR(USART_RX_vect)
{		
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
 3c6:	2f 93       	push	r18
 3c8:	3f 93       	push	r19
 3ca:	4f 93       	push	r20
 3cc:	5f 93       	push	r21
 3ce:	6f 93       	push	r22
 3d0:	7f 93       	push	r23
 3d2:	8f 93       	push	r24
 3d4:	9f 93       	push	r25
 3d6:	af 93       	push	r26
 3d8:	bf 93       	push	r27
 3da:	ef 93       	push	r30
 3dc:	ff 93       	push	r31
	check_gps_data();
 3de:	0e 94 66 00 	call	0xcc	; 0xcc <check_gps_data>
 3e2:	ff 91       	pop	r31
 3e4:	ef 91       	pop	r30
 3e6:	bf 91       	pop	r27
 3e8:	af 91       	pop	r26
 3ea:	9f 91       	pop	r25
 3ec:	8f 91       	pop	r24
 3ee:	7f 91       	pop	r23
 3f0:	6f 91       	pop	r22
 3f2:	5f 91       	pop	r21
 3f4:	4f 91       	pop	r20
 3f6:	3f 91       	pop	r19
 3f8:	2f 91       	pop	r18
 3fa:	0f 90       	pop	r0
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	0f 90       	pop	r0
 400:	1f 90       	pop	r1
 402:	18 95       	reti

00000404 <_exit>:
 404:	f8 94       	cli

00000406 <__stop_program>:
 406:	ff cf       	rjmp	.-2      	; 0x406 <__stop_program>
